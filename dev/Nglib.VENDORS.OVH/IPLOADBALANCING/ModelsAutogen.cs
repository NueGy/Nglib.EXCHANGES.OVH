//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/ipLoadbalancing"  string[]--
//[GET] "/ipLoadbalancing/availableZones"  string[]--
//[GET] "/ipLoadbalancing/{serviceName}"  ipLoadbalancing.Ip--serviceName
//[PUT] "/ipLoadbalancing/{serviceName}"  void--,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/availableFarmProbes"  ipLoadbalancing.FarmAvailableProbe[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/availableFarmType"  string[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/availableFrontendType"  string[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/availableRouteActions"  ipLoadbalancing.RouteAvailableAction[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/availableRouteRules"  ipLoadbalancing.RouteAvailableRule[]--serviceName
//[POST] "/ipLoadbalancing/{serviceName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/confirmTermination"  string--commentary,futureUse,reason,serviceName,token
//[GET] "/ipLoadbalancing/{serviceName}/definedFarms"  ipLoadbalancing.DefinedFarm[]--serviceName,vrackNetworkId
//[GET] "/ipLoadbalancing/{serviceName}/definedFrontends"  ipLoadbalancing.DefinedFrontend[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/definedRoutes"  ipLoadbalancing.DefinedRoute[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/failover"  ipBlock[]--serviceName
//[POST] "/ipLoadbalancing/{serviceName}/freeCertificate"  ipLoadbalancing.Task.Task--fqdn,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/farm"  long[]--serviceName,vrackNetworkId,zone
//[POST] "/ipLoadbalancing/{serviceName}/http/farm"  ipLoadbalancing.backendHttp.BackendHttp--balance,displayName,port,probe,serviceName,stickiness,vrackNetworkId,zone
//[DELETE] "/ipLoadbalancing/{serviceName}/http/farm/{farmId}"  void--farmId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/farm/{farmId}"  ipLoadbalancing.backendHttp.BackendHttp--farmId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/http/farm/{farmId}"  void--,farmId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server"  long[]--address,cookie,farmId,serviceName,status
//[POST] "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server"  ipLoadbalancing.backendHttpCustomerServer.BackendHTTPServer--address,backup,chain,cookie,displayName,farmId,port,probe,proxyProtocolVersion,serviceName,ssl,status,weight
//[DELETE] "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}"  void--farmId,serverId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}"  ipLoadbalancing.backendHttpCustomerServer.BackendHTTPServer--farmId,serverId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/http/farm/{farmId}/server/{serverId}"  void--,farmId,serverId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/frontend"  long[]--defaultFarmId,port,serviceName,zone
//[POST] "/ipLoadbalancing/{serviceName}/http/frontend"  ipLoadbalancing.frontendHttp.FrontendHttp--allowedSource,dedicatedIpfo,defaultFarmId,defaultSslId,deniedSource,disabled,displayName,hsts,httpHeader,port,redirectLocation,serviceName,ssl,zone
//[DELETE] "/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}"  void--frontendId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}"  ipLoadbalancing.frontendHttp.FrontendHttp--frontendId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/http/frontend/{frontendId}"  void--,frontendId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/route"  long[]--frontendId,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/http/route"  ipLoadbalancing.RouteHttp.RouteHttp--action,displayName,frontendId,serviceName,weight
//[DELETE] "/ipLoadbalancing/{serviceName}/http/route/{routeId}"  void--routeId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/route/{routeId}"  ipLoadbalancing.RouteHttp.RouteHttp--routeId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/http/route/{routeId}"  void--,routeId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule"  long[]--routeId,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule"  ipLoadbalancing.RouteRule.RouteRule--displayName,field,match,negate,pattern,routeId,serviceName,subField
//[DELETE] "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}"  void--routeId,ruleId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}"  ipLoadbalancing.RouteRule.RouteRule--routeId,ruleId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/http/route/{routeId}/rule/{ruleId}"  void--,routeId,ruleId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/instancesState"  ipLoadbalancing.InstancesState[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/natIp"  ipLoadbalancing.NatIps[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/pendingChanges"  ipLoadbalancing.PendingChanges[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/quota"  string[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/quota/{zone}"  ipLoadbalancing.Quota.Quota--serviceName,zone
//[PUT] "/ipLoadbalancing/{serviceName}/quota/{zone}"  void--,serviceName,zone
//[GET] "/ipLoadbalancing/{serviceName}/quotaHistory"  long[]--historizedDate.from,historizedDate.to,serviceName,zone
//[GET] "/ipLoadbalancing/{serviceName}/quotaHistory/{id}"  ipLoadbalancing.QuotaHistory.QuotaHistory--id,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/refresh"  ipLoadbalancing.Task.Task--serviceName,zone
//[GET] "/ipLoadbalancing/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/ssl"  long[]--fingerprint,serial,serviceName,type
//[POST] "/ipLoadbalancing/{serviceName}/ssl"  ipLoadbalancing.Ssl.Ssl--certificate,chain,displayName,key,serviceName
//[DELETE] "/ipLoadbalancing/{serviceName}/ssl/{id}"  void--id,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/ssl/{id}"  ipLoadbalancing.Ssl.Ssl--id,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/ssl/{id}"  void--,id,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/status"  ipLoadbalancing.Status--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/task"  long[]--action,creationDate.from,creationDate.to,doneDate.from,doneDate.to,serviceName,status
//[GET] "/ipLoadbalancing/{serviceName}/task/{id}"  ipLoadbalancing.Task.Task--id,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/farm"  long[]--serviceName,vrackNetworkId,zone
//[POST] "/ipLoadbalancing/{serviceName}/tcp/farm"  ipLoadbalancing.backendTcp.BackendTcp--balance,displayName,port,probe,serviceName,stickiness,vrackNetworkId,zone
//[DELETE] "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}"  void--farmId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}"  ipLoadbalancing.backendTcp.BackendTcp--farmId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}"  void--,farmId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server"  long[]--address,farmId,serviceName,status
//[POST] "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server"  ipLoadbalancing.backendTcpCustomerServer.BackendTCPServer--address,backup,chain,displayName,farmId,port,probe,proxyProtocolVersion,serviceName,ssl,status,weight
//[DELETE] "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}"  void--farmId,serverId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}"  ipLoadbalancing.backendTcpCustomerServer.BackendTCPServer--farmId,serverId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/tcp/farm/{farmId}/server/{serverId}"  void--,farmId,serverId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/frontend"  long[]--defaultFarmId,port,serviceName,zone
//[POST] "/ipLoadbalancing/{serviceName}/tcp/frontend"  ipLoadbalancing.frontendTcp.FrontendTcp--allowedSource,dedicatedIpfo,defaultFarmId,defaultSslId,deniedSource,disabled,displayName,port,serviceName,ssl,zone
//[DELETE] "/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}"  void--frontendId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}"  ipLoadbalancing.frontendTcp.FrontendTcp--frontendId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/tcp/frontend/{frontendId}"  void--,frontendId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/route"  long[]--frontendId,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/tcp/route"  ipLoadbalancing.RouteTcp.RouteTcp--action,displayName,frontendId,serviceName,weight
//[DELETE] "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}"  void--routeId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}"  ipLoadbalancing.RouteTcp.RouteTcp--routeId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}"  void--,routeId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule"  long[]--routeId,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule"  ipLoadbalancing.RouteRule.RouteRule--displayName,field,match,negate,pattern,routeId,serviceName,subField
//[DELETE] "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}"  void--routeId,ruleId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}"  ipLoadbalancing.RouteRule.RouteRule--routeId,ruleId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/tcp/route/{routeId}/rule/{ruleId}"  void--,routeId,ruleId,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/terminate"  string--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/udp/farm"  long[]--serviceName,vrackNetworkId,zone
//[POST] "/ipLoadbalancing/{serviceName}/udp/farm"  ipLoadbalancing.backendUdp.BackendUdp--displayName,port,serviceName,vrackNetworkId,zone
//[DELETE] "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}"  void--farmId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}"  ipLoadbalancing.backendUdp.BackendUdp--farmId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}"  void--,farmId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server"  long[]--address,farmId,serviceName,status
//[POST] "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server"  ipLoadbalancing.backendUdpCustomerServer.BackendUDPServer--address,displayName,farmId,port,serviceName,status
//[DELETE] "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}"  void--farmId,serverId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}"  ipLoadbalancing.backendUdpCustomerServer.BackendUDPServer--farmId,serverId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/udp/farm/{farmId}/server/{serverId}"  void--,farmId,serverId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/udp/frontend"  long[]--defaultFarmId,port,serviceName,zone
//[POST] "/ipLoadbalancing/{serviceName}/udp/frontend"  ipLoadbalancing.frontendUdp.FrontendUdp--dedicatedIpfo,defaultFarmId,disabled,displayName,port,serviceName,zone
//[DELETE] "/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}"  void--frontendId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}"  ipLoadbalancing.frontendUdp.FrontendUdp--frontendId,serviceName
//[PUT] "/ipLoadbalancing/{serviceName}/udp/frontend/{frontendId}"  void--,frontendId,serviceName
//[GET] "/ipLoadbalancing/{serviceName}/vrack/network"  long[]--serviceName,subnet,vlan
//[POST] "/ipLoadbalancing/{serviceName}/vrack/network"  ipLoadbalancing.VrackNetwork.VrackNetwork--displayName,farmId,natIp,serviceName,subnet,vlan
//[DELETE] "/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}"  void--serviceName,vrackNetworkId
//[GET] "/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}"  ipLoadbalancing.VrackNetwork.VrackNetwork--serviceName,vrackNetworkId
//[PUT] "/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}"  void--,serviceName,vrackNetworkId
//[POST] "/ipLoadbalancing/{serviceName}/vrack/network/{vrackNetworkId}/updateFarmId"  ipLoadbalancing.VrackNetwork.VrackNetwork--farmId,serviceName,vrackNetworkId
//[GET] "/ipLoadbalancing/{serviceName}/vrack/networkCreationRules"  ipLoadbalancing.VrackNetworkCreationRules--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/vrack/status"  ipLoadbalancing.VrackInformation--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/zone"  string[]--serviceName
//[GET] "/ipLoadbalancing/{serviceName}/zone/{name}"  ipLoadbalancing.Zone.Zone--name,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/zone/{name}/cancelTermination"  void--name,serviceName
//[POST] "/ipLoadbalancing/{serviceName}/zone/{name}/terminate"  void--name,serviceName
namespace Nglib.VENDORS.OVH.IPLOADBALANCING {
	
	
	/// <summary>
	/// Possible values for server status
	/// </summary>
	public enum IpLoadbalancingBackendCustomerServerStatusEnum {
		
		[EnumMember(Value="active")]
		Active,
		
		[EnumMember(Value="inactive")]
		Inactive,
	}
	
	/// <summary>
	/// Possible values for load balancing balance algorithm
	/// </summary>
	public enum IpLoadbalancingBalanceHTTPEnum {
		
		[EnumMember(Value="first")]
		First,
		
		[EnumMember(Value="leastconn")]
		Leastconn,
		
		[EnumMember(Value="roundrobin")]
		Roundrobin,
		
		[EnumMember(Value="source")]
		Source,
		
		[EnumMember(Value="uri")]
		Uri,
	}
	
	/// <summary>
	/// Possible values for load balancing balance algorithm
	/// </summary>
	public enum IpLoadbalancingBalanceTCPEnum {
		
		[EnumMember(Value="first")]
		First,
		
		[EnumMember(Value="leastconn")]
		Leastconn,
		
		[EnumMember(Value="roundrobin")]
		Roundrobin,
		
		[EnumMember(Value="source")]
		Source,
	}
	
	/// <summary>
	/// Possible values for load balancing IP state
	/// </summary>
	public enum IpLoadbalancingIpStateEnum {
		
		[EnumMember(Value="blacklisted")]
		Blacklisted,
		
		[EnumMember(Value="deleted")]
		Deleted,
		
		[EnumMember(Value="free")]
		Free,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="quarantined")]
		Quarantined,
		
		[EnumMember(Value="suspended")]
		Suspended,
	}
	
	/// <summary>
	/// List of possible probe result matches. &quot;status&quot; is only supported for HTTP probes
	/// </summary>
	public enum IpLoadbalancingProbeExpectMatchEnum {
		
		[EnumMember(Value="contains")]
		Contains,
		
		[EnumMember(Value="default")]
		Default,
		
		[EnumMember(Value="internal")]
		Internal,
		
		[EnumMember(Value="matches")]
		Matches,
		
		[EnumMember(Value="status")]
		Status,
	}
	
	/// <summary>
	/// List of possible method for HTTP probes. Consider using HEAD to save bandwidth when possible.
	/// </summary>
	public enum IpLoadbalancingProbeMethodEnum {
		
		[EnumMember(Value="GET")]
		GET,
		
		[EnumMember(Value="HEAD")]
		HEAD,
		
		[EnumMember(Value="OPTIONS")]
		OPTIONS,
		
		[EnumMember(Value="internal")]
		Internal,
	}
	
	/// <summary>
	/// Possible values for farm probe
	/// </summary>
	public enum IpLoadbalancingProbeTypeEnum {
		
		[EnumMember(Value="http")]
		Http,
		
		[EnumMember(Value="internal")]
		Internal,
		
		[EnumMember(Value="mysql")]
		Mysql,
		
		[EnumMember(Value="oco")]
		Oco,
		
		[EnumMember(Value="pgsql")]
		Pgsql,
		
		[EnumMember(Value="smtp")]
		Smtp,
		
		[EnumMember(Value="tcp")]
		Tcp,
	}
	
	/// <summary>
	/// Possible values for proxy type
	/// </summary>
	public enum IpLoadbalancingProxyProtocolVersionEnum {
		
		[EnumMember(Value="v1")]
		V1,
		
		[EnumMember(Value="v2")]
		V2,
		
		[EnumMember(Value="v2-ssl")]
		V2_ssl,
		
		[EnumMember(Value="v2-ssl-cn")]
		V2_ssl_cn,
	}
	
	/// <summary>
	/// List of possible route rule matches
	/// </summary>
	public enum IpLoadbalancingRouteRuleMatchesEnum {
		
		[EnumMember(Value="contains")]
		Contains,
		
		[EnumMember(Value="endswith")]
		Endswith,
		
		[EnumMember(Value="exists")]
		Exists,
		
		[EnumMember(Value="in")]
		In,
		
		[EnumMember(Value="internal")]
		Internal,
		
		[EnumMember(Value="is")]
		Is,
		
		[EnumMember(Value="matches")]
		Matches,
		
		[EnumMember(Value="startswith")]
		Startswith,
	}
	
	/// <summary>
	/// Route configuration status
	/// </summary>
	public enum IpLoadbalancingRouteStatusEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="internal")]
		Internal,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="updating")]
		Updating,
	}
	
	/// <summary>
	/// Possible values for ssl ciphers
	/// </summary>
	public enum IpLoadbalancingSslConfigurationEnum {
		
		[EnumMember(Value="intermediate")]
		Intermediate,
		
		[EnumMember(Value="modern")]
		Modern,
	}
	
	/// <summary>
	/// Possible values for ssl type
	/// </summary>
	public enum IpLoadbalancingSslTypeEnum {
		
		[EnumMember(Value="built")]
		Built,
		
		[EnumMember(Value="built_not_routed")]
		Built_not_routed,
		
		[EnumMember(Value="custom")]
		Custom,
	}
	
	/// <summary>
	/// Possible values for HTTP backend stickiness
	/// </summary>
	public enum IpLoadbalancingStickinessHTTPEnum {
		
		[EnumMember(Value="cookie")]
		Cookie,
		
		[EnumMember(Value="sourceIp")]
		SourceIp,
	}
	
	/// <summary>
	/// Possible values for TCP backend stickiness
	/// </summary>
	public enum IpLoadbalancingStickinessTCPEnum {
		
		[EnumMember(Value="sourceIp")]
		SourceIp,
	}
	
	/// <summary>
	/// Possible task action
	/// </summary>
	public enum IpLoadbalancingTaskActionEnum {
		
		[EnumMember(Value="deleteIplb")]
		DeleteIplb,
		
		[EnumMember(Value="deployIplb")]
		DeployIplb,
		
		[EnumMember(Value="install")]
		Install,
		
		[EnumMember(Value="installIplb")]
		InstallIplb,
		
		[EnumMember(Value="installZone")]
		InstallZone,
		
		[EnumMember(Value="orderFreeCertificate")]
		OrderFreeCertificate,
		
		[EnumMember(Value="orderPaidCertificate")]
		OrderPaidCertificate,
		
		[EnumMember(Value="orderSsl")]
		OrderSsl,
		
		[EnumMember(Value="refreshIplb")]
		RefreshIplb,
		
		[EnumMember(Value="releaseIplb")]
		ReleaseIplb,
		
		[EnumMember(Value="releaseIplbZone")]
		ReleaseIplbZone,
		
		[EnumMember(Value="reopenIplb")]
		ReopenIplb,
		
		[EnumMember(Value="suspendIplb")]
		SuspendIplb,
		
		[EnumMember(Value="suspendZone")]
		SuspendZone,
		
		[EnumMember(Value="switchToIplbNextGenerationApi")]
		SwitchToIplbNextGenerationApi,
		
		[EnumMember(Value="vrackAttach")]
		VrackAttach,
		
		[EnumMember(Value="vrackDetach")]
		VrackDetach,
	}
	
	/// <summary>
	/// Possible task status
	/// </summary>
	public enum IpLoadbalancingTaskStatusEnum {
		
		[EnumMember(Value="blocked")]
		Blocked,
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Possible values for load balancing vRack state
	/// </summary>
	public enum IpLoadbalancingVrackStateEnum {
		
		[EnumMember(Value="activating")]
		Activating,
		
		[EnumMember(Value="active")]
		Active,
		
		[EnumMember(Value="deactivating")]
		Deactivating,
		
		[EnumMember(Value="inactive")]
		Inactive,
	}
	
	/// <summary>
	/// Possible values for a Load Balancer status
	/// </summary>
	public enum IpLoadbalancingstatusEnum {
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="unknown")]
		Unknown,
		
		[EnumMember(Value="warn")]
		Warn,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// All future uses you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationFutureUseEnum {
		
		[EnumMember(Value="NOT_REPLACING_SERVICE")]
		NOT_REPLACING_SERVICE,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="SUBSCRIBE_AN_OTHER_SERVICE")]
		SUBSCRIBE_AN_OTHER_SERVICE,
		
		[EnumMember(Value="SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR,
		
		[EnumMember(Value="SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR,
	}
	
	/// <summary>
	/// All reasons you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationReasonEnum {
		
		[EnumMember(Value="FEATURES_DONT_SUIT_ME")]
		FEATURES_DONT_SUIT_ME,
		
		[EnumMember(Value="LACK_OF_PERFORMANCES")]
		LACK_OF_PERFORMANCES,
		
		[EnumMember(Value="MIGRATED_TO_ANOTHER_OVH_PRODUCT")]
		MIGRATED_TO_ANOTHER_OVH_PRODUCT,
		
		[EnumMember(Value="MIGRATED_TO_COMPETITOR")]
		MIGRATED_TO_COMPETITOR,
		
		[EnumMember(Value="NOT_ENOUGH_RECOGNITION")]
		NOT_ENOUGH_RECOGNITION,
		
		[EnumMember(Value="NOT_NEEDED_ANYMORE")]
		NOT_NEEDED_ANYMORE,
		
		[EnumMember(Value="NOT_RELIABLE")]
		NOT_RELIABLE,
		
		[EnumMember(Value="NO_ANSWER")]
		NO_ANSWER,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="PRODUCT_DIMENSION_DONT_SUIT_ME")]
		PRODUCT_DIMENSION_DONT_SUIT_ME,
		
		[EnumMember(Value="PRODUCT_TOOLS_DONT_SUIT_ME")]
		PRODUCT_TOOLS_DONT_SUIT_ME,
		
		[EnumMember(Value="TOO_EXPENSIVE")]
		TOO_EXPENSIVE,
		
		[EnumMember(Value="TOO_HARD_TO_USE")]
		TOO_HARD_TO_USE,
		
		[EnumMember(Value="UNSATIFIED_BY_CUSTOMER_SUPPORT")]
		UNSATIFIED_BY_CUSTOMER_SUPPORT,
	}
	
	/// <summary>
	/// Probe used to determine if a backend is alive and can handle requests
	/// </summary>
	public class IpLoadbalancingBackendProbe {
		
		private System.Nullable<bool> ForceSsl_bfield;
		
		private System.Nullable<long> Interval_bfield;
		
		private string Match_bfield;
		
		private string Method_bfield;
		
		private System.Nullable<bool> Negate_bfield;
		
		private string Pattern_bfield;
		
		private System.Nullable<long> Port_bfield;
		
		private string Type_bfield;
		
		private string Url_bfield;
		
		/// <summary>
		/// Force probe to run over a SSL layer. Defaults to false
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Force probe to run over a SSL layer. Defaults to false&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forceSsl")]
		public System.Nullable<bool> ForceSsl {
			get {
				return this.ForceSsl_bfield;
			}
			set {
				this.ForceSsl_bfield = value;
			}
		}
		
		/// <summary>
		/// Seconds between each probe check. Must be &gt; 30sec. Defaults to 30
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Seconds between each probe check. Must be &gt; 30sec. Defaults to 30&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("interval")]
		public System.Nullable<long> Interval {
			get {
				return this.Interval_bfield;
			}
			set {
				this.Interval_bfield = value;
			}
		}
		
		/// <summary>
		/// Matcher to use to valide &quot;expect&quot;. &quot;default&quot; uses HAProxy's default behavior for this type of check. &quot;status&quot; is only supported for HTTP probes
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.ProbeExpectMatchEnum&quot;,&quot;Description&quot;:&quot;Matcher to use to valide \&quot;expect\&quot;. \&quot;default\&quot; uses HAProxy's default behavior for this type of check. \&quot;status\&quot; is only supported for HTTP probes&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("match")]
		public string Match {
			get {
				return this.Match_bfield;
			}
			set {
				this.Match_bfield = value;
			}
		}
		
		/// <summary>
		/// HTTP method to use with &quot;http&quot; probe. Consider using HEAD to save bandwidth when possible. Defaults to &quot;GET&quot;
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.ProbeMethodEnum&quot;,&quot;Description&quot;:&quot;HTTP method to use with \&quot;http\&quot; probe. Consider using HEAD to save bandwidth when possible. Defaults to \&quot;GET\&quot;&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("method")]
		public string Method {
			get {
				return this.Method_bfield;
			}
			set {
				this.Method_bfield = value;
			}
		}
		
		/// <summary>
		/// Invert the matching operator effect
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Invert the matching operator effect&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("negate")]
		public System.Nullable<bool> Negate {
			get {
				return this.Negate_bfield;
			}
			set {
				this.Negate_bfield = value;
			}
		}
		
		/// <summary>
		/// Server response expected when UP. Empty for &quot;default&quot;, comma delimited list of statuses for &quot;status&quot;, string for &quot;contains&quot;, regex for &quot;matches&quot;
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Server response expected when UP. Empty for \&quot;default\&quot;, comma delimited list of statuses for \&quot;status\&quot;, string for \&quot;contains\&quot;, regex for \&quot;matches\&quot;&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("pattern")]
		public string Pattern {
			get {
				return this.Pattern_bfield;
			}
			set {
				this.Pattern_bfield = value;
			}
		}
		
		/// <summary>
		/// Port used to probe your backend. Equal to farm port if null. Ignored for oco probe type
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port used to probe your backend. Equal to farm port if null. Ignored for oco probe type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public System.Nullable<long> Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Probe type. &quot;tcp&quot; if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.ProbeTypeEnum&quot;,&quot;Description&quot;:&quot;Probe type. \&quot;tcp\&quot; if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
		
		/// <summary>
		/// URL to use for HTTP probes of the form [www.example.com]/path/to/check. Protocol will be ignored. Defaults to &quot;/&quot;
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;URL to use for HTTP probes of the form [www.example.com]/path/to/check. Protocol will be ignored. Defaults to \&quot;/\&quot;&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("url")]
		public string Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// a list of { type =&gt; [ Farm ids ] }
	/// </summary>
	public class IpLoadbalancingDefinedFarm {
		
		private long Id_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// a list of {type=&gt;[Frontend ids]}
	/// </summary>
	public class IpLoadbalancingDefinedFrontend {
		
		private long Id_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Defined routes name, type and id. Typically used to generate autocomplete lists.
	/// </summary>
	public class IpLoadbalancingDefinedRoute {
		
		private string DisplayName_bfield;
		
		private long RouteId_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Human readable name for your route
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your route&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your route
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your route&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("routeId")]
		public long RouteId {
			get {
				return this.RouteId_bfield;
			}
			set {
				this.RouteId_bfield = value;
			}
		}
		
		/// <summary>
		/// Protocol supported by this route
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Protocol supported by this route&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Available farm probes options
	/// </summary>
	public class IpLoadbalancingFarmAvailableProbe {
		
		private string[] Matches_bfield;
		
		private string[] Method_bfield;
		
		private string[] NegatableMatches_bfield;
		
		private bool Port_bfield;
		
		private string Type_bfield;
		
		private bool Url_bfield;
		
		/// <summary>
		/// List of possible probe result checkers for this type of probe
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;List of possible probe result checkers for this type of probe&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("matches")]
		public string[] Matches {
			get {
				return this.Matches_bfield;
			}
			set {
				this.Matches_bfield = value;
			}
		}
		
		/// <summary>
		/// List of available HTTP method, if available
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;List of available HTTP method, if available&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("method")]
		public string[] Method {
			get {
				return this.Method_bfield;
			}
			set {
				this.Method_bfield = value;
			}
		}
		
		/// <summary>
		/// List of matches operators that accept the negate option for this type of probe
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;List of matches operators that accept the negate option for this type of probe&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("negatableMatches")]
		public string[] NegatableMatches {
			get {
				return this.NegatableMatches_bfield;
			}
			set {
				this.NegatableMatches_bfield = value;
			}
		}
		
		/// <summary>
		/// True is this probe type supports a custom port
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;True is this probe type supports a custom port&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public bool Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Probe protocol name. See probe &quot;type&quot; field in the farm probe
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Probe protocol name. See probe \&quot;type\&quot; field in the farm probe&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
		
		/// <summary>
		/// True is this probe type supports a URL
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;True is this probe type supports a URL&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("url")]
		public bool Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A structure describing the current state of an IPLB instances
	/// </summary>
	public class IpLoadbalancingInstancesState {
		
		private long InternalId_bfield;
		
		private System.DateTime LastUpdateDate_bfield;
		
		private string State_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Internal ID of this IPLB instance
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Internal ID of this IPLB instance&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("internalId")]
		public long InternalId {
			get {
				return this.InternalId_bfield;
			}
			set {
				this.InternalId_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.DateTime LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Current state of this IPLB instance
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Current state of this IPLB instance&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// zone of this IPLB instance
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;zone of this IPLB instance&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Your IP load balancing
	/// </summary>
	public class IpLoadbalancingIp {
		
		private string DisplayName_bfield;
		
		private string IpLoadbalancing_bfield;
		
		private string Ipv4_bfield;
		
		private string Ipv6_bfield;
		
		private string MetricsToken_bfield;
		
		private string Offer_bfield;
		
		private string[] OrderableZone_bfield;
		
		private string ServiceName_bfield;
		
		private string SslConfiguration_bfield;
		
		private string State_bfield;
		
		private bool VrackEligibility_bfield;
		
		private string VrackName_bfield;
		
		private string[] Zone_bfield;
		
		/// <summary>
		/// Set the name displayed in ManagerV6 for your iplb (max 50 chars)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Set the name displayed in ManagerV6 for your iplb (max 50 chars)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Your IP load balancing
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;Your IP load balancing&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ipLoadbalancing")]
		public string IpLoadbalancing {
			get {
				return this.IpLoadbalancing_bfield;
			}
			set {
				this.IpLoadbalancing_bfield = value;
			}
		}
		
		/// <summary>
		/// The IPV4 associated to your IP load balancing
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;The IPV4 associated to your IP load balancing&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ipv4")]
		public string Ipv4 {
			get {
				return this.Ipv4_bfield;
			}
			set {
				this.Ipv4_bfield = value;
			}
		}
		
		/// <summary>
		/// The IPV6 associated to your IP load balancing. DEPRECATED
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipv6&quot;,&quot;Description&quot;:&quot;The IPV6 associated to your IP load balancing. DEPRECATED&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ipv6")]
		public string Ipv6 {
			get {
				return this.Ipv6_bfield;
			}
			set {
				this.Ipv6_bfield = value;
			}
		}
		
		/// <summary>
		/// The metrics token associated with your IP load balancing
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The metrics token associated with your IP load balancing&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("metricsToken")]
		public string MetricsToken {
			get {
				return this.MetricsToken_bfield;
			}
			set {
				this.MetricsToken_bfield = value;
			}
		}
		
		/// <summary>
		/// The offer of your IP load balancing
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The offer of your IP load balancing&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// Available additional zone for your Load Balancer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.OrderableZone[]&quot;,&quot;Description&quot;:&quot;Available additional zone for your Load Balancer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("orderableZone")]
		public string[] OrderableZone {
			get {
				return this.OrderableZone_bfield;
			}
			set {
				this.OrderableZone_bfield = value;
			}
		}
		
		/// <summary>
		/// The internal name of your IP load balancing
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The internal name of your IP load balancing&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceName")]
		public string ServiceName {
			get {
				return this.ServiceName_bfield;
			}
			set {
				this.ServiceName_bfield = value;
			}
		}
		
		/// <summary>
		/// Modern oldest compatible clients : Firefox 27, Chrome 30, IE 11 on Windows 7, Edge, Opera 17, Safari 9, Android 5.0, and Java 8. Intermediate oldest compatible clients : Firefox 1, Chrome 1, IE 7, Opera 5, Safari 1, Windows XP IE8, Android 2.3, Java 7. Intermediate if null.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.SslConfigurationEnum&quot;,&quot;Description&quot;:&quot;Modern oldest compatible clients : Firefox 27, Chrome 30, IE 11 on Windows 7, Edge, Opera 17, Safari 9, Android 5.0, and Java 8. Intermediate oldest compatible clients : Firefox 1, Chrome 1, IE 7, Opera 5, Safari 1, Windows XP IE8, Android 2.3, Java 7. Intermediate if null.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("sslConfiguration")]
		public string SslConfiguration {
			get {
				return this.SslConfiguration_bfield;
			}
			set {
				this.SslConfiguration_bfield = value;
			}
		}
		
		/// <summary>
		/// Current state of your IP
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.IpStateEnum&quot;,&quot;Description&quot;:&quot;Current state of your IP&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Vrack eligibility
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Vrack eligibility&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("vrackEligibility")]
		public bool VrackEligibility {
			get {
				return this.VrackEligibility_bfield;
			}
			set {
				this.VrackEligibility_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the vRack on which the current Load Balancer is attached to, as it is named on vRack product
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the vRack on which the current Load Balancer is attached to, as it is named on vRack product&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("vrackName")]
		public string VrackName {
			get {
				return this.VrackName_bfield;
			}
			set {
				this.VrackName_bfield = value;
			}
		}
		
		/// <summary>
		/// Location where your service is
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Location where your service is&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string[] Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// a list of {zone, nat Ip}
	/// </summary>
	public class IpLoadbalancingNatIps {
		
		private string[] Ip_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ip")]
		public string[] Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Available additional zone to order for a Load Balancer
	/// </summary>
	public class IpLoadbalancingOrderableZone {
		
		private string Name_bfield;
		
		private string PlanCode_bfield;
		
		/// <summary>
		/// The zone three letter code
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The zone three letter code&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// The billing planCode for this zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The billing planCode for this zone&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("planCode")]
		public string PlanCode {
			get {
				return this.PlanCode_bfield;
			}
			set {
				this.PlanCode_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The pending changes for a Load Balancer zone
	/// </summary>
	public class IpLoadbalancingPendingChanges {
		
		private long Number_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// The number of changes waiting to be applied
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The number of changes waiting to be applied&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("number")]
		public long Number {
			get {
				return this.Number_bfield;
			}
			set {
				this.Number_bfield = value;
			}
		}
		
		/// <summary>
		/// The Load Balancer zone with pending changes
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The Load Balancer zone with pending changes&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Quota informations for current billing period for this zone
	/// </summary>
	public class IpLoadbalancingQuotaQuota {
		
		private System.Nullable<long> Alert_bfield;
		
		private System.Nullable<long> Included_bfield;
		
		private System.Nullable<System.DateTime> LastUpdateDate_bfield;
		
		private System.Nullable<System.DateTime> ResetDate_bfield;
		
		private System.Nullable<long> Total_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Quota alert value in bytes. When reached, we will send you an alert. Default : included quota with your offer
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Quota alert value in bytes. When reached, we will send you an alert. Default : included quota with your offer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("alert")]
		public System.Nullable<long> Alert {
			get {
				return this.Alert_bfield;
			}
			set {
				this.Alert_bfield = value;
			}
		}
		
		/// <summary>
		/// Included quota value with your offer, in bytes
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Included quota value with your offer, in bytes&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("included")]
		public System.Nullable<long> Included {
			get {
				return this.Included_bfield;
			}
			set {
				this.Included_bfield = value;
			}
		}
		
		/// <summary>
		/// The last time your quota was updated from your Load Balancer instance
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;The last time your quota was updated from your Load Balancer instance&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.Nullable<System.DateTime> LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// The last time your quota was resetted (billed)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;The last time your quota was resetted (billed)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("resetDate")]
		public System.Nullable<System.DateTime> ResetDate {
			get {
				return this.ResetDate_bfield;
			}
			set {
				this.ResetDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Total used quota value in bytes
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Total used quota value in bytes&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("total")]
		public System.Nullable<long> Total {
			get {
				return this.Total_bfield;
			}
			set {
				this.Total_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of your quota
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of your quota&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// QuotaHistory
	/// </summary>
	public class IpLoadbalancingQuotaHistoryQuotaHistory {
		
		private string HistorizedDate_bfield;
		
		private long Id_bfield;
		
		private System.DateTime LastUpdateDate_bfield;
		
		private System.DateTime ResetDate_bfield;
		
		private long Total_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Historized date for this quota entry
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:&quot;Historized date for this quota entry&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("historizedDate")]
		public string HistorizedDate {
			get {
				return this.HistorizedDate_bfield;
			}
			set {
				this.HistorizedDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your quota
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your quota&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// The last time your quota was updated from your Load Balancer instance
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;The last time your quota was updated from your Load Balancer instance&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.DateTime LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// The last time your quota was resetted (billed)
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;The last time your quota was resetted (billed)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("resetDate")]
		public System.DateTime ResetDate {
			get {
				return this.ResetDate_bfield;
			}
			set {
				this.ResetDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Total used quota value in bytes
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Total used quota value in bytes&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("total")]
		public long Total {
			get {
				return this.Total_bfield;
			}
			set {
				this.Total_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of your quota
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of your quota&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Available route actions options
	/// </summary>
	public class IpLoadbalancingRouteAvailableAction {
		
		private string Destination_bfield;
		
		private string Name_bfield;
		
		private long[] Status_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Type of the destination for this action
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Type of the destination for this action&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("destination")]
		public string Destination {
			get {
				return this.Destination_bfield;
			}
			set {
				this.Destination_bfield = value;
			}
		}
		
		/// <summary>
		/// Action name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Action name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// List of available HTTP status code if applicable
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;List of available HTTP status code if applicable&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public long[] Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Protocol supported by this action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Protocol supported by this action&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Match rule to combine to build routes
	/// </summary>
	public class IpLoadbalancingRouteAvailableRule {
		
		private string[] Enum_bfield;
		
		private bool HasSubField_bfield;
		
		private string[] Matches_bfield;
		
		private string Name_bfield;
		
		private string Pattern_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// If pattern is &quot;enum&quot;, list of available options
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;If pattern is \&quot;enum\&quot;, list of available options&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("enum")]
		public string[] Enum {
			get {
				return this.Enum_bfield;
			}
			set {
				this.Enum_bfield = value;
			}
		}
		
		/// <summary>
		/// If true, this rule needs a subfield. Typically a cookie or header name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true, this rule needs a subfield. Typically a cookie or header name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hasSubField")]
		public bool HasSubField {
			get {
				return this.HasSubField_bfield;
			}
			set {
				this.HasSubField_bfield = value;
			}
		}
		
		/// <summary>
		/// List of match operators compatible with this rule
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;List of match operators compatible with this rule&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("matches")]
		public string[] Matches {
			get {
				return this.Matches_bfield;
			}
			set {
				this.Matches_bfield = value;
			}
		}
		
		/// <summary>
		/// Rule name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Rule name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Expected type for the pattern. Like &quot;enum&quot;, &quot;backend&quot;, &quot;cidr&quot;, ...
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Expected type for the pattern. Like \&quot;enum\&quot;, \&quot;backend\&quot;, \&quot;cidr\&quot;, ...&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("pattern")]
		public string Pattern {
			get {
				return this.Pattern_bfield;
			}
			set {
				this.Pattern_bfield = value;
			}
		}
		
		/// <summary>
		/// Protocol supported by this action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Protocol supported by this action&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// HTTP Route
	/// </summary>
	public class IpLoadbalancingRouteHttpRouteHttp {
		
		private IpLoadbalancingRouteHttpAction Action_bfield;
		
		private string DisplayName_bfield;
		
		private System.Nullable<long> FrontendId_bfield;
		
		private long RouteId_bfield;
		
		private string[] Rules_bfield;
		
		private string Status_bfield;
		
		private long Weight_bfield;
		
		/// <summary>
		/// Action triggered when all rules match
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.RouteHttpAction&quot;,&quot;Description&quot;:&quot;Action triggered when all rules match&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("action")]
		public IpLoadbalancingRouteHttpAction Action {
			get {
				return this.Action_bfield;
			}
			set {
				this.Action_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your route, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your route, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Route traffic for this frontend
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Route traffic for this frontend&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("frontendId")]
		public System.Nullable<long> FrontendId {
			get {
				return this.FrontendId_bfield;
			}
			set {
				this.FrontendId_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your route
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your route&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("routeId")]
		public long RouteId {
			get {
				return this.RouteId_bfield;
			}
			set {
				this.RouteId_bfield = value;
			}
		}
		
		/// <summary>
		/// List of rules to match to trigger action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.RouteRule[]&quot;,&quot;Description&quot;:&quot;List of rules to match to trigger action&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("rules")]
		public string[] Rules {
			get {
				return this.Rules_bfield;
			}
			set {
				this.Rules_bfield = value;
			}
		}
		
		/// <summary>
		/// Route status. Routes in &quot;ok&quot; state are ready to operate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.RouteStatusEnum&quot;,&quot;Description&quot;:&quot;Route status. Routes in \&quot;ok\&quot; state are ready to operate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("weight")]
		public long Weight {
			get {
				return this.Weight_bfield;
			}
			set {
				this.Weight_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Action triggered when all rules from route match
	/// </summary>
	public class IpLoadbalancingRouteHttpAction {
		
		private System.Nullable<long> Status_bfield;
		
		private string Target_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// HTTP status code for &quot;redirect&quot; and &quot;reject&quot; actions
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;HTTP status code for \&quot;redirect\&quot; and \&quot;reject\&quot; actions&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public System.Nullable<long> Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Farm ID for &quot;farm&quot; action type or URL template for &quot;redirect&quot; action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Farm ID for \&quot;farm\&quot; action type or URL template for \&quot;redirect\&quot; action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("target")]
		public string Target {
			get {
				return this.Target_bfield;
			}
			set {
				this.Target_bfield = value;
			}
		}
		
		/// <summary>
		/// Action to trigger if all the rules of this route matches
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Action to trigger if all the rules of this route matches&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Match rule to combine to build routes
	/// </summary>
	public class IpLoadbalancingRouteRule {
		
		private string Field_bfield;
		
		private string Match_bfield;
		
		private bool Negate_bfield;
		
		private string Pattern_bfield;
		
		private long RuleId_bfield;
		
		private string SubField_bfield;
		
		/// <summary>
		/// Name of the field to match like &quot;protocol&quot; or &quot;host&quot;. See &quot;/ipLoadbalancing/{serviceName}/route/availableRules&quot; for a list of available rules
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the field to match like \&quot;protocol\&quot; or \&quot;host\&quot;. See \&quot;/ipLoadbalancing/{serviceName}/route/availableRules\&quot; for a list of available rules&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("field")]
		public string Field {
			get {
				return this.Field_bfield;
			}
			set {
				this.Field_bfield = value;
			}
		}
		
		/// <summary>
		/// Matching operator. Not all operators are available for all fields. See &quot;/availableRules&quot;
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.RouteRuleMatchesEnum&quot;,&quot;Description&quot;:&quot;Matching operator. Not all operators are available for all fields. See \&quot;/availableRules\&quot;&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("match")]
		public string Match {
			get {
				return this.Match_bfield;
			}
			set {
				this.Match_bfield = value;
			}
		}
		
		/// <summary>
		/// Invert the matching operator effect
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Invert the matching operator effect&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("negate")]
		public bool Negate {
			get {
				return this.Negate_bfield;
			}
			set {
				this.Negate_bfield = value;
			}
		}
		
		/// <summary>
		/// Value to match against this match. Interpretation if this field depends on the match and field
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Value to match against this match. Interpretation if this field depends on the match and field&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("pattern")]
		public string Pattern {
			get {
				return this.Pattern_bfield;
			}
			set {
				this.Pattern_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your rule
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your rule&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ruleId")]
		public long RuleId {
			get {
				return this.RuleId_bfield;
			}
			set {
				this.RuleId_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of sub-field, if applicable. This may be a Cookie or Header name for instance&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("subField")]
		public string SubField {
			get {
				return this.SubField_bfield;
			}
			set {
				this.SubField_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Rule of a route
	/// </summary>
	public class IpLoadbalancingRouteRuleRouteRule {
		
		private string DisplayName_bfield;
		
		private string Field_bfield;
		
		private string Match_bfield;
		
		private bool Negate_bfield;
		
		private string Pattern_bfield;
		
		private long RuleId_bfield;
		
		private string SubField_bfield;
		
		/// <summary>
		/// Human readable name for your rule
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your rule&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the field to match like &quot;protocol&quot; or &quot;host&quot;. See &quot;/ipLoadbalancing/{serviceName}/availableRouteRules&quot; for a list of available rules
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the field to match like \&quot;protocol\&quot; or \&quot;host\&quot;. See \&quot;/ipLoadbalancing/{serviceName}/availableRouteRules\&quot; for a list of available rules&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("field")]
		public string Field {
			get {
				return this.Field_bfield;
			}
			set {
				this.Field_bfield = value;
			}
		}
		
		/// <summary>
		/// Matching operator. Not all operators are available for all fields. See &quot;/ipLoadbalancing/{serviceName}/availableRouteRules&quot;
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.RouteRuleMatchesEnum&quot;,&quot;Description&quot;:&quot;Matching operator. Not all operators are available for all fields. See \&quot;/ipLoadbalancing/{serviceName}/availableRouteRules\&quot;&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("match")]
		public string Match {
			get {
				return this.Match_bfield;
			}
			set {
				this.Match_bfield = value;
			}
		}
		
		/// <summary>
		/// Invert the matching operator effect
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Invert the matching operator effect&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("negate")]
		public bool Negate {
			get {
				return this.Negate_bfield;
			}
			set {
				this.Negate_bfield = value;
			}
		}
		
		/// <summary>
		/// Value to match against this match. Interpretation if this field depends on the match and field
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Value to match against this match. Interpretation if this field depends on the match and field&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("pattern")]
		public string Pattern {
			get {
				return this.Pattern_bfield;
			}
			set {
				this.Pattern_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your rule
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your rule&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ruleId")]
		public long RuleId {
			get {
				return this.RuleId_bfield;
			}
			set {
				this.RuleId_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of sub-field, if applicable. This may be a Cookie or Header name for instance&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("subField")]
		public string SubField {
			get {
				return this.SubField_bfield;
			}
			set {
				this.SubField_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// TCP Route
	/// </summary>
	public class IpLoadbalancingRouteTcpRouteTcp {
		
		private IpLoadbalancingRouteTcpAction Action_bfield;
		
		private string DisplayName_bfield;
		
		private System.Nullable<long> FrontendId_bfield;
		
		private long RouteId_bfield;
		
		private string[] Rules_bfield;
		
		private string Status_bfield;
		
		private long Weight_bfield;
		
		/// <summary>
		/// Action triggered when all rules match
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.RouteTcpAction&quot;,&quot;Description&quot;:&quot;Action triggered when all rules match&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("action")]
		public IpLoadbalancingRouteTcpAction Action {
			get {
				return this.Action_bfield;
			}
			set {
				this.Action_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your route, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your route, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Route traffic for this frontend
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Route traffic for this frontend&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("frontendId")]
		public System.Nullable<long> FrontendId {
			get {
				return this.FrontendId_bfield;
			}
			set {
				this.FrontendId_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your route
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your route&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("routeId")]
		public long RouteId {
			get {
				return this.RouteId_bfield;
			}
			set {
				this.RouteId_bfield = value;
			}
		}
		
		/// <summary>
		/// List of rules to match to trigger action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.RouteRule[]&quot;,&quot;Description&quot;:&quot;List of rules to match to trigger action&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("rules")]
		public string[] Rules {
			get {
				return this.Rules_bfield;
			}
			set {
				this.Rules_bfield = value;
			}
		}
		
		/// <summary>
		/// Route status. Routes in &quot;ok&quot; state are ready to operate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.RouteStatusEnum&quot;,&quot;Description&quot;:&quot;Route status. Routes in \&quot;ok\&quot; state are ready to operate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Route priority ([0..255]). 0 if null. Highest priority routes are evaluated last. Only the first matching route will trigger an action&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("weight")]
		public long Weight {
			get {
				return this.Weight_bfield;
			}
			set {
				this.Weight_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Action triggered when all rules from route match
	/// </summary>
	public class IpLoadbalancingRouteTcpAction {
		
		private string Target_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Farm ID for &quot;farm&quot; action type, empty for others
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Farm ID for \&quot;farm\&quot; action type, empty for others&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("target")]
		public string Target {
			get {
				return this.Target_bfield;
			}
			set {
				this.Target_bfield = value;
			}
		}
		
		/// <summary>
		/// Action to trigger if all the rules of this route matches
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Action to trigger if all the rules of this route matches&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Available servers states
	/// </summary>
	public class IpLoadbalancingServerState {
		
		private string CheckCode_bfield;
		
		private string CheckStatus_bfield;
		
		private System.Nullable<System.DateTime> CheckTime_bfield;
		
		private long InstanceId_bfield;
		
		private string LastCheckContent_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Layer5-7 code, if available
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Layer5-7 code, if available&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkCode")]
		public string CheckCode {
			get {
				return this.CheckCode_bfield;
			}
			set {
				this.CheckCode_bfield = value;
			}
		}
		
		/// <summary>
		/// Status of last health check
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Status of last health check&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkStatus")]
		public string CheckStatus {
			get {
				return this.CheckStatus_bfield;
			}
			set {
				this.CheckStatus_bfield = value;
			}
		}
		
		/// <summary>
		/// Time of last health check
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Time of last health check&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkTime")]
		public System.Nullable<System.DateTime> CheckTime {
			get {
				return this.CheckTime_bfield;
			}
			set {
				this.CheckTime_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your instance
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your instance&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("instanceId")]
		public long InstanceId {
			get {
				return this.InstanceId_bfield;
			}
			set {
				this.InstanceId_bfield = value;
			}
		}
		
		/// <summary>
		/// Last health check contents or textual error
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Last health check contents or textual error&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastCheckContent")]
		public string LastCheckContent {
			get {
				return this.LastCheckContent_bfield;
			}
			set {
				this.LastCheckContent_bfield = value;
			}
		}
		
		/// <summary>
		/// Status
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Status&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Ssl
	/// </summary>
	public class IpLoadbalancingSslSsl {
		
		private string DisplayName_bfield;
		
		private System.DateTime ExpireDate_bfield;
		
		private string Fingerprint_bfield;
		
		private long Id_bfield;
		
		private string[] San_bfield;
		
		private string Serial_bfield;
		
		private string Subject_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Human readable name for your ssl certificate, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your ssl certificate, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Expire date of your SSL certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Expire date of your SSL certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expireDate")]
		public System.DateTime ExpireDate {
			get {
				return this.ExpireDate_bfield;
			}
			set {
				this.ExpireDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Fingerprint of your SSL certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Fingerprint of your SSL certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("fingerprint")]
		public string Fingerprint {
			get {
				return this.Fingerprint_bfield;
			}
			set {
				this.Fingerprint_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your SSL certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your SSL certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Subject Alternative Name of your SSL certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Subject Alternative Name of your SSL certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("san")]
		public string[] San {
			get {
				return this.San_bfield;
			}
			set {
				this.San_bfield = value;
			}
		}
		
		/// <summary>
		/// Serial of your SSL certificate (Deprecated, use fingerprint instead !)
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Serial of your SSL certificate (Deprecated, use fingerprint instead !)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serial")]
		public string Serial {
			get {
				return this.Serial_bfield;
			}
			set {
				this.Serial_bfield = value;
			}
		}
		
		/// <summary>
		/// Subject of your SSL certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Subject of your SSL certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("subject")]
		public string Subject {
			get {
				return this.Subject_bfield;
			}
			set {
				this.Subject_bfield = value;
			}
		}
		
		/// <summary>
		/// Type of your SSL certificate.
		///'built' for SSL certificates managed by the IP Load Balancing. 'custom' for user manager certificates.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.SslTypeEnum&quot;,&quot;Description&quot;:&quot;Type of your SSL certificate.\n'built' for SSL certificates managed by the IP Load Balancing. 'custom' for user manager certificates.&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The global status of a Load Balancer
	/// </summary>
	public class IpLoadbalancingStatus {
		
		private IpLoadbalancingstatusComponent Farms_bfield;
		
		private IpLoadbalancingstatusComponent Frontends_bfield;
		
		private IpLoadbalancingstatusComponent Servers_bfield;
		
		private IpLoadbalancingstatusService Service_bfield;
		
		/// <summary>
		/// The Load Balancer farms status informations
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.status.Component&quot;,&quot;Description&quot;:&quot;The Load Balancer farms status informations&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("farms")]
		public IpLoadbalancingstatusComponent Farms {
			get {
				return this.Farms_bfield;
			}
			set {
				this.Farms_bfield = value;
			}
		}
		
		/// <summary>
		/// The Load Balancer frontends status informations
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.status.Component&quot;,&quot;Description&quot;:&quot;The Load Balancer frontends status informations&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("frontends")]
		public IpLoadbalancingstatusComponent Frontends {
			get {
				return this.Frontends_bfield;
			}
			set {
				this.Frontends_bfield = value;
			}
		}
		
		/// <summary>
		/// The Load Balancer servers status informations
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.status.Component&quot;,&quot;Description&quot;:&quot;The Load Balancer servers status informations&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("servers")]
		public IpLoadbalancingstatusComponent Servers {
			get {
				return this.Servers_bfield;
			}
			set {
				this.Servers_bfield = value;
			}
		}
		
		/// <summary>
		/// The Load Balancer service status informations
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.status.Service&quot;,&quot;Description&quot;:&quot;The Load Balancer service status informations&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("service")]
		public IpLoadbalancingstatusService Service {
			get {
				return this.Service_bfield;
			}
			set {
				this.Service_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// IP Load Balancing Operations
	/// </summary>
	public class IpLoadbalancingTaskTask {
		
		private string Action_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private System.Nullable<System.DateTime> DoneDate_bfield;
		
		private long Id_bfield;
		
		private long Progress_bfield;
		
		private string Status_bfield;
		
		private string[] Zones_bfield;
		
		/// <summary>
		/// Operation type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.TaskActionEnum&quot;,&quot;Description&quot;:&quot;Operation type&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("action")]
		public string Action {
			get {
				return this.Action_bfield;
			}
			set {
				this.Action_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date of your operation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date of your operation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Done date of your operation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Done date of your operation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("doneDate")]
		public System.Nullable<System.DateTime> DoneDate {
			get {
				return this.DoneDate_bfield;
			}
			set {
				this.DoneDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of the operation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the operation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Operation progress percentage
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Operation progress percentage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("progress")]
		public long Progress {
			get {
				return this.Progress_bfield;
			}
			set {
				this.Progress_bfield = value;
			}
		}
		
		/// <summary>
		/// Current status of your operation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;Current status of your operation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of your Load Balancer which are updated by current Task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Zone of your Load Balancer which are updated by current Task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zones")]
		public string[] Zones {
			get {
				return this.Zones_bfield;
			}
			set {
				this.Zones_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Information about vRack for your Load Balancer
	/// </summary>
	public class IpLoadbalancingVrackInformation {
		
		private string State_bfield;
		
		private long[] Task_bfield;
		
		private string VrackName_bfield;
		
		/// <summary>
		/// State of the vRack link to your Load Balancer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.VrackStateEnum&quot;,&quot;Description&quot;:&quot;State of the vRack link to your Load Balancer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Ongoing task related to vRack installation or uninstallation on your Load Balancer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;Ongoing task related to vRack installation or uninstallation on your Load Balancer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("task")]
		public long[] Task {
			get {
				return this.Task_bfield;
			}
			set {
				this.Task_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the vRack on which the current Load Balancer is attached to, as it is named on vRack product
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the vRack on which the current Load Balancer is attached to, as it is named on vRack product&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vrackName")]
		public string VrackName {
			get {
				return this.VrackName_bfield;
			}
			set {
				this.VrackName_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Represents a private network in the vRack
	/// </summary>
	public class IpLoadbalancingVrackNetworkVrackNetwork {
		
		private string DisplayName_bfield;
		
		private string[] FarmId_bfield;
		
		private string NatIp_bfield;
		
		private string Subnet_bfield;
		
		private long Vlan_bfield;
		
		private long VrackNetworkId_bfield;
		
		/// <summary>
		/// Human readable name for your vrack network
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your vrack network&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Farm Id your vrack network is attached to and their type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.DefinedFarm[]&quot;,&quot;Description&quot;:&quot;Farm Id your vrack network is attached to and their type&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("farmId")]
		public string[] FarmId {
			get {
				return this.FarmId_bfield;
			}
			set {
				this.FarmId_bfield = value;
			}
		}
		
		/// <summary>
		/// An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The block must be in the private network and reserved for the Load Balancer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipBlock&quot;,&quot;Description&quot;:&quot;An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The block must be in the private network and reserved for the Load Balancer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("natIp")]
		public string NatIp {
			get {
				return this.NatIp_bfield;
			}
			set {
				this.NatIp_bfield = value;
			}
		}
		
		/// <summary>
		/// IP block of the private network in the vRack
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipBlock&quot;,&quot;Description&quot;:&quot;IP block of the private network in the vRack&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("subnet")]
		public string Subnet {
			get {
				return this.Subnet_bfield;
			}
			set {
				this.Subnet_bfield = value;
			}
		}
		
		/// <summary>
		/// VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;VLAN of the private network in the vRack. 0 if the private network is not in a VLAN&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vlan")]
		public long Vlan {
			get {
				return this.Vlan_bfield;
			}
			set {
				this.Vlan_bfield = value;
			}
		}
		
		/// <summary>
		/// Internal Load Balancer identifier of the vRack private network description
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Internal Load Balancer identifier of the vRack private network description&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("vrackNetworkId")]
		public long VrackNetworkId {
			get {
				return this.VrackNetworkId_bfield;
			}
			set {
				this.VrackNetworkId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Rules to create a new description of a private network in the vRack
	/// </summary>
	public class IpLoadbalancingVrackNetworkCreationRules {
		
		private long MinNatIps_bfield;
		
		private long RemainingNetworks_bfield;
		
		private string VrackName_bfield;
		
		/// <summary>
		/// Minimum number of IPs needed to forward requests to your servers using NAT in your private network behind the current Load Balancer. Ip Block given on Load Balancer vRack network must contain at least this number of IP.
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Minimum number of IPs needed to forward requests to your servers using NAT in your private network behind the current Load Balancer. Ip Block given on Load Balancer vRack network must contain at least this number of IP.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("minNatIps")]
		public long MinNatIps {
			get {
				return this.MinNatIps_bfield;
			}
			set {
				this.MinNatIps_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of remaining private network descriptions available for creation for this Load Balancer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Number of remaining private network descriptions available for creation for this Load Balancer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("remainingNetworks")]
		public long RemainingNetworks {
			get {
				return this.RemainingNetworks_bfield;
			}
			set {
				this.RemainingNetworks_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the vRack on which the current Load Balancer is attached to, as it is named on vRack product
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the vRack on which the current Load Balancer is attached to, as it is named on vRack product&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vrackName")]
		public string VrackName {
			get {
				return this.VrackName_bfield;
			}
			set {
				this.VrackName_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Aims to help you configure needed transparent interfaces
	/// </summary>
	public class IpLoadbalancingVrackTransparentGateways {
		
		private string Address_bfield;
		
		private string Gateway_bfield;
		
		private long Vlan_bfield;
		
		/// <summary>
		/// address
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;address&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("address")]
		public string Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// gateway
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;gateway&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("gateway")]
		public string Gateway {
			get {
				return this.Gateway_bfield;
			}
			set {
				this.Gateway_bfield = value;
			}
		}
		
		/// <summary>
		/// vlan
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;vlan&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vlan")]
		public long Vlan {
			get {
				return this.Vlan_bfield;
			}
			set {
				this.Vlan_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Server's vrack transparent ip
	/// </summary>
	public class IpLoadbalancingVrackTransparentIpVrackTransparentIp {
		
		private string Address_bfield;
		
		private long FarmId_bfield;
		
		private long Id_bfield;
		
		private long ServerId_bfield;
		
		private long SlotId_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("address")]
		public string Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("farmId")]
		public long FarmId {
			get {
				return this.FarmId_bfield;
			}
			set {
				this.FarmId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serverId")]
		public long ServerId {
			get {
				return this.ServerId_bfield;
			}
			set {
				this.ServerId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("slotId")]
		public long SlotId {
			get {
				return this.SlotId_bfield;
			}
			set {
				this.SlotId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// IP Load Balancing Zone
	/// </summary>
	public class IpLoadbalancingZoneZone {
		
		private string Name_bfield;
		
		private string State_bfield;
		
		/// <summary>
		/// Name of your zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of your zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// State of your zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;State of your zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// HTTP Farm
	/// </summary>
	public class IpLoadbalancingbackendHttpBackendHttp {
		
		private string Balance_bfield;
		
		private string DisplayName_bfield;
		
		private long FarmId_bfield;
		
		private System.Nullable<long> Port_bfield;
		
		private IpLoadbalancingBackendProbe Probe_bfield;
		
		private string Stickiness_bfield;
		
		private System.Nullable<long> VrackNetworkId_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Load balancing algorithm. 'roundrobin' if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.BalanceHTTPEnum&quot;,&quot;Description&quot;:&quot;Load balancing algorithm. 'roundrobin' if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("balance")]
		public string Balance {
			get {
				return this.Balance_bfield;
			}
			set {
				this.Balance_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your backend, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your backend, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your farm
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your farm&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("farmId")]
		public long FarmId {
			get {
				return this.FarmId_bfield;
			}
			set {
				this.FarmId_bfield = value;
			}
		}
		
		/// <summary>
		/// Port attached to your farm. Inherited from frontend if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port attached to your farm. Inherited from frontend if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public System.Nullable<long> Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Probe used to determine if a backend is alive and can handle requests. Defaults to tcp on the same port as the farm
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.BackendProbe&quot;,&quot;Description&quot;:&quot;Probe used to determine if a backend is alive and can handle requests. Defaults to tcp on the same port as the farm&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("probe")]
		public IpLoadbalancingBackendProbe Probe {
			get {
				return this.Probe_bfield;
			}
			set {
				this.Probe_bfield = value;
			}
		}
		
		/// <summary>
		/// Stickiness type. No stickiness if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.StickinessHTTPEnum&quot;,&quot;Description&quot;:&quot;Stickiness type. No stickiness if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("stickiness")]
		public string Stickiness {
			get {
				return this.Stickiness_bfield;
			}
			set {
				this.Stickiness_bfield = value;
			}
		}
		
		/// <summary>
		/// Internal Load Balancer identifier of the vRack private network attached to your farm, mandatory when your Load Balancer is attached to a vRack
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Internal Load Balancer identifier of the vRack private network attached to your farm, mandatory when your Load Balancer is attached to a vRack&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vrackNetworkId")]
		public System.Nullable<long> VrackNetworkId {
			get {
				return this.VrackNetworkId_bfield;
			}
			set {
				this.VrackNetworkId_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of you farm
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of you farm&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// HTTP Farm's Server
	/// </summary>
	public class IpLoadbalancingbackendHttpCustomerServerBackendHTTPServer {
		
		private string Address_bfield;
		
		private long BackendId_bfield;
		
		private bool Backup_bfield;
		
		private string Chain_bfield;
		
		private string Cookie_bfield;
		
		private string DisplayName_bfield;
		
		private System.Nullable<long> Port_bfield;
		
		private bool Probe_bfield;
		
		private string ProxyProtocolVersion_bfield;
		
		private long ServerId_bfield;
		
		private string[] ServerState_bfield;
		
		private bool Ssl_bfield;
		
		private string Status_bfield;
		
		private System.Nullable<long> Weight_bfield;
		
		/// <summary>
		/// Address of your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;Address of your server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("address")]
		public string Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// farm id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;farm id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("backendId")]
		public long BackendId {
			get {
				return this.BackendId_bfield;
			}
			set {
				this.BackendId_bfield = value;
			}
		}
		
		/// <summary>
		/// Backup state. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Backup state. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("backup")]
		public bool Backup {
			get {
				return this.Backup_bfield;
			}
			set {
				this.Backup_bfield = value;
			}
		}
		
		/// <summary>
		/// Certificate chain. Allow server certificate verification (Avoid man-in-the-middle attacks)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;Certificate chain. Allow server certificate verification (Avoid man-in-the-middle attacks)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("chain")]
		public string Chain {
			get {
				return this.Chain_bfield;
			}
			set {
				this.Chain_bfield = value;
			}
		}
		
		/// <summary>
		/// Server cookie value configured for cookie stickiness
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Server cookie value configured for cookie stickiness&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("cookie")]
		public string Cookie {
			get {
				return this.Cookie_bfield;
			}
			set {
				this.Cookie_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your server, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your server, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Port attached to your server. Inherited from farm if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port attached to your server. Inherited from farm if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public System.Nullable<long> Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Probe state. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Probe state. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("probe")]
		public bool Probe {
			get {
				return this.Probe_bfield;
			}
			set {
				this.Probe_bfield = value;
			}
		}
		
		/// <summary>
		/// Disabled if null. Send PROXY protocol header. Requires a compatible server.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.ProxyProtocolVersionEnum&quot;,&quot;Description&quot;:&quot;Disabled if null. Send PROXY protocol header. Requires a compatible server.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("proxyProtocolVersion")]
		public string ProxyProtocolVersion {
			get {
				return this.ProxyProtocolVersion_bfield;
			}
			set {
				this.ProxyProtocolVersion_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serverId")]
		public long ServerId {
			get {
				return this.ServerId_bfield;
			}
			set {
				this.ServerId_bfield = value;
			}
		}
		
		/// <summary>
		/// Server state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.ServerState[]&quot;,&quot;Description&quot;:&quot;Server state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serverState")]
		public string[] ServerState {
			get {
				return this.ServerState_bfield;
			}
			set {
				this.ServerState_bfield = value;
			}
		}
		
		/// <summary>
		/// SSL ciphering. Probes will also be sent ciphered. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;SSL ciphering. Probes will also be sent ciphered. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ssl")]
		public bool Ssl {
			get {
				return this.Ssl_bfield;
			}
			set {
				this.Ssl_bfield = value;
			}
		}
		
		/// <summary>
		/// Status attached to your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.BackendCustomerServerStatusEnum&quot;,&quot;Description&quot;:&quot;Status attached to your server&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Weight value. Defaults to 1. 0 if not used in load balancing. Servers with higher weight get more requests.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Weight value. Defaults to 1. 0 if not used in load balancing. Servers with higher weight get more requests.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("weight")]
		public System.Nullable<long> Weight {
			get {
				return this.Weight_bfield;
			}
			set {
				this.Weight_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// TCP Farm
	/// </summary>
	public class IpLoadbalancingbackendTcpBackendTcp {
		
		private string Balance_bfield;
		
		private string DisplayName_bfield;
		
		private long FarmId_bfield;
		
		private System.Nullable<long> Port_bfield;
		
		private IpLoadbalancingBackendProbe Probe_bfield;
		
		private string Stickiness_bfield;
		
		private System.Nullable<long> VrackNetworkId_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Load balancing algorithm. 'roundrobin' if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.BalanceTCPEnum&quot;,&quot;Description&quot;:&quot;Load balancing algorithm. 'roundrobin' if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("balance")]
		public string Balance {
			get {
				return this.Balance_bfield;
			}
			set {
				this.Balance_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your backend, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your backend, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your farm
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your farm&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("farmId")]
		public long FarmId {
			get {
				return this.FarmId_bfield;
			}
			set {
				this.FarmId_bfield = value;
			}
		}
		
		/// <summary>
		/// Port attached to your farm. Inherited from frontend if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port attached to your farm. Inherited from frontend if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public System.Nullable<long> Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Probe used to determine if a backend is alive and can handle requests. Defaults to tcp on the same port as the farm
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.BackendProbe&quot;,&quot;Description&quot;:&quot;Probe used to determine if a backend is alive and can handle requests. Defaults to tcp on the same port as the farm&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("probe")]
		public IpLoadbalancingBackendProbe Probe {
			get {
				return this.Probe_bfield;
			}
			set {
				this.Probe_bfield = value;
			}
		}
		
		/// <summary>
		/// Stickiness type. No stickiness if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.StickinessTCPEnum&quot;,&quot;Description&quot;:&quot;Stickiness type. No stickiness if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("stickiness")]
		public string Stickiness {
			get {
				return this.Stickiness_bfield;
			}
			set {
				this.Stickiness_bfield = value;
			}
		}
		
		/// <summary>
		/// Internal Load Balancer identifier of the vRack private network attached to your farm, mandatory when your Load Balancer is attached to a vRack
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Internal Load Balancer identifier of the vRack private network attached to your farm, mandatory when your Load Balancer is attached to a vRack&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vrackNetworkId")]
		public System.Nullable<long> VrackNetworkId {
			get {
				return this.VrackNetworkId_bfield;
			}
			set {
				this.VrackNetworkId_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of you farm
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of you farm&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// TCP Farm's Server
	/// </summary>
	public class IpLoadbalancingbackendTcpCustomerServerBackendTCPServer {
		
		private string Address_bfield;
		
		private long BackendId_bfield;
		
		private bool Backup_bfield;
		
		private string Chain_bfield;
		
		private string DisplayName_bfield;
		
		private System.Nullable<long> Port_bfield;
		
		private bool Probe_bfield;
		
		private string ProxyProtocolVersion_bfield;
		
		private long ServerId_bfield;
		
		private string[] ServerState_bfield;
		
		private bool Ssl_bfield;
		
		private string Status_bfield;
		
		private System.Nullable<long> Weight_bfield;
		
		/// <summary>
		/// Address of your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;Address of your server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("address")]
		public string Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// Farm id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Farm id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("backendId")]
		public long BackendId {
			get {
				return this.BackendId_bfield;
			}
			set {
				this.BackendId_bfield = value;
			}
		}
		
		/// <summary>
		/// Backup state. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Backup state. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("backup")]
		public bool Backup {
			get {
				return this.Backup_bfield;
			}
			set {
				this.Backup_bfield = value;
			}
		}
		
		/// <summary>
		/// Certificate chain. Allow server certificate verification (Avoid man-in-the-middle attacks)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;Certificate chain. Allow server certificate verification (Avoid man-in-the-middle attacks)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("chain")]
		public string Chain {
			get {
				return this.Chain_bfield;
			}
			set {
				this.Chain_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your server, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your server, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Port attached to your server. Inherited from farm if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port attached to your server. Inherited from farm if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public System.Nullable<long> Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Probe state. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Probe state. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("probe")]
		public bool Probe {
			get {
				return this.Probe_bfield;
			}
			set {
				this.Probe_bfield = value;
			}
		}
		
		/// <summary>
		/// Disabled if null. Send PROXY protocol header. Requires a compatible server.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipLoadbalancing.ProxyProtocolVersionEnum&quot;,&quot;Description&quot;:&quot;Disabled if null. Send PROXY protocol header. Requires a compatible server.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("proxyProtocolVersion")]
		public string ProxyProtocolVersion {
			get {
				return this.ProxyProtocolVersion_bfield;
			}
			set {
				this.ProxyProtocolVersion_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serverId")]
		public long ServerId {
			get {
				return this.ServerId_bfield;
			}
			set {
				this.ServerId_bfield = value;
			}
		}
		
		/// <summary>
		/// Server state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.ServerState[]&quot;,&quot;Description&quot;:&quot;Server state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serverState")]
		public string[] ServerState {
			get {
				return this.ServerState_bfield;
			}
			set {
				this.ServerState_bfield = value;
			}
		}
		
		/// <summary>
		/// SSL ciphering. Probes will also be sent ciphered
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;SSL ciphering. Probes will also be sent ciphered&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ssl")]
		public bool Ssl {
			get {
				return this.Ssl_bfield;
			}
			set {
				this.Ssl_bfield = value;
			}
		}
		
		/// <summary>
		/// Status attached to your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.BackendCustomerServerStatusEnum&quot;,&quot;Description&quot;:&quot;Status attached to your server&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Weight value. Defaults to 1. 0 if not used in load balancing. Servers with higher weight get more requests.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Weight value. Defaults to 1. 0 if not used in load balancing. Servers with higher weight get more requests.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("weight")]
		public System.Nullable<long> Weight {
			get {
				return this.Weight_bfield;
			}
			set {
				this.Weight_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// UDP Farm
	/// </summary>
	public class IpLoadbalancingbackendUdpBackendUdp {
		
		private string DisplayName_bfield;
		
		private long FarmId_bfield;
		
		private long Port_bfield;
		
		private System.Nullable<long> VrackNetworkId_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Human readable name for your backend, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your backend, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your farm
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your farm&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("farmId")]
		public long FarmId {
			get {
				return this.FarmId_bfield;
			}
			set {
				this.FarmId_bfield = value;
			}
		}
		
		/// <summary>
		/// Port attached to your farm. Inherited from frontend if null
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port attached to your farm. Inherited from frontend if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public long Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Internal Load Balancer identifier of the vRack private network attached to your farm, mandatory when your Load Balancer is attached to a vRack
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Internal Load Balancer identifier of the vRack private network attached to your farm, mandatory when your Load Balancer is attached to a vRack&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vrackNetworkId")]
		public System.Nullable<long> VrackNetworkId {
			get {
				return this.VrackNetworkId_bfield;
			}
			set {
				this.VrackNetworkId_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of you farm
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of you farm&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// UDP Farm's Server
	/// </summary>
	public class IpLoadbalancingbackendUdpCustomerServerBackendUDPServer {
		
		private string Address_bfield;
		
		private long BackendId_bfield;
		
		private string DisplayName_bfield;
		
		private System.Nullable<long> Port_bfield;
		
		private long ServerId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Address of your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;Address of your server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("address")]
		public string Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// farm id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;farm id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("backendId")]
		public long BackendId {
			get {
				return this.BackendId_bfield;
			}
			set {
				this.BackendId_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your server, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your server, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Port attached to your server. Inherited from farm if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port attached to your server. Inherited from farm if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public System.Nullable<long> Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serverId")]
		public long ServerId {
			get {
				return this.ServerId_bfield;
			}
			set {
				this.ServerId_bfield = value;
			}
		}
		
		/// <summary>
		/// Status attached to your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.BackendCustomerServerStatusEnum&quot;,&quot;Description&quot;:&quot;Status attached to your server&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Frontend HTTP
	/// </summary>
	public class IpLoadbalancingfrontendHttpFrontendHttp {
		
		private string[] AllowedSource_bfield;
		
		private string[] DedicatedIpfo_bfield;
		
		private System.Nullable<long> DefaultFarmId_bfield;
		
		private System.Nullable<long> DefaultSslId_bfield;
		
		private string[] DeniedSource_bfield;
		
		private bool Disabled_bfield;
		
		private string DisplayName_bfield;
		
		private long FrontendId_bfield;
		
		private bool Hsts_bfield;
		
		private string[] HttpHeader_bfield;
		
		private string Port_bfield;
		
		private string RedirectLocation_bfield;
		
		private bool Ssl_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Restrict IP Load Balancing access to these ip block. No restriction if null. You cannot specify allowedSource and deniedSource both at the same time
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:&quot;Restrict IP Load Balancing access to these ip block. No restriction if null. You cannot specify allowedSource and deniedSource both at the same time&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("allowedSource")]
		public string[] AllowedSource {
			get {
				return this.AllowedSource_bfield;
			}
			set {
				this.AllowedSource_bfield = value;
			}
		}
		
		/// <summary>
		/// Only attach frontend on these ip. No restriction if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:&quot;Only attach frontend on these ip. No restriction if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("dedicatedIpfo")]
		public string[] DedicatedIpfo {
			get {
				return this.DedicatedIpfo_bfield;
			}
			set {
				this.DedicatedIpfo_bfield = value;
			}
		}
		
		/// <summary>
		/// Default HTTP Farm of your frontend
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Default HTTP Farm of your frontend&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("defaultFarmId")]
		public System.Nullable<long> DefaultFarmId {
			get {
				return this.DefaultFarmId_bfield;
			}
			set {
				this.DefaultFarmId_bfield = value;
			}
		}
		
		/// <summary>
		/// Default ssl served to your customer
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Default ssl served to your customer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("defaultSslId")]
		public System.Nullable<long> DefaultSslId {
			get {
				return this.DefaultSslId_bfield;
			}
			set {
				this.DefaultSslId_bfield = value;
			}
		}
		
		/// <summary>
		/// Deny IP Load Balancing access to these ip block. No restriction if null. You cannot specify allowedSource and deniedSource both at the same time
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:&quot;Deny IP Load Balancing access to these ip block. No restriction if null. You cannot specify allowedSource and deniedSource both at the same time&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deniedSource")]
		public string[] DeniedSource {
			get {
				return this.DeniedSource_bfield;
			}
			set {
				this.DeniedSource_bfield = value;
			}
		}
		
		/// <summary>
		/// Disable frontend. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Disable frontend. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("disabled")]
		public bool Disabled {
			get {
				return this.Disabled_bfield;
			}
			set {
				this.Disabled_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your frontend, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your frontend, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your frontend
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your frontend&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("frontendId")]
		public long FrontendId {
			get {
				return this.FrontendId_bfield;
			}
			set {
				this.FrontendId_bfield = value;
			}
		}
		
		/// <summary>
		/// HTTP Strict Transport Security. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;HTTP Strict Transport Security. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hsts")]
		public bool Hsts {
			get {
				return this.Hsts_bfield;
			}
			set {
				this.Hsts_bfield = value;
			}
		}
		
		/// <summary>
		/// Add header to your frontend. Useful variables admitted : %ci &lt;=&gt; client_ip, %cp &lt;=&gt; client_port
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Add header to your frontend. Useful variables admitted : %ci &lt;=&gt; client_ip, %cp &lt;=&gt; client_port&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("httpHeader")]
		public string[] HttpHeader {
			get {
				return this.HttpHeader_bfield;
			}
			set {
				this.HttpHeader_bfield = value;
			}
		}
		
		/// <summary>
		/// Listening port(s) on the server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Listening port(s) on the server&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public string Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// HTTP redirection (Ex : http://www.ovh.com)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;HTTP redirection (Ex : http://www.ovh.com)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("redirectLocation")]
		public string RedirectLocation {
			get {
				return this.RedirectLocation_bfield;
			}
			set {
				this.RedirectLocation_bfield = value;
			}
		}
		
		/// <summary>
		/// SSL deciphering. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;SSL deciphering. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ssl")]
		public bool Ssl {
			get {
				return this.Ssl_bfield;
			}
			set {
				this.Ssl_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of you frontend
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of you frontend&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Frontend TCP
	/// </summary>
	public class IpLoadbalancingfrontendTcpFrontendTcp {
		
		private string[] AllowedSource_bfield;
		
		private string[] DedicatedIpfo_bfield;
		
		private System.Nullable<long> DefaultFarmId_bfield;
		
		private System.Nullable<long> DefaultSslId_bfield;
		
		private string[] DeniedSource_bfield;
		
		private bool Disabled_bfield;
		
		private string DisplayName_bfield;
		
		private long FrontendId_bfield;
		
		private string Port_bfield;
		
		private bool Ssl_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Restrict IP Load Balancing access to these ip block. No restriction if null. You cannot specify allowedSource and deniedSource both at the same time
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:&quot;Restrict IP Load Balancing access to these ip block. No restriction if null. You cannot specify allowedSource and deniedSource both at the same time&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("allowedSource")]
		public string[] AllowedSource {
			get {
				return this.AllowedSource_bfield;
			}
			set {
				this.AllowedSource_bfield = value;
			}
		}
		
		/// <summary>
		/// Only attach frontend on these ip. No restriction if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:&quot;Only attach frontend on these ip. No restriction if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("dedicatedIpfo")]
		public string[] DedicatedIpfo {
			get {
				return this.DedicatedIpfo_bfield;
			}
			set {
				this.DedicatedIpfo_bfield = value;
			}
		}
		
		/// <summary>
		/// Default TCP Farm of your frontend
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Default TCP Farm of your frontend&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("defaultFarmId")]
		public System.Nullable<long> DefaultFarmId {
			get {
				return this.DefaultFarmId_bfield;
			}
			set {
				this.DefaultFarmId_bfield = value;
			}
		}
		
		/// <summary>
		/// Default ssl served to your customer
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Default ssl served to your customer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("defaultSslId")]
		public System.Nullable<long> DefaultSslId {
			get {
				return this.DefaultSslId_bfield;
			}
			set {
				this.DefaultSslId_bfield = value;
			}
		}
		
		/// <summary>
		/// Deny IP Load Balancing access to these ip block. No restriction if null. You cannot specify allowedSource and deniedSource both at the same time
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:&quot;Deny IP Load Balancing access to these ip block. No restriction if null. You cannot specify allowedSource and deniedSource both at the same time&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deniedSource")]
		public string[] DeniedSource {
			get {
				return this.DeniedSource_bfield;
			}
			set {
				this.DeniedSource_bfield = value;
			}
		}
		
		/// <summary>
		/// Disable frontend. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Disable frontend. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("disabled")]
		public bool Disabled {
			get {
				return this.Disabled_bfield;
			}
			set {
				this.Disabled_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your frontend, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your frontend, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your frontend
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your frontend&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("frontendId")]
		public long FrontendId {
			get {
				return this.FrontendId_bfield;
			}
			set {
				this.FrontendId_bfield = value;
			}
		}
		
		/// <summary>
		/// Listening port(s) on the server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Listening port(s) on the server&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public string Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// SSL deciphering. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;SSL deciphering. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ssl")]
		public bool Ssl {
			get {
				return this.Ssl_bfield;
			}
			set {
				this.Ssl_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of you frontend
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of you frontend&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Frontend UDP
	/// </summary>
	public class IpLoadbalancingfrontendUdpFrontendUdp {
		
		private string[] DedicatedIpfo_bfield;
		
		private System.Nullable<long> DefaultFarmId_bfield;
		
		private bool Disabled_bfield;
		
		private string DisplayName_bfield;
		
		private long FrontendId_bfield;
		
		private string Port_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Only attach frontend on these ip. No restriction if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:&quot;Only attach frontend on these ip. No restriction if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("dedicatedIpfo")]
		public string[] DedicatedIpfo {
			get {
				return this.DedicatedIpfo_bfield;
			}
			set {
				this.DedicatedIpfo_bfield = value;
			}
		}
		
		/// <summary>
		/// Default UDP Farm of your frontend
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Default UDP Farm of your frontend&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("defaultFarmId")]
		public System.Nullable<long> DefaultFarmId {
			get {
				return this.DefaultFarmId_bfield;
			}
			set {
				this.DefaultFarmId_bfield = value;
			}
		}
		
		/// <summary>
		/// Disable frontend. Default: 'false'
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Disable frontend. Default: 'false'&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("disabled")]
		public bool Disabled {
			get {
				return this.Disabled_bfield;
			}
			set {
				this.Disabled_bfield = value;
			}
		}
		
		/// <summary>
		/// Human readable name for your frontend, this field is for you
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Human readable name for your frontend, this field is for you&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your frontend
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your frontend&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("frontendId")]
		public long FrontendId {
			get {
				return this.FrontendId_bfield;
			}
			set {
				this.FrontendId_bfield = value;
			}
		}
		
		/// <summary>
		/// Listening port(s) on the server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Listening port(s) on the server&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public string Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of you frontend
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of you frontend&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The global status of a Load Balancer component
	/// </summary>
	public class IpLoadbalancingstatusComponent {
		
		private IpLoadbalancingstatusComponentStatus Status_bfield;
		
		private long Total_bfield;
		
		/// <summary>
		/// The global status of your Load Balancer component
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.status.ComponentStatus&quot;,&quot;Description&quot;:&quot;The global status of your Load Balancer component&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public IpLoadbalancingstatusComponentStatus Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// The Load Balancer total component count
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The Load Balancer total component count&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("total")]
		public long Total {
			get {
				return this.Total_bfield;
			}
			set {
				this.Total_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The statuses of a Load Balancer component
	/// </summary>
	public class IpLoadbalancingstatusComponentStatus {
		
		private long Error_bfield;
		
		private long Ok_bfield;
		
		private long Unknown_bfield;
		
		private long Warn_bfield;
		
		/// <summary>
		/// The number of component with status error
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The number of component with status error&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("error")]
		public long Error {
			get {
				return this.Error_bfield;
			}
			set {
				this.Error_bfield = value;
			}
		}
		
		/// <summary>
		/// The number of component with status ok
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The number of component with status ok&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ok")]
		public long Ok {
			get {
				return this.Ok_bfield;
			}
			set {
				this.Ok_bfield = value;
			}
		}
		
		/// <summary>
		/// The number of component with status unknown
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The number of component with status unknown&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("unknown")]
		public long Unknown {
			get {
				return this.Unknown_bfield;
			}
			set {
				this.Unknown_bfield = value;
			}
		}
		
		/// <summary>
		/// The number of component with status warn
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The number of component with status warn&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("warn")]
		public long Warn {
			get {
				return this.Warn_bfield;
			}
			set {
				this.Warn_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The status of a Load Balancer service
	/// </summary>
	public class IpLoadbalancingstatusService {
		
		private string Status_bfield;
		
		/// <summary>
		/// The status of your Load Balancer billing domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipLoadbalancing.status.Enum&quot;,&quot;Description&quot;:&quot;The status of your Load Balancer billing domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
