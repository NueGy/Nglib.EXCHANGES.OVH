//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/dedicated/nas"  string[]--
//[GET] "/dedicated/nas/{serviceName}"  dedicated.nas.Nas--serviceName
//[PUT] "/dedicated/nas/{serviceName}"  void--,serviceName
//[GET] "/dedicated/nas/{serviceName}/partition"  string[]--serviceName
//[POST] "/dedicated/nas/{serviceName}/partition"  dedicated.nasTask.Task--partitionName,protocol,serviceName,size
//[DELETE] "/dedicated/nas/{serviceName}/partition/{partitionName}"  dedicated.nasTask.Task--partitionName,serviceName
//[GET] "/dedicated/nas/{serviceName}/partition/{partitionName}"  dedicated.nas.Partition--partitionName,serviceName
//[PUT] "/dedicated/nas/{serviceName}/partition/{partitionName}"  void--,partitionName,serviceName
//[GET] "/dedicated/nas/{serviceName}/partition/{partitionName}/access"  ipBlock[]--partitionName,serviceName
//[POST] "/dedicated/nas/{serviceName}/partition/{partitionName}/access"  dedicated.nasTask.Task--ip,partitionName,serviceName
//[DELETE] "/dedicated/nas/{serviceName}/partition/{partitionName}/access/{ip}"  dedicated.nasTask.Task--ip,partitionName,serviceName
//[GET] "/dedicated/nas/{serviceName}/partition/{partitionName}/access/{ip}"  dedicated.nas.Access--ip,partitionName,serviceName
//[GET] "/dedicated/nas/{serviceName}/partition/{partitionName}/authorizableIps"  ip[]--partitionName,serviceName
//[GET] "/dedicated/nas/{serviceName}/partition/{partitionName}/quota"  long[]--partitionName,serviceName
//[POST] "/dedicated/nas/{serviceName}/partition/{partitionName}/quota"  dedicated.nasTask.Task--partitionName,serviceName,size,uid
//[DELETE] "/dedicated/nas/{serviceName}/partition/{partitionName}/quota/{uid}"  dedicated.nasTask.Task--partitionName,serviceName,uid
//[GET] "/dedicated/nas/{serviceName}/partition/{partitionName}/quota/{uid}"  dedicated.nas.Quota--partitionName,serviceName,uid
//[GET] "/dedicated/nas/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/dedicated/nas/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/dedicated/nas/{serviceName}/task"  long[]--operation,serviceName,status
//[GET] "/dedicated/nas/{serviceName}/task/{taskId}"  dedicated.nasTask.Task--serviceName,taskId
namespace Nglib.VENDORS.OVH.DEDICATEDNAS {
	
	
	/// <summary>
	/// different task status
	/// </summary>
	public enum DedicatedTaskStatusEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="customerError")]
		CustomerError,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="init")]
		Init,
		
		[EnumMember(Value="ovhError")]
		OvhError,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Partition Protocol
	/// </summary>
	public enum DedicatedstorageProtocolEnum {
		
		[EnumMember(Value="CIFS")]
		CIFS,
		
		[EnumMember(Value="NFS")]
		NFS,
		
		[EnumMember(Value="NFS_CIFS")]
		NFS_CIFS,
	}
	
	/// <summary>
	/// Distincts task
	/// </summary>
	public enum DedicatedstorageTaskFunctionEnum {
		
		[EnumMember(Value="backupRecursiveDestroy")]
		BackupRecursiveDestroy,
		
		[EnumMember(Value="clusterLeclercAclUpdate")]
		ClusterLeclercAclUpdate,
		
		[EnumMember(Value="clusterLeclercChangeServiceIp")]
		ClusterLeclercChangeServiceIp,
		
		[EnumMember(Value="clusterLeclercCustomSnapCreate")]
		ClusterLeclercCustomSnapCreate,
		
		[EnumMember(Value="clusterLeclercCustomSnapDelete")]
		ClusterLeclercCustomSnapDelete,
		
		[EnumMember(Value="clusterLeclercDeleteSnapshotDirectory")]
		ClusterLeclercDeleteSnapshotDirectory,
		
		[EnumMember(Value="clusterLeclercDestroyNasContainer")]
		ClusterLeclercDestroyNasContainer,
		
		[EnumMember(Value="clusterLeclercPartitionAdd")]
		ClusterLeclercPartitionAdd,
		
		[EnumMember(Value="clusterLeclercPartitionDelete")]
		ClusterLeclercPartitionDelete,
		
		[EnumMember(Value="clusterLeclercPartitionUpdate")]
		ClusterLeclercPartitionUpdate,
		
		[EnumMember(Value="clusterLeclercQuotaUpdate")]
		ClusterLeclercQuotaUpdate,
		
		[EnumMember(Value="clusterLeclercSetupNasContainer")]
		ClusterLeclercSetupNasContainer,
		
		[EnumMember(Value="clusterLeclercSnapshotUpdate")]
		ClusterLeclercSnapshotUpdate,
		
		[EnumMember(Value="clusterLeclercZfsOptions")]
		ClusterLeclercZfsOptions,
		
		[EnumMember(Value="nasAclUpdate")]
		NasAclUpdate,
		
		[EnumMember(Value="nasDeleteSnapshotDirectory")]
		NasDeleteSnapshotDirectory,
		
		[EnumMember(Value="nasPartitionAdd")]
		NasPartitionAdd,
		
		[EnumMember(Value="nasPartitionDelete")]
		NasPartitionDelete,
		
		[EnumMember(Value="nasPartitionUpdate")]
		NasPartitionUpdate,
		
		[EnumMember(Value="nasQuotaUpdate")]
		NasQuotaUpdate,
		
		[EnumMember(Value="remoteBackupRecursiveDestroy")]
		RemoteBackupRecursiveDestroy,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// Define Acl for partition
	/// </summary>
	public class DedicatednasAccess {
		
		private long AccessId_bfield;
		
		private string Ip_bfield;
		
		/// <summary>
		/// the id of the access
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;the id of the access&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("accessId")]
		public long AccessId {
			get {
				return this.AccessId_bfield;
			}
			set {
				this.AccessId_bfield = value;
			}
		}
		
		/// <summary>
		/// the ip in root on storage
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipBlock&quot;,&quot;Description&quot;:&quot;the ip in root on storage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Storage nas
	/// </summary>
	public class DedicatednasNas {
		
		private bool CanCreatePartition_bfield;
		
		private string CustomName_bfield;
		
		private string Datacenter_bfield;
		
		private string Ip_bfield;
		
		private string MountPath_bfield;
		
		private string ServiceName_bfield;
		
		private long ZpoolSize_bfield;
		
		/// <summary>
		/// True, if partition creation is allowed on this nas
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;True, if partition creation is allowed on this nas&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canCreatePartition")]
		public bool CanCreatePartition {
			get {
				return this.CanCreatePartition_bfield;
			}
			set {
				this.CanCreatePartition_bfield = value;
			}
		}
		
		/// <summary>
		/// The name you give to the nas
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The name you give to the nas&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("customName")]
		public string CustomName {
			get {
				return this.CustomName_bfield;
			}
			set {
				this.CustomName_bfield = value;
			}
		}
		
		/// <summary>
		/// area of nas
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;area of nas&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("datacenter")]
		public string Datacenter {
			get {
				return this.Datacenter_bfield;
			}
			set {
				this.Datacenter_bfield = value;
			}
		}
		
		/// <summary>
		/// Access ip of nas
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;Access ip of nas&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// The storage mount path
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The storage mount path&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mountPath")]
		public string MountPath {
			get {
				return this.MountPath_bfield;
			}
			set {
				this.MountPath_bfield = value;
			}
		}
		
		/// <summary>
		/// The storage service name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The storage service name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceName")]
		public string ServiceName {
			get {
				return this.ServiceName_bfield;
			}
			set {
				this.ServiceName_bfield = value;
			}
		}
		
		/// <summary>
		/// the size of the nas
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;the size of the nas&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zpoolSize")]
		public long ZpoolSize {
			get {
				return this.ZpoolSize_bfield;
			}
			set {
				this.ZpoolSize_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Storage partition
	/// </summary>
	public class DedicatednasPartition {
		
		private string PartitionName_bfield;
		
		private string Protocol_bfield;
		
		private long Size_bfield;
		
		/// <summary>
		/// the given name of partition
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;the given name of partition&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("partitionName")]
		public string PartitionName {
			get {
				return this.PartitionName_bfield;
			}
			set {
				this.PartitionName_bfield = value;
			}
		}
		
		/// <summary>
		/// must be nfs cifs or both
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dedicated.storage.ProtocolEnum&quot;,&quot;Description&quot;:&quot;must be nfs cifs or both&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("protocol")]
		public string Protocol {
			get {
				return this.Protocol_bfield;
			}
			set {
				this.Protocol_bfield = value;
			}
		}
		
		/// <summary>
		/// Partition size
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Partition size&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("size")]
		public long Size {
			get {
				return this.Size_bfield;
			}
			set {
				this.Size_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Partition Quota
	/// </summary>
	public class DedicatednasQuota {
		
		private long Size_bfield;
		
		private long Uid_bfield;
		
		/// <summary>
		/// the size to set in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;the size to set in MB&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("size")]
		public long Size {
			get {
				return this.Size_bfield;
			}
			set {
				this.Size_bfield = value;
			}
		}
		
		/// <summary>
		/// the uid to set quota on
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;the uid to set quota on&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("uid")]
		public long Uid {
			get {
				return this.Uid_bfield;
			}
			set {
				this.Uid_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Storage task
	/// </summary>
	public class DedicatednasTaskTask {
		
		private string Details_bfield;
		
		private System.Nullable<System.DateTime> DoneDate_bfield;
		
		private System.Nullable<System.DateTime> LastUpdate_bfield;
		
		private string Operation_bfield;
		
		private string PartitionName_bfield;
		
		private string Status_bfield;
		
		private string StorageName_bfield;
		
		private long TaskId_bfield;
		
		private System.Nullable<System.DateTime> TodoDate_bfield;
		
		/// <summary>
		/// information about operation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;information about operation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("details")]
		public string Details {
			get {
				return this.Details_bfield;
			}
			set {
				this.Details_bfield = value;
			}
		}
		
		/// <summary>
		/// the date when the task finished
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;the date when the task finished&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("doneDate")]
		public System.Nullable<System.DateTime> DoneDate {
			get {
				return this.DoneDate_bfield;
			}
			set {
				this.DoneDate_bfield = value;
			}
		}
		
		/// <summary>
		/// last modification of task
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;last modification of task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.Nullable<System.DateTime> LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Task type of operation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dedicated.storage.TaskFunctionEnum&quot;,&quot;Description&quot;:&quot;Task type of operation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("operation")]
		public string Operation {
			get {
				return this.Operation_bfield;
			}
			set {
				this.Operation_bfield = value;
			}
		}
		
		/// <summary>
		/// name of the partition
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;name of the partition&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("partitionName")]
		public string PartitionName {
			get {
				return this.PartitionName_bfield;
			}
			set {
				this.PartitionName_bfield = value;
			}
		}
		
		/// <summary>
		/// The actual state of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dedicated.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;The actual state of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// the name of your service
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;the name of your service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("storageName")]
		public string StorageName {
			get {
				return this.StorageName_bfield;
			}
			set {
				this.StorageName_bfield = value;
			}
		}
		
		/// <summary>
		/// id of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;id of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskId")]
		public long TaskId {
			get {
				return this.TaskId_bfield;
			}
			set {
				this.TaskId_bfield = value;
			}
		}
		
		/// <summary>
		/// Insertion of task in the todo
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Insertion of task in the todo&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.Nullable<System.DateTime> TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
