//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/caas/containers"  string[]--
//[GET] "/caas/containers/slaves/flavors"  string[]--
//[GET] "/caas/containers/slaves/flavors/{flavorId}"  docker.slave.flavor--flavorId
//[GET] "/caas/containers/{serviceName}"  docker.stack--serviceName
//[GET] "/caas/containers/{serviceName}/availableFrameworks"  string[]--serviceName
//[POST] "/caas/containers/{serviceName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,serviceName
//[GET] "/caas/containers/{serviceName}/frameworks"  string[]--serviceName
//[GET] "/caas/containers/{serviceName}/frameworks/{frameworkId}"  stack.framework--frameworkId,serviceName
//[GET] "/caas/containers/{serviceName}/frameworks/{frameworkId}/apps"  stack.framework.application--frameworkId,serviceName
//[PUT] "/caas/containers/{serviceName}/frameworks/{frameworkId}/password"  void--,frameworkId,serviceName
//[GET] "/caas/containers/{serviceName}/registry/credentials"  string[]--serviceName
//[POST] "/caas/containers/{serviceName}/registry/credentials"  docker.stack.registryCredentials--,serviceName
//[DELETE] "/caas/containers/{serviceName}/registry/credentials/{credentialsId}"  void--credentialsId,serviceName
//[GET] "/caas/containers/{serviceName}/registry/credentials/{credentialsId}"  docker.stack.registryCredentials--credentialsId,serviceName
//[PUT] "/caas/containers/{serviceName}/registry/credentials/{credentialsId}"  docker.stack.registryCredentials--,credentialsId,serviceName
//[GET] "/caas/containers/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/caas/containers/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/caas/containers/{serviceName}/slaves"  string[]--serviceName
//[GET] "/caas/containers/{serviceName}/slaves/{slaveId}"  docker.slave--serviceName,slaveId
//[DELETE] "/caas/containers/{serviceName}/ssl"  docker.stack.customSslMessage--serviceName
//[GET] "/caas/containers/{serviceName}/ssl"  docker.stack.customSsl--serviceName
//[PUT] "/caas/containers/{serviceName}/ssl"  docker.stack.customSslMessage--,serviceName
namespace Nglib.VENDORS.OVH.CAASCONTAINERS {
	
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// The new framework password
	/// </summary>
	public class Dockerframeworkpassword {
		
		private string Password_bfield;
		
		/// <summary>
		/// The new framework password
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;password&quot;,&quot;Description&quot;:&quot;The new framework password&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("password")]
		public string Password {
			get {
				return this.Password_bfield;
			}
			set {
				this.Password_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A host on which containers can be deployed
	/// </summary>
	public class Dockerslave {
		
		private System.DateTime CreatedAt_bfield;
		
		private string FlavorId_bfield;
		
		private string Id_bfield;
		
		private Dockerslavemetrics Metrics_bfield;
		
		private string Name_bfield;
		
		private string Region_bfield;
		
		private string Stack_bfield;
		
		private Dockerslavestatus State_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The framework UUID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The framework UUID&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("flavorId")]
		public string FlavorId {
			get {
				return this.FlavorId_bfield;
			}
			set {
				this.FlavorId_bfield = value;
			}
		}
		
		/// <summary>
		/// The slave UUID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The slave UUID&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Metrics about slave usage
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.metrics&quot;,&quot;Description&quot;:&quot;Metrics about slave usage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("metrics")]
		public Dockerslavemetrics Metrics {
			get {
				return this.Metrics_bfield;
			}
			set {
				this.Metrics_bfield = value;
			}
		}
		
		/// <summary>
		/// The slave hostname
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The slave hostname&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// The region where the slave is located
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The region where the slave is located&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("region")]
		public string Region {
			get {
				return this.Region_bfield;
			}
			set {
				this.Region_bfield = value;
			}
		}
		
		/// <summary>
		/// The stack to which the slave belongs
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The stack to which the slave belongs&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("stack")]
		public string Stack {
			get {
				return this.Stack_bfield;
			}
			set {
				this.Stack_bfield = value;
			}
		}
		
		/// <summary>
		/// The state of the slave
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.status&quot;,&quot;Description&quot;:&quot;The state of the slave&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public Dockerslavestatus State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Attributes of the slave flavor
	/// </summary>
	public class Dockerslaveflavor {
		
		private long Bandwidth_bfield;
		
		private long Cpus_bfield;
		
		private long Disk_bfield;
		
		private bool DiskHa_bfield;
		
		private string Id_bfield;
		
		private bool IsVm_bfield;
		
		private long Ram_bfield;
		
		/// <summary>
		/// The network bandwidth, in Mbps
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The network bandwidth, in Mbps&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("bandwidth")]
		public long Bandwidth {
			get {
				return this.Bandwidth_bfield;
			}
			set {
				this.Bandwidth_bfield = value;
			}
		}
		
		/// <summary>
		/// The amount of (v)CPUs
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The amount of (v)CPUs&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("cpus")]
		public long Cpus {
			get {
				return this.Cpus_bfield;
			}
			set {
				this.Cpus_bfield = value;
			}
		}
		
		/// <summary>
		/// The disk size, in GB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The disk size, in GB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("disk")]
		public long Disk {
			get {
				return this.Disk_bfield;
			}
			set {
				this.Disk_bfield = value;
			}
		}
		
		/// <summary>
		/// Wether the disk is HA (stored in Ceph) or local (SSD)
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Wether the disk is HA (stored in Ceph) or local (SSD)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("diskHa")]
		public bool DiskHa {
			get {
				return this.DiskHa_bfield;
			}
			set {
				this.DiskHa_bfield = value;
			}
		}
		
		/// <summary>
		/// The flavor UUID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The flavor UUID&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether the flavor is an Openstack or dedicated flavor
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether the flavor is an Openstack or dedicated flavor&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("isVm")]
		public bool IsVm {
			get {
				return this.IsVm_bfield;
			}
			set {
				this.IsVm_bfield = value;
			}
		}
		
		/// <summary>
		/// The amount of RAM, in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The amount of RAM, in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ram")]
		public long Ram {
			get {
				return this.Ram_bfield;
			}
			set {
				this.Ram_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Application data
	/// </summary>
	public class Dockerslaveframeworkapp {
		
		private System.Nullable<long> Cpu_bfield;
		
		private string[] Env_bfield;
		
		private string Id_bfield;
		
		private string Image_bfield;
		
		private System.Nullable<long> Instances_bfield;
		
		private System.Nullable<long> Mem_bfield;
		
		private string[] Ports_bfield;
		
		private string Status_bfield;
		
		private string[] Volumes_bfield;
		
		/// <summary>
		/// Application CPU
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Application CPU&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cpu")]
		public System.Nullable<long> Cpu {
			get {
				return this.Cpu_bfield;
			}
			set {
				this.Cpu_bfield = value;
			}
		}
		
		/// <summary>
		/// Application environment
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.framework.app.environment[]&quot;,&quot;Description&quot;:&quot;Application environment&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("env")]
		public string[] Env {
			get {
				return this.Env_bfield;
			}
			set {
				this.Env_bfield = value;
			}
		}
		
		/// <summary>
		/// Application id
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Application id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Application image
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Application image&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("image")]
		public string Image {
			get {
				return this.Image_bfield;
			}
			set {
				this.Image_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of running containers instances
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Number of running containers instances&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("instances")]
		public System.Nullable<long> Instances {
			get {
				return this.Instances_bfield;
			}
			set {
				this.Instances_bfield = value;
			}
		}
		
		/// <summary>
		/// Application memory
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Application memory&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mem")]
		public System.Nullable<long> Mem {
			get {
				return this.Mem_bfield;
			}
			set {
				this.Mem_bfield = value;
			}
		}
		
		/// <summary>
		/// Application ports
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.framework.app.port[]&quot;,&quot;Description&quot;:&quot;Application ports&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ports")]
		public string[] Ports {
			get {
				return this.Ports_bfield;
			}
			set {
				this.Ports_bfield = value;
			}
		}
		
		/// <summary>
		/// Application status
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Application status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Application volumes
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.framework.app.volume[]&quot;,&quot;Description&quot;:&quot;Application volumes&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("volumes")]
		public string[] Volumes {
			get {
				return this.Volumes_bfield;
			}
			set {
				this.Volumes_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Application environment variable
	/// </summary>
	public class Dockerslaveframeworkappenvironment {
		
		private string Key_bfield;
		
		private string Value_bfield;
		
		/// <summary>
		/// variable key
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;variable key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("key")]
		public string Key {
			get {
				return this.Key_bfield;
			}
			set {
				this.Key_bfield = value;
			}
		}
		
		/// <summary>
		/// variable value
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;variable value&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("value")]
		public string Value {
			get {
				return this.Value_bfield;
			}
			set {
				this.Value_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Application ports
	/// </summary>
	public class Dockerslaveframeworkappport {
		
		private System.Nullable<long> ContainerPort_bfield;
		
		private System.Nullable<long> HostPort_bfield;
		
		private string Protocol_bfield;
		
		/// <summary>
		/// Container port
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Container port&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("containerPort")]
		public System.Nullable<long> ContainerPort {
			get {
				return this.ContainerPort_bfield;
			}
			set {
				this.ContainerPort_bfield = value;
			}
		}
		
		/// <summary>
		/// Host port
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Host port&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("hostPort")]
		public System.Nullable<long> HostPort {
			get {
				return this.HostPort_bfield;
			}
			set {
				this.HostPort_bfield = value;
			}
		}
		
		/// <summary>
		/// Port protocol
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Port protocol&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("protocol")]
		public string Protocol {
			get {
				return this.Protocol_bfield;
			}
			set {
				this.Protocol_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Application volumes
	/// </summary>
	public class Dockerslaveframeworkappvolume {
		
		private System.Nullable<long> ContainerPath_bfield;
		
		private System.Nullable<long> HostPath_bfield;
		
		private string Mode_bfield;
		
		/// <summary>
		/// Container path
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Container path&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("containerPath")]
		public System.Nullable<long> ContainerPath {
			get {
				return this.ContainerPath_bfield;
			}
			set {
				this.ContainerPath_bfield = value;
			}
		}
		
		/// <summary>
		/// Host path
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Host path&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("hostPath")]
		public System.Nullable<long> HostPath {
			get {
				return this.HostPath_bfield;
			}
			set {
				this.HostPath_bfield = value;
			}
		}
		
		/// <summary>
		/// Volume mode
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Volume mode&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mode")]
		public string Mode {
			get {
				return this.Mode_bfield;
			}
			set {
				this.Mode_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Metrics about slave usage
	/// </summary>
	public class Dockerslavemetrics {
		
		private Dockerslavemetricsresources Resources_bfield;
		
		private DockerslavemetricsusedResources UsedResources_bfield;
		
		/// <summary>
		/// Metrics about available slave resources
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.metrics.resources&quot;,&quot;Description&quot;:&quot;Metrics about available slave resources&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("resources")]
		public Dockerslavemetricsresources Resources {
			get {
				return this.Resources_bfield;
			}
			set {
				this.Resources_bfield = value;
			}
		}
		
		/// <summary>
		/// Metrics about used slave resources
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.metrics.usedResources&quot;,&quot;Description&quot;:&quot;Metrics about used slave resources&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("usedResources")]
		public DockerslavemetricsusedResources UsedResources {
			get {
				return this.UsedResources_bfield;
			}
			set {
				this.UsedResources_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Metrics about available slave resources
	/// </summary>
	public class Dockerslavemetricsresources {
		
		private System.Nullable<long> Cpu_bfield;
		
		private System.Nullable<long> Mem_bfield;
		
		/// <summary>
		/// Available CPU
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Available CPU&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cpu")]
		public System.Nullable<long> Cpu {
			get {
				return this.Cpu_bfield;
			}
			set {
				this.Cpu_bfield = value;
			}
		}
		
		/// <summary>
		/// Available memory
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Available memory&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mem")]
		public System.Nullable<long> Mem {
			get {
				return this.Mem_bfield;
			}
			set {
				this.Mem_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Metrics about used slave resources
	/// </summary>
	public class DockerslavemetricsusedResources {
		
		private System.Nullable<long> Cpu_bfield;
		
		private System.Nullable<long> Mem_bfield;
		
		/// <summary>
		/// Used CPU
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Used CPU&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cpu")]
		public System.Nullable<long> Cpu {
			get {
				return this.Cpu_bfield;
			}
			set {
				this.Cpu_bfield = value;
			}
		}
		
		/// <summary>
		/// Used memory
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Used memory&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mem")]
		public System.Nullable<long> Mem {
			get {
				return this.Mem_bfield;
			}
			set {
				this.Mem_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The state of the slave
	/// </summary>
	public class Dockerslavestatus {
	}
	
	/// <summary>
	/// An isolated client Docker PaaS environment
	/// </summary>
	public class Dockerstack {
		
		private string Cluster_bfield;
		
		private System.DateTime CreatedAt_bfield;
		
		private string LoadBalancer_bfield;
		
		private Dockerslavemetrics Metrics_bfield;
		
		private string Name_bfield;
		
		private string[] Slaves_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		/// <summary>
		/// The cluster on which the stack is deployed
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The cluster on which the stack is deployed&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cluster")]
		public string Cluster {
			get {
				return this.Cluster_bfield;
			}
			set {
				this.Cluster_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The DNS address of the stack load balancer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The DNS address of the stack load balancer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("loadBalancer")]
		public string LoadBalancer {
			get {
				return this.LoadBalancer_bfield;
			}
			set {
				this.LoadBalancer_bfield = value;
			}
		}
		
		/// <summary>
		/// Metrics about slave usage
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.metrics&quot;,&quot;Description&quot;:&quot;Metrics about slave usage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("metrics")]
		public Dockerslavemetrics Metrics {
			get {
				return this.Metrics_bfield;
			}
			set {
				this.Metrics_bfield = value;
			}
		}
		
		/// <summary>
		/// The stack name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The stack name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// A list of slave UUIDs
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;A list of slave UUIDs&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("slaves")]
		public string[] Slaves {
			get {
				return this.Slaves_bfield;
			}
			set {
				this.Slaves_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A custom SSL certificate associated to a Docker PaaS environment
	/// </summary>
	public class DockerstackcustomSsl {
		
		private string Certificate_bfield;
		
		private System.DateTime CreatedAt_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		/// <summary>
		/// The custom SSL public certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The custom SSL public certificate&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("certificate")]
		public string Certificate {
			get {
				return this.Certificate_bfield;
			}
			set {
				this.Certificate_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Action validation message
	/// </summary>
	public class DockerstackcustomSslMessage {
		
		private string Message_bfield;
		
		/// <summary>
		/// The action validation message
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The action validation message&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("message")]
		public string Message {
			get {
				return this.Message_bfield;
			}
			set {
				this.Message_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A custom SSL certificate associated to a Docker PaaS environment
	/// </summary>
	public class DockerstackinputCustomSsl {
		
		private string Certificate_bfield;
		
		private string Key_bfield;
		
		/// <summary>
		/// The custom SSL public certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The custom SSL public certificate&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("certificate")]
		public string Certificate {
			get {
				return this.Certificate_bfield;
			}
			set {
				this.Certificate_bfield = value;
			}
		}
		
		/// <summary>
		/// The custom SSL certificate private key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;password&quot;,&quot;Description&quot;:&quot;The custom SSL certificate private key&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("key")]
		public string Key {
			get {
				return this.Key_bfield;
			}
			set {
				this.Key_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Credentials providing authentication to an external registry
	/// </summary>
	public class DockerstackregistryCredentials {
		
		private System.DateTime CreatedAt_bfield;
		
		private string RegistryUrl_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		private string Username_bfield;
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The URL of the registry
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The URL of the registry&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("registryUrl")]
		public string RegistryUrl {
			get {
				return this.RegistryUrl_bfield;
			}
			set {
				this.RegistryUrl_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The registry account username
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The registry account username&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("username")]
		public string Username {
			get {
				return this.Username_bfield;
			}
			set {
				this.Username_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A framework installed for a docker PaaS stack
	/// </summary>
	public class Stackframework {
		
		private string AccessUrl_bfield;
		
		private System.DateTime CreatedAt_bfield;
		
		private string Id_bfield;
		
		private string Name_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		/// <summary>
		/// The framework name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The framework name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accessUrl")]
		public string AccessUrl {
			get {
				return this.AccessUrl_bfield;
			}
			set {
				this.AccessUrl_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The framework UUID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The framework UUID&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// The framework name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The framework name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Application deployed on the framework
	/// </summary>
	public class Stackframeworkapplication {
		
		private string[] Apps_bfield;
		
		/// <summary>
		/// Application list
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;docker.slave.framework.app[]&quot;,&quot;Description&quot;:&quot;Application list&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("apps")]
		public string[] Apps {
			get {
				return this.Apps_bfield;
			}
			set {
				this.Apps_bfield = value;
			}
		}
	}
}
