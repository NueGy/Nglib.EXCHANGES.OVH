//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/license/office"  string[]--
//[GET] "/license/office/{serviceName}"  license.office.OfficeTenant--serviceName
//[PUT] "/license/office/{serviceName}"  void--,serviceName
//[GET] "/license/office/{serviceName}/domain"  string[]--serviceName
//[GET] "/license/office/{serviceName}/domain/{domainName}"  license.office.OfficeDomain--domainName,serviceName
//[GET] "/license/office/{serviceName}/pendingTask"  long[]--serviceName
//[GET] "/license/office/{serviceName}/pendingTask/{id}"  license.office.OfficeTask--id,serviceName
//[GET] "/license/office/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/license/office/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/license/office/{serviceName}/usageStatistics"  license.office.Statistics[]--from,serviceName,to
//[GET] "/license/office/{serviceName}/user"  string[]--activationEmail,firstName,lastName,licences,serviceName
//[POST] "/license/office/{serviceName}/user"  license.office.OfficeTask--domain,firstName,lastName,licence,login,serviceName,usageLocation
//[DELETE] "/license/office/{serviceName}/user/{activationEmail}"  license.office.OfficeTask--activationEmail,serviceName
//[GET] "/license/office/{serviceName}/user/{activationEmail}"  license.office.OfficeUser--activationEmail,serviceName
//[PUT] "/license/office/{serviceName}/user/{activationEmail}"  void--,activationEmail,serviceName
//[POST] "/license/office/{serviceName}/user/{activationEmail}/changePassword"  license.office.OfficeTask--activationEmail,notifyEmail,password,serviceName,shouldSendMail
namespace Nglib.VENDORS.OVH.LICENSEOFFICE {
	
	
	/// <summary>
	/// ISO country codes
	/// </summary>
	public enum CoreTypesCountryEnum {
		
		[EnumMember(Value="ac")]
		Ac,
		
		[EnumMember(Value="ad")]
		Ad,
		
		[EnumMember(Value="ae")]
		Ae,
		
		[EnumMember(Value="af")]
		Af,
		
		[EnumMember(Value="ag")]
		Ag,
		
		[EnumMember(Value="ai")]
		Ai,
		
		[EnumMember(Value="al")]
		Al,
		
		[EnumMember(Value="am")]
		Am,
		
		[EnumMember(Value="an")]
		An,
		
		[EnumMember(Value="ao")]
		Ao,
		
		[EnumMember(Value="aq")]
		Aq,
		
		[EnumMember(Value="ar")]
		Ar,
		
		[EnumMember(Value="as")]
		As,
		
		[EnumMember(Value="at")]
		At,
		
		[EnumMember(Value="au")]
		Au,
		
		[EnumMember(Value="aw")]
		Aw,
		
		[EnumMember(Value="ax")]
		Ax,
		
		[EnumMember(Value="az")]
		Az,
		
		[EnumMember(Value="ba")]
		Ba,
		
		[EnumMember(Value="bb")]
		Bb,
		
		[EnumMember(Value="bd")]
		Bd,
		
		[EnumMember(Value="be")]
		Be,
		
		[EnumMember(Value="bf")]
		Bf,
		
		[EnumMember(Value="bg")]
		Bg,
		
		[EnumMember(Value="bh")]
		Bh,
		
		[EnumMember(Value="bi")]
		Bi,
		
		[EnumMember(Value="bj")]
		Bj,
		
		[EnumMember(Value="bl")]
		Bl,
		
		[EnumMember(Value="bm")]
		Bm,
		
		[EnumMember(Value="bn")]
		Bn,
		
		[EnumMember(Value="bo")]
		Bo,
		
		[EnumMember(Value="bq")]
		Bq,
		
		[EnumMember(Value="br")]
		Br,
		
		[EnumMember(Value="bs")]
		Bs,
		
		[EnumMember(Value="bt")]
		Bt,
		
		[EnumMember(Value="bv")]
		Bv,
		
		[EnumMember(Value="bw")]
		Bw,
		
		[EnumMember(Value="by")]
		By,
		
		[EnumMember(Value="bz")]
		Bz,
		
		[EnumMember(Value="ca")]
		Ca,
		
		[EnumMember(Value="cc")]
		Cc,
		
		[EnumMember(Value="cd")]
		Cd,
		
		[EnumMember(Value="cf")]
		Cf,
		
		[EnumMember(Value="cg")]
		Cg,
		
		[EnumMember(Value="ch")]
		Ch,
		
		[EnumMember(Value="ci")]
		Ci,
		
		[EnumMember(Value="ck")]
		Ck,
		
		[EnumMember(Value="cl")]
		Cl,
		
		[EnumMember(Value="cm")]
		Cm,
		
		[EnumMember(Value="cn")]
		Cn,
		
		[EnumMember(Value="co")]
		Co,
		
		[EnumMember(Value="cr")]
		Cr,
		
		[EnumMember(Value="cs")]
		Cs,
		
		[EnumMember(Value="cu")]
		Cu,
		
		[EnumMember(Value="cv")]
		Cv,
		
		[EnumMember(Value="cw")]
		Cw,
		
		[EnumMember(Value="cx")]
		Cx,
		
		[EnumMember(Value="cy")]
		Cy,
		
		[EnumMember(Value="cz")]
		Cz,
		
		[EnumMember(Value="de")]
		De,
		
		[EnumMember(Value="dj")]
		Dj,
		
		[EnumMember(Value="dk")]
		Dk,
		
		[EnumMember(Value="dm")]
		Dm,
		
		[EnumMember(Value="do")]
		Do,
		
		[EnumMember(Value="dz")]
		Dz,
		
		[EnumMember(Value="ec")]
		Ec,
		
		[EnumMember(Value="ee")]
		Ee,
		
		[EnumMember(Value="eg")]
		Eg,
		
		[EnumMember(Value="eh")]
		Eh,
		
		[EnumMember(Value="er")]
		Er,
		
		[EnumMember(Value="es")]
		Es,
		
		[EnumMember(Value="et")]
		Et,
		
		[EnumMember(Value="fc")]
		Fc,
		
		[EnumMember(Value="fd")]
		Fd,
		
		[EnumMember(Value="fi")]
		Fi,
		
		[EnumMember(Value="fj")]
		Fj,
		
		[EnumMember(Value="fk")]
		Fk,
		
		[EnumMember(Value="fm")]
		Fm,
		
		[EnumMember(Value="fo")]
		Fo,
		
		[EnumMember(Value="fr")]
		Fr,
		
		[EnumMember(Value="fx")]
		Fx,
		
		[EnumMember(Value="ga")]
		Ga,
		
		[EnumMember(Value="gb")]
		Gb,
		
		[EnumMember(Value="gd")]
		Gd,
		
		[EnumMember(Value="ge")]
		Ge,
		
		[EnumMember(Value="gf")]
		Gf,
		
		[EnumMember(Value="gg")]
		Gg,
		
		[EnumMember(Value="gh")]
		Gh,
		
		[EnumMember(Value="gi")]
		Gi,
		
		[EnumMember(Value="gl")]
		Gl,
		
		[EnumMember(Value="gm")]
		Gm,
		
		[EnumMember(Value="gn")]
		Gn,
		
		[EnumMember(Value="gp")]
		Gp,
		
		[EnumMember(Value="gq")]
		Gq,
		
		[EnumMember(Value="gr")]
		Gr,
		
		[EnumMember(Value="gs")]
		Gs,
		
		[EnumMember(Value="gt")]
		Gt,
		
		[EnumMember(Value="gu")]
		Gu,
		
		[EnumMember(Value="gw")]
		Gw,
		
		[EnumMember(Value="gy")]
		Gy,
		
		[EnumMember(Value="hk")]
		Hk,
		
		[EnumMember(Value="hm")]
		Hm,
		
		[EnumMember(Value="hn")]
		Hn,
		
		[EnumMember(Value="hr")]
		Hr,
		
		[EnumMember(Value="ht")]
		Ht,
		
		[EnumMember(Value="hu")]
		Hu,
		
		[EnumMember(Value="id")]
		Id,
		
		[EnumMember(Value="ie")]
		Ie,
		
		[EnumMember(Value="il")]
		Il,
		
		[EnumMember(Value="im")]
		Im,
		
		[EnumMember(Value="in")]
		In,
		
		[EnumMember(Value="io")]
		Io,
		
		[EnumMember(Value="iq")]
		Iq,
		
		[EnumMember(Value="ir")]
		Ir,
		
		[EnumMember(Value="is")]
		Is,
		
		[EnumMember(Value="it")]
		It,
		
		[EnumMember(Value="je")]
		Je,
		
		[EnumMember(Value="jm")]
		Jm,
		
		[EnumMember(Value="jo")]
		Jo,
		
		[EnumMember(Value="jp")]
		Jp,
		
		[EnumMember(Value="ke")]
		Ke,
		
		[EnumMember(Value="kg")]
		Kg,
		
		[EnumMember(Value="kh")]
		Kh,
		
		[EnumMember(Value="ki")]
		Ki,
		
		[EnumMember(Value="km")]
		Km,
		
		[EnumMember(Value="kn")]
		Kn,
		
		[EnumMember(Value="kp")]
		Kp,
		
		[EnumMember(Value="kr")]
		Kr,
		
		[EnumMember(Value="kw")]
		Kw,
		
		[EnumMember(Value="ky")]
		Ky,
		
		[EnumMember(Value="kz")]
		Kz,
		
		[EnumMember(Value="la")]
		La,
		
		[EnumMember(Value="lb")]
		Lb,
		
		[EnumMember(Value="lc")]
		Lc,
		
		[EnumMember(Value="li")]
		Li,
		
		[EnumMember(Value="lk")]
		Lk,
		
		[EnumMember(Value="lr")]
		Lr,
		
		[EnumMember(Value="ls")]
		Ls,
		
		[EnumMember(Value="lt")]
		Lt,
		
		[EnumMember(Value="lu")]
		Lu,
		
		[EnumMember(Value="lv")]
		Lv,
		
		[EnumMember(Value="ly")]
		Ly,
		
		[EnumMember(Value="ma")]
		Ma,
		
		[EnumMember(Value="mc")]
		Mc,
		
		[EnumMember(Value="md")]
		Md,
		
		[EnumMember(Value="me")]
		Me,
		
		[EnumMember(Value="mf")]
		Mf,
		
		[EnumMember(Value="mg")]
		Mg,
		
		[EnumMember(Value="mh")]
		Mh,
		
		[EnumMember(Value="mk")]
		Mk,
		
		[EnumMember(Value="ml")]
		Ml,
		
		[EnumMember(Value="mm")]
		Mm,
		
		[EnumMember(Value="mn")]
		Mn,
		
		[EnumMember(Value="mo")]
		Mo,
		
		[EnumMember(Value="mp")]
		Mp,
		
		[EnumMember(Value="mq")]
		Mq,
		
		[EnumMember(Value="mr")]
		Mr,
		
		[EnumMember(Value="ms")]
		Ms,
		
		[EnumMember(Value="mt")]
		Mt,
		
		[EnumMember(Value="mu")]
		Mu,
		
		[EnumMember(Value="mv")]
		Mv,
		
		[EnumMember(Value="mw")]
		Mw,
		
		[EnumMember(Value="mx")]
		Mx,
		
		[EnumMember(Value="my")]
		My,
		
		[EnumMember(Value="mz")]
		Mz,
		
		[EnumMember(Value="na")]
		Na,
		
		[EnumMember(Value="nc")]
		Nc,
		
		[EnumMember(Value="ne")]
		Ne,
		
		[EnumMember(Value="nf")]
		Nf,
		
		[EnumMember(Value="ng")]
		Ng,
		
		[EnumMember(Value="ni")]
		Ni,
		
		[EnumMember(Value="nl")]
		Nl,
		
		[EnumMember(Value="no")]
		No,
		
		[EnumMember(Value="np")]
		Np,
		
		[EnumMember(Value="nr")]
		Nr,
		
		[EnumMember(Value="nu")]
		Nu,
		
		[EnumMember(Value="nz")]
		Nz,
		
		[EnumMember(Value="om")]
		Om,
		
		[EnumMember(Value="pa")]
		Pa,
		
		[EnumMember(Value="pe")]
		Pe,
		
		[EnumMember(Value="pf")]
		Pf,
		
		[EnumMember(Value="pg")]
		Pg,
		
		[EnumMember(Value="ph")]
		Ph,
		
		[EnumMember(Value="pk")]
		Pk,
		
		[EnumMember(Value="pl")]
		Pl,
		
		[EnumMember(Value="pm")]
		Pm,
		
		[EnumMember(Value="pn")]
		Pn,
		
		[EnumMember(Value="pr")]
		Pr,
		
		[EnumMember(Value="ps")]
		Ps,
		
		[EnumMember(Value="pt")]
		Pt,
		
		[EnumMember(Value="pw")]
		Pw,
		
		[EnumMember(Value="py")]
		Py,
		
		[EnumMember(Value="qa")]
		Qa,
		
		[EnumMember(Value="qc")]
		Qc,
		
		[EnumMember(Value="re")]
		Re,
		
		[EnumMember(Value="ro")]
		Ro,
		
		[EnumMember(Value="rs")]
		Rs,
		
		[EnumMember(Value="ru")]
		Ru,
		
		[EnumMember(Value="rw")]
		Rw,
		
		[EnumMember(Value="sa")]
		Sa,
		
		[EnumMember(Value="sb")]
		Sb,
		
		[EnumMember(Value="sc")]
		Sc,
		
		[EnumMember(Value="sd")]
		Sd,
		
		[EnumMember(Value="se")]
		Se,
		
		[EnumMember(Value="sg")]
		Sg,
		
		[EnumMember(Value="sh")]
		Sh,
		
		[EnumMember(Value="si")]
		Si,
		
		[EnumMember(Value="sj")]
		Sj,
		
		[EnumMember(Value="sk")]
		Sk,
		
		[EnumMember(Value="sl")]
		Sl,
		
		[EnumMember(Value="sm")]
		Sm,
		
		[EnumMember(Value="sn")]
		Sn,
		
		[EnumMember(Value="so")]
		So,
		
		[EnumMember(Value="sr")]
		Sr,
		
		[EnumMember(Value="ss")]
		Ss,
		
		[EnumMember(Value="st")]
		St,
		
		[EnumMember(Value="sv")]
		Sv,
		
		[EnumMember(Value="sx")]
		Sx,
		
		[EnumMember(Value="sy")]
		Sy,
		
		[EnumMember(Value="sz")]
		Sz,
		
		[EnumMember(Value="tc")]
		Tc,
		
		[EnumMember(Value="td")]
		Td,
		
		[EnumMember(Value="tf")]
		Tf,
		
		[EnumMember(Value="tg")]
		Tg,
		
		[EnumMember(Value="th")]
		Th,
		
		[EnumMember(Value="tj")]
		Tj,
		
		[EnumMember(Value="tk")]
		Tk,
		
		[EnumMember(Value="tl")]
		Tl,
		
		[EnumMember(Value="tm")]
		Tm,
		
		[EnumMember(Value="tn")]
		Tn,
		
		[EnumMember(Value="to")]
		To,
		
		[EnumMember(Value="tp")]
		Tp,
		
		[EnumMember(Value="tr")]
		Tr,
		
		[EnumMember(Value="tt")]
		Tt,
		
		[EnumMember(Value="tv")]
		Tv,
		
		[EnumMember(Value="tw")]
		Tw,
		
		[EnumMember(Value="tz")]
		Tz,
		
		[EnumMember(Value="ua")]
		Ua,
		
		[EnumMember(Value="ug")]
		Ug,
		
		[EnumMember(Value="uk")]
		Uk,
		
		[EnumMember(Value="um")]
		Um,
		
		[EnumMember(Value="us")]
		Us,
		
		[EnumMember(Value="uy")]
		Uy,
		
		[EnumMember(Value="uz")]
		Uz,
		
		[EnumMember(Value="va")]
		Va,
		
		[EnumMember(Value="vc")]
		Vc,
		
		[EnumMember(Value="ve")]
		Ve,
		
		[EnumMember(Value="vg")]
		Vg,
		
		[EnumMember(Value="vi")]
		Vi,
		
		[EnumMember(Value="vn")]
		Vn,
		
		[EnumMember(Value="vu")]
		Vu,
		
		[EnumMember(Value="we")]
		We,
		
		[EnumMember(Value="wf")]
		Wf,
		
		[EnumMember(Value="ws")]
		Ws,
		
		[EnumMember(Value="ye")]
		Ye,
		
		[EnumMember(Value="yt")]
		Yt,
		
		[EnumMember(Value="yu")]
		Yu,
		
		[EnumMember(Value="za")]
		Za,
		
		[EnumMember(Value="zm")]
		Zm,
		
		[EnumMember(Value="zw")]
		Zw,
	}
	
	/// <summary>
	/// Office domain state
	/// </summary>
	public enum LicenseofficeDomainStateEnum {
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="unverified")]
		Unverified,
	}
	
	/// <summary>
	/// Office Licence
	/// </summary>
	public enum LicenseofficeLicenceEnum {
		
		[EnumMember(Value="officeBusiness")]
		OfficeBusiness,
		
		[EnumMember(Value="officeProPlus")]
		OfficeProPlus,
	}
	
	/// <summary>
	/// Office tenant state
	/// </summary>
	public enum LicenseofficeServiceStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="inMaintenance")]
		InMaintenance,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="suspended")]
		Suspended,
	}
	
	/// <summary>
	/// Type of service
	/// </summary>
	public enum LicenseofficeServiceTypeEnum {
		
		[EnumMember(Value="payAsYouGo")]
		PayAsYouGo,
		
		[EnumMember(Value="prepaid")]
		Prepaid,
	}
	
	/// <summary>
	/// Exchange task status
	/// </summary>
	public enum LicenseofficeTaskStatusEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Office user  state
	/// </summary>
	public enum LicenseofficeUserStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="ok")]
		Ok,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// Office domain
	/// </summary>
	public class LicenseofficeOfficeDomain {
		
		private string DomainName_bfield;
		
		private string Status_bfield;
		
		private string TxtEntry_bfield;
		
		/// <summary>
		/// Domain name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domainName")]
		public string DomainName {
			get {
				return this.DomainName_bfield;
			}
			set {
				this.DomainName_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.office.DomainStateEnum&quot;,&quot;Description&quot;:&quot;Domain state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// TXT entry required for domain validation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;TXT entry required for domain validation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("txtEntry")]
		public string TxtEntry {
			get {
				return this.TxtEntry_bfield;
			}
			set {
				this.TxtEntry_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Office subscription
	/// </summary>
	public class LicenseofficeOfficeSubscription {
		
		private System.DateTime CreationDate_bfield;
		
		private long Id_bfield;
		
		private System.Nullable<System.DateTime> LastUpdate_bfield;
		
		private long LicenseId_bfield;
		
		private long Quantity_bfield;
		
		private string Status_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Subscription's unique identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Subscription's unique identifier&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.Nullable<System.DateTime> LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// License's type id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;License's type id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("licenseId")]
		public long LicenseId {
			get {
				return this.LicenseId_bfield;
			}
			set {
				this.LicenseId_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of available licenses
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Number of available licenses&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("quantity")]
		public long Quantity {
			get {
				return this.Quantity_bfield;
			}
			set {
				this.Quantity_bfield = value;
			}
		}
		
		/// <summary>
		/// Current state of the subscription
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Current state of the subscription&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task's unique identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task's unique identifier&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Office task
	/// </summary>
	public class LicenseofficeOfficeTask {
		
		private System.Nullable<System.DateTime> FinishDate_bfield;
		
		private string Function_bfield;
		
		private long Id_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// Completion date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Completion date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("finishDate")]
		public System.Nullable<System.DateTime> FinishDate {
			get {
				return this.FinishDate_bfield;
			}
			set {
				this.FinishDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Function name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Function name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Task's unique identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task's unique identifier&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Task state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.office.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;Task state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Office tenant
	/// </summary>
	public class LicenseofficeOfficeTenant {
		
		private string Address_bfield;
		
		private string City_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private string DisplayName_bfield;
		
		private string FirstName_bfield;
		
		private string LastName_bfield;
		
		private string Phone_bfield;
		
		private string ServiceName_bfield;
		
		private string ServiceType_bfield;
		
		private string Status_bfield;
		
		private string ZipCode_bfield;
		
		/// <summary>
		/// Contact's address line
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact's address line&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("address")]
		public string Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact's city
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact's city&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("city")]
		public string City {
			get {
				return this.City_bfield;
			}
			set {
				this.City_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Tenant's display name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Tenant's display name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact's fisrt name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact's fisrt name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact's fisrt name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact's fisrt name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// Primary phone number
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;phoneNumber&quot;,&quot;Description&quot;:&quot;Primary phone number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("phone")]
		public string Phone {
			get {
				return this.Phone_bfield;
			}
			set {
				this.Phone_bfield = value;
			}
		}
		
		/// <summary>
		/// Internal service name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Internal service name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceName")]
		public string ServiceName {
			get {
				return this.ServiceName_bfield;
			}
			set {
				this.ServiceName_bfield = value;
			}
		}
		
		/// <summary>
		/// Tenant's service type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.office.ServiceTypeEnum&quot;,&quot;Description&quot;:&quot;Tenant's service type&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceType")]
		public string ServiceType {
			get {
				return this.ServiceType_bfield;
			}
			set {
				this.ServiceType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.office.ServiceStateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact's zip code
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact's zip code&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zipCode")]
		public string ZipCode {
			get {
				return this.ZipCode_bfield;
			}
			set {
				this.ZipCode_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Office user
	/// </summary>
	public class LicenseofficeOfficeUser {
		
		private string ActivationEmail_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private string FirstName_bfield;
		
		private bool IsVirtual_bfield;
		
		private string LastName_bfield;
		
		private string[] Licences_bfield;
		
		private string Status_bfield;
		
		private long TaskPendingId_bfield;
		
		private string UsageLocation_bfield;
		
		/// <summary>
		/// Email used to activate Microsoft Office
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Email used to activate Microsoft Office&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("activationEmail")]
		public string ActivationEmail {
			get {
				return this.ActivationEmail_bfield;
			}
			set {
				this.ActivationEmail_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether or not this user slot will be resigned at the next renew period
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether or not this user slot will be resigned at the next renew period&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// User's first name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;User's first name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// Specify if the user is actually a user slot (configureme) or a real user
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Specify if the user is actually a user slot (configureme) or a real user&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isVirtual")]
		public bool IsVirtual {
			get {
				return this.IsVirtual_bfield;
			}
			set {
				this.IsVirtual_bfield = value;
			}
		}
		
		/// <summary>
		/// User's last name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;User's last name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// Licenses attributed to the user
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.office.LicenceEnum[]&quot;,&quot;Description&quot;:&quot;Licenses attributed to the user&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("licences")]
		public string[] Licences {
			get {
				return this.Licences_bfield;
			}
			set {
				this.Licences_bfield = value;
			}
		}
		
		/// <summary>
		/// User state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.office.UserStateEnum&quot;,&quot;Description&quot;:&quot;User state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// ISO 3166-1 alpha-2 country code where the user is using Office365 services
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;coreTypes.CountryEnum&quot;,&quot;Description&quot;:&quot;ISO 3166-1 alpha-2 country code where the user is using Office365 services&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("usageLocation")]
		public string UsageLocation {
			get {
				return this.UsageLocation_bfield;
			}
			set {
				this.UsageLocation_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// License usage statistic.
	/// </summary>
	public class LicenseofficeStatistic {
		
		private long Available_bfield;
		
		private long LicenseId_bfield;
		
		private long Used_bfield;
		
		/// <summary>
		/// Number of available seats in the subscription
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Number of available seats in the subscription&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("available")]
		public long Available {
			get {
				return this.Available_bfield;
			}
			set {
				this.Available_bfield = value;
			}
		}
		
		/// <summary>
		/// License type's unique identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;License type's unique identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("licenseId")]
		public long LicenseId {
			get {
				return this.LicenseId_bfield;
			}
			set {
				this.LicenseId_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of used seats in the subscription
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Number of used seats in the subscription&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("used")]
		public long Used {
			get {
				return this.Used_bfield;
			}
			set {
				this.Used_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// License usage statistics.
	/// </summary>
	public class LicenseofficeStatistics {
		
		private string Date_bfield;
		
		private string[] Lines_bfield;
		
		/// <summary>
		/// Date of the statistics.
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:&quot;Date of the statistics.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("date")]
		public string Date {
			get {
				return this.Date_bfield;
			}
			set {
				this.Date_bfield = value;
			}
		}
		
		/// <summary>
		/// List of lines associated to this statistics entity.
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.office.StatisticsLine[]&quot;,&quot;Description&quot;:&quot;List of lines associated to this statistics entity.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lines")]
		public string[] Lines {
			get {
				return this.Lines_bfield;
			}
			set {
				this.Lines_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// License usage statistics line.
	/// </summary>
	public class LicenseofficeStatisticsLine {
		
		private long EndOfDayCount_bfield;
		
		private string LicenceType_bfield;
		
		private long PeakCount_bfield;
		
		/// <summary>
		/// Count of activated licenses at the end of the day.
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Count of activated licenses at the end of the day.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("endOfDayCount")]
		public long EndOfDayCount {
			get {
				return this.EndOfDayCount_bfield;
			}
			set {
				this.EndOfDayCount_bfield = value;
			}
		}
		
		/// <summary>
		/// Type of the Office license.
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.office.LicenceEnum&quot;,&quot;Description&quot;:&quot;Type of the Office license.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("licenceType")]
		public string LicenceType {
			get {
				return this.LicenceType_bfield;
			}
			set {
				this.LicenceType_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum count of simultaneous activated licences.
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum count of simultaneous activated licences.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("peakCount")]
		public long PeakCount {
			get {
				return this.PeakCount_bfield;
			}
			set {
				this.PeakCount_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
