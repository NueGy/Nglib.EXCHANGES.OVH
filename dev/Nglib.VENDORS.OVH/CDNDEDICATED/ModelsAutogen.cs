//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/cdn/dedicated"  string[]--
//[GET] "/cdn/dedicated/pops"  string[]--
//[GET] "/cdn/dedicated/pops/{name}"  cdnanycast.Pop--name
//[GET] "/cdn/dedicated/{serviceName}"  cdnanycast.Anycast--serviceName
//[POST] "/cdn/dedicated/{serviceName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains"  string[]--serviceName
//[POST] "/cdn/dedicated/{serviceName}/domains"  cdnanycast.Domain--domain,serviceName
//[DELETE] "/cdn/dedicated/{serviceName}/domains/{domain}"  cdnanycast.Task--domain,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}"  cdnanycast.Domain--domain,serviceName
//[PUT] "/cdn/dedicated/{serviceName}/domains/{domain}"  void--,domain,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/backends"  ipv4[]--domain,serviceName
//[POST] "/cdn/dedicated/{serviceName}/domains/{domain}/backends"  cdnanycast.Backend--domain,ip,serviceName
//[DELETE] "/cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}"  ipv4--domain,ip,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/backends/{ip}"  cdnanycast.Backend--domain,ip,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules"  long[]--domain,fileMatch,serviceName
//[POST] "/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules"  cdnanycast.CacheRule--cacheType,domain,fileMatch,fileType,serviceName,ttl
//[DELETE] "/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}"  cdnanycast.Task--cacheRuleId,domain,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}"  cdnanycast.CacheRule--cacheRuleId,domain,serviceName
//[PUT] "/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}"  void--,cacheRuleId,domain,serviceName
//[POST] "/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/flush"  cdnanycast.Task--cacheRuleId,domain,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks"  long[]--cacheRuleId,domain,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/cacheRules/{cacheRuleId}/tasks/{taskId}"  cdnanycast.Task--cacheRuleId,domain,serviceName,taskId
//[POST] "/cdn/dedicated/{serviceName}/domains/{domain}/flush"  cdnanycast.Task--domain,serviceName
//[POST] "/cdn/dedicated/{serviceName}/domains/{domain}/logs"  cdnanycast.LogsURL--domain,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/statistics"  cdnanycast.StatsDataType[]--domain,period,serviceName,type,value
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/tasks"  long[]--domain,serviceName
//[GET] "/cdn/dedicated/{serviceName}/domains/{domain}/tasks/{taskId}"  cdnanycast.Task--domain,serviceName,taskId
//[POST] "/cdn/dedicated/{serviceName}/logs"  cdnanycast.LogsURL--serviceName
//[GET] "/cdn/dedicated/{serviceName}/quota"  cdnanycast.StatsDataType[]--period,serviceName
//[GET] "/cdn/dedicated/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/cdn/dedicated/{serviceName}/serviceInfos"  void--,serviceName
//[DELETE] "/cdn/dedicated/{serviceName}/ssl"  cdnanycast.Task--serviceName
//[GET] "/cdn/dedicated/{serviceName}/ssl"  cdnanycast.Ssl--serviceName
//[POST] "/cdn/dedicated/{serviceName}/ssl"  cdnanycast.Ssl--certificate,chain,key,name,serviceName
//[GET] "/cdn/dedicated/{serviceName}/ssl/tasks"  long[]--function,serviceName,status
//[GET] "/cdn/dedicated/{serviceName}/ssl/tasks/{taskId}"  cdnanycast.Task--serviceName,taskId
//[POST] "/cdn/dedicated/{serviceName}/ssl/update"  cdnanycast.Task--certificate,chain,key,serviceName
namespace Nglib.VENDORS.OVH.CDNDEDICATED {
	
	
	/// <summary>
	/// All type a cache can be in
	/// </summary>
	public enum CdnanycastCacheRuleCacheTypeEnum {
		
		[EnumMember(Value="forceCache")]
		ForceCache,
		
		[EnumMember(Value="noCache")]
		NoCache,
	}
	
	/// <summary>
	/// All states an anycast pool can be in
	/// </summary>
	public enum CdnanycastCacheRuleFileTypeEnum {
		
		[EnumMember(Value="extension")]
		Extension,
		
		[EnumMember(Value="file")]
		File,
		
		[EnumMember(Value="folder")]
		Folder,
	}
	
	/// <summary>
	/// All states a status can be in
	/// </summary>
	public enum CdnanycastCacheRuleStatusEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="off")]
		Off,
		
		[EnumMember(Value="on")]
		On,
		
		[EnumMember(Value="updating")]
		Updating,
	}
	
	/// <summary>
	/// All states a status can be in
	/// </summary>
	public enum CdnanycastDomainStatusEnum {
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="off")]
		Off,
		
		[EnumMember(Value="on")]
		On,
		
		[EnumMember(Value="removing")]
		Removing,
	}
	
	/// <summary>
	/// All type of Domain
	/// </summary>
	public enum CdnanycastDomainTypeEnum {
		
		[EnumMember(Value="plain")]
		Plain,
		
		[EnumMember(Value="ssl")]
		Ssl,
	}
	
	/// <summary>
	/// All Pop status
	/// </summary>
	public enum CdnanycastPopStatusEnum {
		
		[EnumMember(Value="down")]
		Down,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="rerouted")]
		Rerouted,
		
		[EnumMember(Value="unknown")]
		Unknown,
	}
	
	/// <summary>
	/// All states a CDN SSL can be in
	/// </summary>
	public enum CdnanycastSslStateEnum {
		
		[EnumMember(Value="checking")]
		Checking,
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="off")]
		Off,
		
		[EnumMember(Value="on")]
		On,
		
		[EnumMember(Value="removing")]
		Removing,
		
		[EnumMember(Value="updating")]
		Updating,
		
		[EnumMember(Value="uploading")]
		Uploading,
	}
	
	/// <summary>
	/// Period of the statistics
	/// </summary>
	public enum CdnanycastStatsPeriodEnum {
		
		[EnumMember(Value="day")]
		Day,
		
		[EnumMember(Value="month")]
		Month,
		
		[EnumMember(Value="week")]
		Week,
	}
	
	/// <summary>
	/// Type of statistics related to cache
	/// </summary>
	public enum CdnanycastStatsTypeEnum {
		
		[EnumMember(Value="backend")]
		Backend,
		
		[EnumMember(Value="cdn")]
		Cdn,
		
		[EnumMember(Value="threat")]
		Threat,
	}
	
	/// <summary>
	/// Value bandwidth or request
	/// </summary>
	public enum CdnanycastStatsValueEnum {
		
		[EnumMember(Value="bandwidth")]
		Bandwidth,
		
		[EnumMember(Value="request")]
		Request,
	}
	
	/// <summary>
	/// All function CDN task can be
	/// </summary>
	public enum CdnanycastTaskFunctionEnum {
		
		[EnumMember(Value="flush")]
		Flush,
		
		[EnumMember(Value="flushAll")]
		FlushAll,
		
		[EnumMember(Value="generateSsl")]
		GenerateSsl,
		
		[EnumMember(Value="installSsl")]
		InstallSsl,
		
		[EnumMember(Value="reinstallSsl")]
		ReinstallSsl,
		
		[EnumMember(Value="removeDomain")]
		RemoveDomain,
		
		[EnumMember(Value="uninstallSsl")]
		UninstallSsl,
		
		[EnumMember(Value="updateCacheRule")]
		UpdateCacheRule,
	}
	
	/// <summary>
	/// All states a CDN task can be in
	/// </summary>
	public enum CdnanycastTaskStateEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// Anycast IP of a CDN customer
	/// </summary>
	public class CdnanycastAnycast {
		
		private string Anycast_bfield;
		
		private long BackendLimit_bfield;
		
		private long BackendUse_bfield;
		
		private long CacheRuleLimitPerDomain_bfield;
		
		private System.Nullable<System.DateTime> LastQuotaOrder_bfield;
		
		private string LogUrl_bfield;
		
		private string Offer_bfield;
		
		private long Quota_bfield;
		
		private string Service_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("anycast")]
		public string Anycast {
			get {
				return this.Anycast_bfield;
			}
			set {
				this.Anycast_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("backendLimit")]
		public long BackendLimit {
			get {
				return this.BackendLimit_bfield;
			}
			set {
				this.BackendLimit_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("backendUse")]
		public long BackendUse {
			get {
				return this.BackendUse_bfield;
			}
			set {
				this.BackendUse_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cacheRuleLimitPerDomain")]
		public long CacheRuleLimitPerDomain {
			get {
				return this.CacheRuleLimitPerDomain_bfield;
			}
			set {
				this.CacheRuleLimitPerDomain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastQuotaOrder")]
		public System.Nullable<System.DateTime> LastQuotaOrder {
			get {
				return this.LastQuotaOrder_bfield;
			}
			set {
				this.LastQuotaOrder_bfield = value;
			}
		}
		
		/// <summary>
		/// URL for downloading daily log of your CDN
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;URL for downloading daily log of your CDN&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("logUrl")]
		public string LogUrl {
			get {
				return this.LogUrl_bfield;
			}
			set {
				this.LogUrl_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("quota")]
		public long Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// The internal name of your CDN offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The internal name of your CDN offer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("service")]
		public string Service {
			get {
				return this.Service_bfield;
			}
			set {
				this.Service_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Backend for a domain
	/// </summary>
	public class CdnanycastBackend {
		
		private string Ip_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// CacheRules for a domain
	/// </summary>
	public class CdnanycastCacheRule {
		
		private long CacheRuleId_bfield;
		
		private string CacheType_bfield;
		
		private string Domain_bfield;
		
		private string FileMatch_bfield;
		
		private string FileType_bfield;
		
		private string Status_bfield;
		
		private long Ttl_bfield;
		
		/// <summary>
		/// Id for this cache rule
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id for this cache rule&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cacheRuleId")]
		public long CacheRuleId {
			get {
				return this.CacheRuleId_bfield;
			}
			set {
				this.CacheRuleId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.CacheRuleCacheTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cacheType")]
		public string CacheType {
			get {
				return this.CacheType_bfield;
			}
			set {
				this.CacheType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("fileMatch")]
		public string FileMatch {
			get {
				return this.FileMatch_bfield;
			}
			set {
				this.FileMatch_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.CacheRuleFileTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("fileType")]
		public string FileType {
			get {
				return this.FileType_bfield;
			}
			set {
				this.FileType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.CacheRuleStatusEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ttl")]
		public long Ttl {
			get {
				return this.Ttl_bfield;
			}
			set {
				this.Ttl_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Domain on CDN
	/// </summary>
	public class CdnanycastDomain {
		
		private long CacheRuleUse_bfield;
		
		private string Cname_bfield;
		
		private string Domain_bfield;
		
		private string Status_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cacheRuleUse")]
		public long CacheRuleUse {
			get {
				return this.CacheRuleUse_bfield;
			}
			set {
				this.CacheRuleUse_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cname")]
		public string Cname {
			get {
				return this.Cname_bfield;
			}
			set {
				this.Cname_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain of this object
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain of this object&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.DomainStatusEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.DomainTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// URL to real time logs
	/// </summary>
	public class CdnanycastLogsURL {
		
		private System.DateTime ExpirationDate_bfield;
		
		private string Url_bfield;
		
		/// <summary>
		/// URL expiration date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;URL expiration date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("expirationDate")]
		public System.DateTime ExpirationDate {
			get {
				return this.ExpirationDate_bfield;
			}
			set {
				this.ExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// URL to logs
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;URL to logs&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("url")]
		public string Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// CDN Pop
	/// </summary>
	public class CdnanycastPop {
		
		private string City_bfield;
		
		private string Comment_bfield;
		
		private string Name_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("city")]
		public string City {
			get {
				return this.City_bfield;
			}
			set {
				this.City_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("comment")]
		public string Comment {
			get {
				return this.Comment_bfield;
			}
			set {
				this.Comment_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the pop
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the pop&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.PopStatusEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// CDN Ssl
	/// </summary>
	public class CdnanycastSsl {
		
		private string CertificateProvider_bfield;
		
		private System.Nullable<System.DateTime> CertificateValidFrom_bfield;
		
		private System.Nullable<System.DateTime> CertificateValidTo_bfield;
		
		private string Cn_bfield;
		
		private string Name_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Provider of the certificate installed on CDN
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Provider of the certificate installed on CDN&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("certificateProvider")]
		public string CertificateProvider {
			get {
				return this.CertificateProvider_bfield;
			}
			set {
				this.CertificateProvider_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("certificateValidFrom")]
		public System.Nullable<System.DateTime> CertificateValidFrom {
			get {
				return this.CertificateValidFrom_bfield;
			}
			set {
				this.CertificateValidFrom_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("certificateValidTo")]
		public System.Nullable<System.DateTime> CertificateValidTo {
			get {
				return this.CertificateValidTo_bfield;
			}
			set {
				this.CertificateValidTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cn")]
		public string Cn {
			get {
				return this.Cn_bfield;
			}
			set {
				this.Cn_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.SslStateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A structure describing type of a stats hash
	/// </summary>
	public class CdnanycastStatsDataType {
		
		private System.DateTime Date_bfield;
		
		private System.Nullable<long> Value_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("date")]
		public System.DateTime Date {
			get {
				return this.Date_bfield;
			}
			set {
				this.Date_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("value")]
		public System.Nullable<long> Value {
			get {
				return this.Value_bfield;
			}
			set {
				this.Value_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Task on a CDN
	/// </summary>
	public class CdnanycastTask {
		
		private string Comment_bfield;
		
		private string Function_bfield;
		
		private string Status_bfield;
		
		private long TaskId_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("comment")]
		public string Comment {
			get {
				return this.Comment_bfield;
			}
			set {
				this.Comment_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.TaskFunctionEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;cdnanycast.TaskStateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskId")]
		public long TaskId {
			get {
				return this.TaskId_bfield;
			}
			set {
				this.TaskId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
