//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/sslGateway"  string[]--
//[GET] "/sslGateway/availableZones"  string[]--
//[GET] "/sslGateway/eligibility"  sslGateway.EligibilityStatus--domain
//[GET] "/sslGateway/{serviceName}"  sslGateway.SslGateway--serviceName
//[PUT] "/sslGateway/{serviceName}"  void--,serviceName
//[POST] "/sslGateway/{serviceName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,serviceName
//[POST] "/sslGateway/{serviceName}/confirmTermination"  string--commentary,futureUse,reason,serviceName,token
//[GET] "/sslGateway/{serviceName}/domain"  long[]--serviceName
//[POST] "/sslGateway/{serviceName}/domain"  sslGateway.Domain--domain,serviceName
//[DELETE] "/sslGateway/{serviceName}/domain/{id}"  void--id,serviceName
//[GET] "/sslGateway/{serviceName}/domain/{id}"  sslGateway.Domain--id,serviceName
//[GET] "/sslGateway/{serviceName}/natIp"  sslGateway.NatIps[]--serviceName
//[POST] "/sslGateway/{serviceName}/renewCertificate"  string[]--domain,serviceName
//[GET] "/sslGateway/{serviceName}/server"  long[]--serviceName
//[POST] "/sslGateway/{serviceName}/server"  sslGateway.Server--address,port,serviceName
//[DELETE] "/sslGateway/{serviceName}/server/{id}"  void--id,serviceName
//[GET] "/sslGateway/{serviceName}/server/{id}"  sslGateway.Server--id,serviceName
//[PUT] "/sslGateway/{serviceName}/server/{id}"  void--,id,serviceName
//[GET] "/sslGateway/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/sslGateway/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/sslGateway/{serviceName}/task"  long[]--serviceName
//[GET] "/sslGateway/{serviceName}/task/{id}"  sslGateway.Task--id,serviceName
//[POST] "/sslGateway/{serviceName}/terminate"  string--serviceName
namespace Nglib.VENDORS.OVH.SSLGATEWAY {
	
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// All future uses you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationFutureUseEnum {
		
		[EnumMember(Value="NOT_REPLACING_SERVICE")]
		NOT_REPLACING_SERVICE,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="SUBSCRIBE_AN_OTHER_SERVICE")]
		SUBSCRIBE_AN_OTHER_SERVICE,
		
		[EnumMember(Value="SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR,
		
		[EnumMember(Value="SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR,
	}
	
	/// <summary>
	/// All reasons you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationReasonEnum {
		
		[EnumMember(Value="FEATURES_DONT_SUIT_ME")]
		FEATURES_DONT_SUIT_ME,
		
		[EnumMember(Value="LACK_OF_PERFORMANCES")]
		LACK_OF_PERFORMANCES,
		
		[EnumMember(Value="MIGRATED_TO_ANOTHER_OVH_PRODUCT")]
		MIGRATED_TO_ANOTHER_OVH_PRODUCT,
		
		[EnumMember(Value="MIGRATED_TO_COMPETITOR")]
		MIGRATED_TO_COMPETITOR,
		
		[EnumMember(Value="NOT_ENOUGH_RECOGNITION")]
		NOT_ENOUGH_RECOGNITION,
		
		[EnumMember(Value="NOT_NEEDED_ANYMORE")]
		NOT_NEEDED_ANYMORE,
		
		[EnumMember(Value="NOT_RELIABLE")]
		NOT_RELIABLE,
		
		[EnumMember(Value="NO_ANSWER")]
		NO_ANSWER,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="PRODUCT_DIMENSION_DONT_SUIT_ME")]
		PRODUCT_DIMENSION_DONT_SUIT_ME,
		
		[EnumMember(Value="PRODUCT_TOOLS_DONT_SUIT_ME")]
		PRODUCT_TOOLS_DONT_SUIT_ME,
		
		[EnumMember(Value="TOO_EXPENSIVE")]
		TOO_EXPENSIVE,
		
		[EnumMember(Value="TOO_HARD_TO_USE")]
		TOO_HARD_TO_USE,
		
		[EnumMember(Value="UNSATIFIED_BY_CUSTOMER_SUPPORT")]
		UNSATIFIED_BY_CUSTOMER_SUPPORT,
	}
	
	/// <summary>
	/// Possible values for SSL Gateway domain state
	/// </summary>
	public enum SslGatewayDomainStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleted")]
		Deleted,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="http-only")]
		Http_only,
		
		[EnumMember(Value="internal")]
		Internal,
		
		[EnumMember(Value="ok")]
		Ok,
	}
	
	/// <summary>
	/// List of SSL Gateway offers
	/// </summary>
	public enum SslGatewayOfferEnum {
		
		[EnumMember(Value="advanced")]
		Advanced,
		
		[EnumMember(Value="enterprise")]
		Enterprise,
		
		[EnumMember(Value="free")]
		Free,
		
		[EnumMember(Value="internal")]
		Internal,
	}
	
	/// <summary>
	/// Possible values for SSL Gateway server state
	/// </summary>
	public enum SslGatewayServerStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleted")]
		Deleted,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="internal")]
		Internal,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="updating")]
		Updating,
	}
	
	/// <summary>
	/// Possible values for ssl ciphers
	/// </summary>
	public enum SslGatewaySslConfigurationEnum {
		
		[EnumMember(Value="intermediate")]
		Intermediate,
		
		[EnumMember(Value="internal")]
		Internal,
		
		[EnumMember(Value="modern")]
		Modern,
	}
	
	/// <summary>
	/// Possible values for SSL Gateway state
	/// </summary>
	public enum SslGatewayStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleted")]
		Deleted,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="http-only")]
		Http_only,
		
		[EnumMember(Value="internal")]
		Internal,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="suspended")]
		Suspended,
		
		[EnumMember(Value="upgrading")]
		Upgrading,
	}
	
	/// <summary>
	/// Possible task action
	/// </summary>
	public enum SslGatewayTaskActionEnum {
		
		[EnumMember(Value="addDomain")]
		AddDomain,
		
		[EnumMember(Value="addPaidCertificate")]
		AddPaidCertificate,
		
		[EnumMember(Value="addServer")]
		AddServer,
		
		[EnumMember(Value="createService")]
		CreateService,
		
		[EnumMember(Value="deleteDomain")]
		DeleteDomain,
		
		[EnumMember(Value="deleteServer")]
		DeleteServer,
		
		[EnumMember(Value="deleteService")]
		DeleteService,
		
		[EnumMember(Value="internalTask")]
		InternalTask,
		
		[EnumMember(Value="updateServer")]
		UpdateServer,
		
		[EnumMember(Value="updateService")]
		UpdateService,
		
		[EnumMember(Value="upgrade")]
		Upgrade,
	}
	
	/// <summary>
	/// Possible task status
	/// </summary>
	public enum SslGatewayTaskStatusEnum {
		
		[EnumMember(Value="blocked")]
		Blocked,
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="paused")]
		Paused,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Domain attached to an SSL Gateway
	/// </summary>
	public class SslGatewayDomain {
		
		private string Domain_bfield;
		
		private long Id_bfield;
		
		private string State_bfield;
		
		/// <summary>
		/// Domain name attached to your SSL Gateway
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name attached to your SSL Gateway&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your domain&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;sslGateway.DomainStateEnum&quot;,&quot;Description&quot;:&quot;Domain state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A structure describing the eligibility status of a domain
	/// </summary>
	public class SslGatewayEligibilityStatus {
		
		private string Domain_bfield;
		
		private string[] Ip6s_bfield;
		
		private string[] Ips_bfield;
		
		private bool IsHostedByOvh_bfield;
		
		/// <summary>
		/// Customer domain name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Customer domain name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// Eligible IP(s) v6 for this domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv6[]&quot;,&quot;Description&quot;:&quot;Eligible IP(s) v6 for this domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ip6s")]
		public string[] Ip6s {
			get {
				return this.Ip6s_bfield;
			}
			set {
				this.Ip6s_bfield = value;
			}
		}
		
		/// <summary>
		/// Eligible IP(s) for this domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4[]&quot;,&quot;Description&quot;:&quot;Eligible IP(s) for this domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ips")]
		public string[] Ips {
			get {
				return this.Ips_bfield;
			}
			set {
				this.Ips_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether this domain is hosted by Ovh or not
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether this domain is hosted by Ovh or not&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("isHostedByOvh")]
		public bool IsHostedByOvh {
			get {
				return this.IsHostedByOvh_bfield;
			}
			set {
				this.IsHostedByOvh_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// a list of {zone, nat Ip}
	/// </summary>
	public class SslGatewayNatIps {
		
		private string[] Ip_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ip")]
		public string[] Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Server attached to an SSL Gateway
	/// </summary>
	public class SslGatewayServer {
		
		private string Address_bfield;
		
		private long Id_bfield;
		
		private long Port_bfield;
		
		private string State_bfield;
		
		/// <summary>
		/// IP address of the server attached to your SSL Gateway
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;IP address of the server attached to your SSL Gateway&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("address")]
		public string Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of your server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of your server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Port of your server attached to your SSL Gateway
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port of your server attached to your SSL Gateway&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public long Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
		
		/// <summary>
		/// Server state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;sslGateway.ServerStateEnum&quot;,&quot;Description&quot;:&quot;Server state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Your SSL Gateway
	/// </summary>
	public class SslGatewaySslGateway {
		
		private string[] AllowedSource_bfield;
		
		private string DisplayName_bfield;
		
		private bool Hsts_bfield;
		
		private bool HttpsRedirect_bfield;
		
		private string Ipv4_bfield;
		
		private string Ipv6_bfield;
		
		private string MetricsToken_bfield;
		
		private string Offer_bfield;
		
		private string Reverse_bfield;
		
		private bool ServerHttps_bfield;
		
		private string ServiceName_bfield;
		
		private string SslConfiguration_bfield;
		
		private string State_bfield;
		
		private string[] Zones_bfield;
		
		/// <summary>
		/// Restrict SSL Gateway access to these ip block. No restriction if null
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipBlock[]&quot;,&quot;Description&quot;:&quot;Restrict SSL Gateway access to these ip block. No restriction if null&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("allowedSource")]
		public string[] AllowedSource {
			get {
				return this.AllowedSource_bfield;
			}
			set {
				this.AllowedSource_bfield = value;
			}
		}
		
		/// <summary>
		/// Custom name of your SSL Gateway
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Custom name of your SSL Gateway&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Set to true to enable Strict-Transport-Security HTTP header
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Set to true to enable Strict-Transport-Security HTTP header&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hsts")]
		public bool Hsts {
			get {
				return this.Hsts_bfield;
			}
			set {
				this.Hsts_bfield = value;
			}
		}
		
		/// <summary>
		/// Set to true to enable https redirect
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Set to true to enable https redirect&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("httpsRedirect")]
		public bool HttpsRedirect {
			get {
				return this.HttpsRedirect_bfield;
			}
			set {
				this.HttpsRedirect_bfield = value;
			}
		}
		
		/// <summary>
		/// The IPv4 you need to put in the A field of your domain name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;The IPv4 you need to put in the A field of your domain name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ipv4")]
		public string Ipv4 {
			get {
				return this.Ipv4_bfield;
			}
			set {
				this.Ipv4_bfield = value;
			}
		}
		
		/// <summary>
		/// The IPv6 you need to put in the AAAA field of your domain name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipv6&quot;,&quot;Description&quot;:&quot;The IPv6 you need to put in the AAAA field of your domain name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ipv6")]
		public string Ipv6 {
			get {
				return this.Ipv6_bfield;
			}
			set {
				this.Ipv6_bfield = value;
			}
		}
		
		/// <summary>
		/// The metrics token associated with your SSL Gateway
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The metrics token associated with your SSL Gateway&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("metricsToken")]
		public string MetricsToken {
			get {
				return this.MetricsToken_bfield;
			}
			set {
				this.MetricsToken_bfield = value;
			}
		}
		
		/// <summary>
		/// Current offer for your SSL Gateway
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;sslGateway.OfferEnum&quot;,&quot;Description&quot;:&quot;Current offer for your SSL Gateway&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// Custom reverse for your SSL Gateway
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Custom reverse for your SSL Gateway&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("reverse")]
		public string Reverse {
			get {
				return this.Reverse_bfield;
			}
			set {
				this.Reverse_bfield = value;
			}
		}
		
		/// <summary>
		/// Set to true to contact backend servers over HTTPS
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Set to true to contact backend servers over HTTPS&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("serverHttps")]
		public bool ServerHttps {
			get {
				return this.ServerHttps_bfield;
			}
			set {
				this.ServerHttps_bfield = value;
			}
		}
		
		/// <summary>
		/// The internal name of your SSL Gateway
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The internal name of your SSL Gateway&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceName")]
		public string ServiceName {
			get {
				return this.ServiceName_bfield;
			}
			set {
				this.ServiceName_bfield = value;
			}
		}
		
		/// <summary>
		/// Modern oldest compatible clients : Firefox 27, Chrome 30, IE 11 on Windows 7, Edge, Opera 17, Safari 9, Android 5.0, and Java 8. Intermediate oldest compatible clients : Firefox 1, Chrome 1, IE 7, Opera 5, Safari 1, Windows XP IE8, Android 2.3, Java 7. Intermediate if null.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;sslGateway.SslConfigurationEnum&quot;,&quot;Description&quot;:&quot;Modern oldest compatible clients : Firefox 27, Chrome 30, IE 11 on Windows 7, Edge, Opera 17, Safari 9, Android 5.0, and Java 8. Intermediate oldest compatible clients : Firefox 1, Chrome 1, IE 7, Opera 5, Safari 1, Windows XP IE8, Android 2.3, Java 7. Intermediate if null.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("sslConfiguration")]
		public string SslConfiguration {
			get {
				return this.SslConfiguration_bfield;
			}
			set {
				this.SslConfiguration_bfield = value;
			}
		}
		
		/// <summary>
		/// Current state of your SSL Gateway
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;sslGateway.StateEnum&quot;,&quot;Description&quot;:&quot;Current state of your SSL Gateway&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Zones of your SSL Gateway
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Zones of your SSL Gateway&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zones")]
		public string[] Zones {
			get {
				return this.Zones_bfield;
			}
			set {
				this.Zones_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// SSL Gateway tasks
	/// </summary>
	public class SslGatewayTask {
		
		private string Action_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long Id_bfield;
		
		private long Progress_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// The action made
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;sslGateway.TaskActionEnum&quot;,&quot;Description&quot;:&quot;The action made&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("action")]
		public string Action {
			get {
				return this.Action_bfield;
			}
			set {
				this.Action_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date of your task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date of your task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Task progress percentage
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task progress percentage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("progress")]
		public long Progress {
			get {
				return this.Progress_bfield;
			}
			set {
				this.Progress_bfield = value;
			}
		}
		
		/// <summary>
		/// Current status of your task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;sslGateway.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;Current status of your task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
