//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/kube"  string[]--
//[GET] "/kube/{serviceName}"  kube.Cluster--serviceName
//[PUT] "/kube/{serviceName}"  void--name,serviceName
//[POST] "/kube/{serviceName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,serviceName
//[POST] "/kube/{serviceName}/confirmTermination"  string--commentary,futureUse,reason,serviceName,token
//[GET] "/kube/{serviceName}/kubeconfig"  kube.Kubeconfig--serviceName
//[GET] "/kube/{serviceName}/publiccloud/node"  kube.Node[]--serviceName
//[POST] "/kube/{serviceName}/publiccloud/node"  kube.Node--flavorName,name,serviceName
//[DELETE] "/kube/{serviceName}/publiccloud/node/{nodeId}"  void--nodeId,serviceName
//[GET] "/kube/{serviceName}/publiccloud/node/{nodeId}"  kube.Node--nodeId,serviceName
//[GET] "/kube/{serviceName}/publiccloud/project"  kube.PublicCloudProject--serviceName
//[POST] "/kube/{serviceName}/reset"  void--serviceName,version,workerNodesPolicy
//[GET] "/kube/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/kube/{serviceName}/serviceInfos"  void--,serviceName
//[POST] "/kube/{serviceName}/terminate"  string--serviceName
//[POST] "/kube/{serviceName}/update"  void--serviceName
//[PUT] "/kube/{serviceName}/updatePolicy"  void--serviceName,updatePolicy
namespace Nglib.VENDORS.OVH.KUBE {
	
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// All future uses you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationFutureUseEnum {
		
		[EnumMember(Value="NOT_REPLACING_SERVICE")]
		NOT_REPLACING_SERVICE,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="SUBSCRIBE_AN_OTHER_SERVICE")]
		SUBSCRIBE_AN_OTHER_SERVICE,
		
		[EnumMember(Value="SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR,
		
		[EnumMember(Value="SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR,
	}
	
	/// <summary>
	/// All reasons you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationReasonEnum {
		
		[EnumMember(Value="FEATURES_DONT_SUIT_ME")]
		FEATURES_DONT_SUIT_ME,
		
		[EnumMember(Value="LACK_OF_PERFORMANCES")]
		LACK_OF_PERFORMANCES,
		
		[EnumMember(Value="MIGRATED_TO_ANOTHER_OVH_PRODUCT")]
		MIGRATED_TO_ANOTHER_OVH_PRODUCT,
		
		[EnumMember(Value="MIGRATED_TO_COMPETITOR")]
		MIGRATED_TO_COMPETITOR,
		
		[EnumMember(Value="NOT_ENOUGH_RECOGNITION")]
		NOT_ENOUGH_RECOGNITION,
		
		[EnumMember(Value="NOT_NEEDED_ANYMORE")]
		NOT_NEEDED_ANYMORE,
		
		[EnumMember(Value="NOT_RELIABLE")]
		NOT_RELIABLE,
		
		[EnumMember(Value="NO_ANSWER")]
		NO_ANSWER,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="PRODUCT_DIMENSION_DONT_SUIT_ME")]
		PRODUCT_DIMENSION_DONT_SUIT_ME,
		
		[EnumMember(Value="PRODUCT_TOOLS_DONT_SUIT_ME")]
		PRODUCT_TOOLS_DONT_SUIT_ME,
		
		[EnumMember(Value="TOO_EXPENSIVE")]
		TOO_EXPENSIVE,
		
		[EnumMember(Value="TOO_HARD_TO_USE")]
		TOO_HARD_TO_USE,
		
		[EnumMember(Value="UNSATIFIED_BY_CUSTOMER_SUPPORT")]
		UNSATIFIED_BY_CUSTOMER_SUPPORT,
	}
	
	/// <summary>
	/// Managed Kubernetes cluster description
	/// </summary>
	public class KubeCluster {
		
		private bool ControlPlaneIsUpToDate_bfield;
		
		private System.DateTime CreatedAt_bfield;
		
		private string Id_bfield;
		
		private bool IsUpToDate_bfield;
		
		private string Name_bfield;
		
		private string NodesUrl_bfield;
		
		private KubeClusterStatus Status_bfield;
		
		private string UpdatePolicy_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		private string Url_bfield;
		
		private string Version_bfield;
		
		/// <summary>
		/// True if control-plane is up to date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;True if control-plane is up to date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("controlPlaneIsUpToDate")]
		public bool ControlPlaneIsUpToDate {
			get {
				return this.ControlPlaneIsUpToDate_bfield;
			}
			set {
				this.ControlPlaneIsUpToDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Cluster creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Cluster creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// Cluster ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Cluster ID&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// True if all nodes and control-plane are up to date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;True if all nodes and control-plane are up to date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isUpToDate")]
		public bool IsUpToDate {
			get {
				return this.IsUpToDate_bfield;
			}
			set {
				this.IsUpToDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Cluster name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Cluster name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Cluster nodes URL
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Cluster nodes URL&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("nodesUrl")]
		public string NodesUrl {
			get {
				return this.NodesUrl_bfield;
			}
			set {
				this.NodesUrl_bfield = value;
			}
		}
		
		/// <summary>
		/// Cluster status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;kube.ClusterStatus&quot;,&quot;Description&quot;:&quot;Cluster status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public KubeClusterStatus Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Cluster last update date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Cluster last update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatePolicy")]
		public string UpdatePolicy {
			get {
				return this.UpdatePolicy_bfield;
			}
			set {
				this.UpdatePolicy_bfield = value;
			}
		}
		
		/// <summary>
		/// Cluster last update date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Cluster last update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// Management URL of your cluster
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Management URL of your cluster&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("url")]
		public string Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
		
		/// <summary>
		/// Kubernetes version of your cluster
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Kubernetes version of your cluster&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("version")]
		public string Version {
			get {
				return this.Version_bfield;
			}
			set {
				this.Version_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Enum values for Status
	/// </summary>
	public class KubeClusterStatus {
	}
	
	/// <summary>
	/// Kubeconfig description
	/// </summary>
	public class KubeKubeconfig {
		
		private string Content_bfield;
		
		/// <summary>
		/// kubeconfig file
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;password&quot;,&quot;Description&quot;:&quot;kubeconfig file&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("content")]
		public string Content {
			get {
				return this.Content_bfield;
			}
			set {
				this.Content_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Node installed on your cluster
	/// </summary>
	public class KubeNode {
		
		private System.DateTime CreatedAt_bfield;
		
		private string Flavor_bfield;
		
		private string Id_bfield;
		
		private string InstanceId_bfield;
		
		private bool IsUpToDate_bfield;
		
		private string Name_bfield;
		
		private string ProjectId_bfield;
		
		private KubeNodeStatus Status_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		private string Version_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// Public Cloud flavor name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Public Cloud flavor name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("flavor")]
		public string Flavor {
			get {
				return this.Flavor_bfield;
			}
			set {
				this.Flavor_bfield = value;
			}
		}
		
		/// <summary>
		/// Node ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Node ID&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Public Cloud instance id
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Public Cloud instance id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("instanceId")]
		public string InstanceId {
			get {
				return this.InstanceId_bfield;
			}
			set {
				this.InstanceId_bfield = value;
			}
		}
		
		/// <summary>
		/// True if the node is up to date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;True if the node is up to date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isUpToDate")]
		public bool IsUpToDate {
			get {
				return this.IsUpToDate_bfield;
			}
			set {
				this.IsUpToDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Node name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Node name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Public Cloud project ID where the node is started
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Public Cloud project ID where the node is started&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("projectId")]
		public string ProjectId {
			get {
				return this.ProjectId_bfield;
			}
			set {
				this.ProjectId_bfield = value;
			}
		}
		
		/// <summary>
		/// Status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;kube.NodeStatus&quot;,&quot;Description&quot;:&quot;Status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public KubeNodeStatus Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Node last update date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Node last update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// Node version
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Node version&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("version")]
		public string Version {
			get {
				return this.Version_bfield;
			}
			set {
				this.Version_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Enum values for Status
	/// </summary>
	public class KubeNodeStatus {
	}
	
	/// <summary>
	/// Public Cloud project linked to a Kube cluster
	/// </summary>
	public class KubePublicCloudProject {
		
		private string ProjectId_bfield;
		
		private string Region_bfield;
		
		/// <summary>
		/// Public Cloud project ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Public Cloud project ID&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("projectId")]
		public string ProjectId {
			get {
				return this.ProjectId_bfield;
			}
			set {
				this.ProjectId_bfield = value;
			}
		}
		
		/// <summary>
		/// Public Cloud region associated with your cluster
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Public Cloud region associated with your cluster&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("region")]
		public string Region {
			get {
				return this.Region_bfield;
			}
			set {
				this.Region_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Enum values for worker nodes reset policy
	/// </summary>
	public class KubeResetWorkerNodesPolicy {
	}
	
	/// <summary>
	/// Enum values for UpdatePolicy
	/// </summary>
	public class KubeUpdatePolicy {
	}
	
	/// <summary>
	/// List of available versions for installation
	/// </summary>
	public class KubeVersion {
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
