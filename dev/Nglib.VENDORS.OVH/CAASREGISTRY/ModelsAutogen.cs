//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/caas/registry"  string[]--
//[GET] "/caas/registry/{serviceName}"  registry.service--serviceName
//[POST] "/caas/registry/{serviceName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces"  string[]--serviceName
//[POST] "/caas/registry/{serviceName}/namespaces"  registry.namespace--,serviceName
//[DELETE] "/caas/registry/{serviceName}/namespaces/{namespaceId}"  void--namespaceId,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}"  registry.namespace--namespaceId,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images"  string[]--namespaceId,serviceName
//[DELETE] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}"  void--imageId,namespaceId,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}"  registry.image--imageId,namespaceId,serviceName
//[PUT] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}"  registry.image--,imageId,namespaceId,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}/permissions"  string[]--imageId,namespaceId,serviceName
//[POST] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}/permissions"  registry.permissions--,imageId,namespaceId,serviceName
//[DELETE] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}/permissions/{permissionId}"  void--imageId,namespaceId,permissionId,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}/permissions/{permissionId}"  registry.permissions--imageId,namespaceId,permissionId,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}/tags"  string[]--imageId,namespaceId,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}/images/{imageId}/tags/{tagId}"  registry.tag--imageId,namespaceId,serviceName,tagId
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}/permissions"  string[]--namespaceId,serviceName
//[POST] "/caas/registry/{serviceName}/namespaces/{namespaceId}/permissions"  registry.permissions--,namespaceId,serviceName
//[DELETE] "/caas/registry/{serviceName}/namespaces/{namespaceId}/permissions/{permissionId}"  void--namespaceId,permissionId,serviceName
//[GET] "/caas/registry/{serviceName}/namespaces/{namespaceId}/permissions/{permissionId}"  registry.permissions--namespaceId,permissionId,serviceName
//[GET] "/caas/registry/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/caas/registry/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/caas/registry/{serviceName}/users"  string[]--serviceName
//[POST] "/caas/registry/{serviceName}/users"  registry.user--,serviceName
//[DELETE] "/caas/registry/{serviceName}/users/{userId}"  void--serviceName,userId
//[GET] "/caas/registry/{serviceName}/users/{userId}"  registry.user--serviceName,userId
//[POST] "/caas/registry/{serviceName}/users/{userId}/changePassword"  registry.user--serviceName,userId
namespace Nglib.VENDORS.OVH.CAASREGISTRY {
	
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// An image stored in a namespace
	/// </summary>
	public class Registryimage {
		
		private System.DateTime CreatedAt_bfield;
		
		private string Id_bfield;
		
		private string Name_bfield;
		
		private bool Public_bfield;
		
		private Registryimagestatus Status_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The image id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The image id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// The image name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The image name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether is image is public or private
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether is image is public or private&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("public")]
		public bool Public {
			get {
				return this.Public_bfield;
			}
			set {
				this.Public_bfield = value;
			}
		}
		
		/// <summary>
		/// The status of the image
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;registry.image.status&quot;,&quot;Description&quot;:&quot;The status of the image&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public Registryimagestatus Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The status of the image
	/// </summary>
	public class Registryimagestatus {
	}
	
	/// <summary>
	/// A container image
	/// </summary>
	public class RegistryinputImage {
		
		private bool Public_bfield;
		
		/// <summary>
		/// image is public
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;image is public&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("public")]
		public bool Public {
			get {
				return this.Public_bfield;
			}
			set {
				this.Public_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A namespace in which a user can either read, write or delete images
	/// </summary>
	public class RegistryinputNamespace {
		
		private string Name_bfield;
		
		/// <summary>
		/// The namespace name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The namespace name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Permissions of a user over a namespace
	/// </summary>
	public class RegistryinputPermissions {
		
		private bool CanRead_bfield;
		
		private bool CanWrite_bfield;
		
		private bool IsAdmin_bfield;
		
		private Registrypermissionstatus Status_bfield;
		
		private string UserId_bfield;
		
		/// <summary>
		/// Whether a user can read images on the namespace
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether a user can read images on the namespace&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("canRead")]
		public bool CanRead {
			get {
				return this.CanRead_bfield;
			}
			set {
				this.CanRead_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether a user can create images on the namespace
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether a user can create images on the namespace&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("canWrite")]
		public bool CanWrite {
			get {
				return this.CanWrite_bfield;
			}
			set {
				this.CanWrite_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether a user can delete images on the namespace
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether a user can delete images on the namespace&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("isAdmin")]
		public bool IsAdmin {
			get {
				return this.IsAdmin_bfield;
			}
			set {
				this.IsAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// The status of the permission
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;registry.permission.status&quot;,&quot;Description&quot;:&quot;The status of the permission&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public Registrypermissionstatus Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// User Id 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;User Id &quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("userId")]
		public string UserId {
			get {
				return this.UserId_bfield;
			}
			set {
				this.UserId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A registry user account
	/// </summary>
	public class RegistryinputUser {
		
		private string Description_bfield;
		
		/// <summary>
		/// A general description of the user account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;A general description of the user account&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("description")]
		public string Description {
			get {
				return this.Description_bfield;
			}
			set {
				this.Description_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A namespace in which a user can either read, write or delete images
	/// </summary>
	public class Registrynamespace {
		
		private System.DateTime CreatedAt_bfield;
		
		private string Id_bfield;
		
		private string Name_bfield;
		
		private Registrynamespacestatus Status_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The namespace id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The namespace id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// The namespace name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The namespace name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// The status of the namespace
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;registry.namespace.status&quot;,&quot;Description&quot;:&quot;The status of the namespace&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public Registrynamespacestatus Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The status of the namespace
	/// </summary>
	public class Registrynamespacestatus {
	}
	
	/// <summary>
	/// The status of the permission
	/// </summary>
	public class Registrypermissionstatus {
	}
	
	/// <summary>
	/// Permissions of a user over a namespace
	/// </summary>
	public class Registrypermissions {
		
		private bool CanRead_bfield;
		
		private bool CanWrite_bfield;
		
		private System.DateTime CreatedAt_bfield;
		
		private string Id_bfield;
		
		private bool IsAdmin_bfield;
		
		private Registrypermissionstatus Status_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		private string UserId_bfield;
		
		/// <summary>
		/// Whether a user can read images on the namespace
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether a user can read images on the namespace&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("canRead")]
		public bool CanRead {
			get {
				return this.CanRead_bfield;
			}
			set {
				this.CanRead_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether a user can create images on the namespace
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether a user can create images on the namespace&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("canWrite")]
		public bool CanWrite {
			get {
				return this.CanWrite_bfield;
			}
			set {
				this.CanWrite_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// Permission Id 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Permission Id &quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether a user can delete images on the namespace
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether a user can delete images on the namespace&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("isAdmin")]
		public bool IsAdmin {
			get {
				return this.IsAdmin_bfield;
			}
			set {
				this.IsAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// The status of the permission
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;registry.permission.status&quot;,&quot;Description&quot;:&quot;The status of the permission&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public Registrypermissionstatus Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// User Id 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;User Id &quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("userId")]
		public string UserId {
			get {
				return this.UserId_bfield;
			}
			set {
				this.UserId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The client subscription to the registry service
	/// </summary>
	public class Registryservice {
		
		private System.DateTime CreatedAt_bfield;
		
		private string Endpoint_bfield;
		
		private string Id_bfield;
		
		private long MaxNamespaces_bfield;
		
		private long MaxUsers_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The endpoint used for docker login
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The endpoint used for docker login&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("endpoint")]
		public string Endpoint {
			get {
				return this.Endpoint_bfield;
			}
			set {
				this.Endpoint_bfield = value;
			}
		}
		
		/// <summary>
		/// The service id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The service id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximal number of registered namespaces in the service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximal number of registered namespaces in the service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("maxNamespaces")]
		public long MaxNamespaces {
			get {
				return this.MaxNamespaces_bfield;
			}
			set {
				this.MaxNamespaces_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximal number of registered users in the service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximal number of registered users in the service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("maxUsers")]
		public long MaxUsers {
			get {
				return this.MaxUsers_bfield;
			}
			set {
				this.MaxUsers_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The name of the geographical zone the service is located in
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The name of the geographical zone the service is located in&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// An image tag
	/// </summary>
	public class Registrytag {
		
		private System.DateTime CreatedAt_bfield;
		
		private string Id_bfield;
		
		private string Name_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The tag id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The tag id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// The tag name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The tag name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A registry user account
	/// </summary>
	public class Registryuser {
		
		private System.DateTime CreatedAt_bfield;
		
		private bool Description_bfield;
		
		private string Id_bfield;
		
		private Registryuserstatus Status_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		private string Username_bfield;
		
		/// <summary>
		/// Date of the resource creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// A general description of the user account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;A general description of the user account&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("description")]
		public bool Description {
			get {
				return this.Description_bfield;
			}
			set {
				this.Description_bfield = value;
			}
		}
		
		/// <summary>
		/// The user id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The user id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// The status of the user
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;registry.user.status&quot;,&quot;Description&quot;:&quot;The status of the user&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public Registryuserstatus Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the resource last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the resource last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The user name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The user name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("username")]
		public string Username {
			get {
				return this.Username_bfield;
			}
			set {
				this.Username_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The status of the user
	/// </summary>
	public class Registryuserstatus {
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
