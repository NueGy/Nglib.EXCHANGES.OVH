//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/overTheBox"  string[]--
//[GET] "/overTheBox/availableOffers"  price.OverTheBox.OfferEnum[]--
//[POST] "/overTheBox/devices"  overTheBox.DeviceForRegistration[]--
//[DELETE] "/overTheBox/{serviceName}"  void--serviceName
//[GET] "/overTheBox/{serviceName}"  overTheBox.Service--serviceName
//[PUT] "/overTheBox/{serviceName}"  void--,serviceName
//[GET] "/overTheBox/{serviceName}/availableReleaseChannels"  string[]--serviceName
//[GET] "/overTheBox/{serviceName}/backups"  string[]--serviceName
//[GET] "/overTheBox/{serviceName}/backups/{backupId}"  overTheBox.Backup--backupId,serviceName
//[POST] "/overTheBox/{serviceName}/cancelResiliation"  void--serviceName
//[POST] "/overTheBox/{serviceName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,serviceName
//[DELETE] "/overTheBox/{serviceName}/device"  void--serviceName
//[GET] "/overTheBox/{serviceName}/device"  overTheBox.Device--serviceName
//[GET] "/overTheBox/{serviceName}/device/actions"  string[]--name,serviceName,status
//[POST] "/overTheBox/{serviceName}/device/actions"  overTheBox.DeviceAction--name,serviceName
//[GET] "/overTheBox/{serviceName}/device/actions/{actionId}"  overTheBox.DeviceAction--actionId,serviceName
//[GET] "/overTheBox/{serviceName}/device/availableActions"  overTheBox.AvailableDeviceAction[]--serviceName
//[POST] "/overTheBox/{serviceName}/device/backup"  overTheBox.DeviceAction--serviceName
//[POST] "/overTheBox/{serviceName}/device/logs"  overTheBox.TemporaryLogsLink--serviceName
//[POST] "/overTheBox/{serviceName}/device/restoreBackup"  overTheBox.DeviceAction[]--backupId,serviceName
//[POST] "/overTheBox/{serviceName}/linkDevice"  void--deviceId,serviceName
//[GET] "/overTheBox/{serviceName}/migration/offers"  overTheBox.AvailableMigrationOffer[]--serviceName
//[GET] "/overTheBox/{serviceName}/remoteAccesses"  string[]--serviceName
//[POST] "/overTheBox/{serviceName}/remoteAccesses"  overTheBox.RemoteAccess--allowedIp,expirationDate,exposedPort,publicKey,serviceName
//[DELETE] "/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}"  void--remoteAccessId,serviceName
//[GET] "/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}"  overTheBox.RemoteAccess--remoteAccessId,serviceName
//[POST] "/overTheBox/{serviceName}/remoteAccesses/{remoteAccessId}/authorize"  void--remoteAccessId,serviceName
//[GET] "/overTheBox/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/overTheBox/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/overTheBox/{serviceName}/tasks"  string[]--name,serviceName,status
//[GET] "/overTheBox/{serviceName}/tasks/{taskId}"  overTheBox.Task--serviceName,taskId
namespace Nglib.VENDORS.OVH.OVERTHEBOX {
	
	
	public enum OrderCurrencyCodeEnum {
		
		[EnumMember(Value="AUD")]
		AUD,
		
		[EnumMember(Value="CAD")]
		CAD,
		
		[EnumMember(Value="CZK")]
		CZK,
		
		[EnumMember(Value="EUR")]
		EUR,
		
		[EnumMember(Value="GBP")]
		GBP,
		
		[EnumMember(Value="LTL")]
		LTL,
		
		[EnumMember(Value="MAD")]
		MAD,
		
		[EnumMember(Value="N/A")]
		N_A,
		
		[EnumMember(Value="PLN")]
		PLN,
		
		[EnumMember(Value="SGD")]
		SGD,
		
		[EnumMember(Value="TND")]
		TND,
		
		[EnumMember(Value="USD")]
		USD,
		
		[EnumMember(Value="XOF")]
		XOF,
		
		[EnumMember(Value="points")]
		Points,
	}
	
	/// <summary>
	/// Status of a task.
	/// </summary>
	public enum OverTheBoxActionStatusEnum {
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Status of a MPTCP Interface.
	/// </summary>
	public enum OverTheBoxMultipathStatusEnum {
		
		[EnumMember(Value="backup")]
		Backup,
		
		[EnumMember(Value="handover")]
		Handover,
		
		[EnumMember(Value="master")]
		Master,
		
		[EnumMember(Value="off")]
		Off,
		
		[EnumMember(Value="on")]
		On,
	}
	
	/// <summary>
	/// Status of the remote access.
	/// </summary>
	public enum OverTheBoxRemoteAccessStatusEnum {
		
		[EnumMember(Value="active")]
		Active,
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleted")]
		Deleted,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="pendingValidation")]
		PendingValidation,
		
		[EnumMember(Value="toDelete")]
		ToDelete,
	}
	
	/// <summary>
	/// Status of the service.
	/// </summary>
	public enum OverTheBoxServiceStatusEnum {
		
		[EnumMember(Value="active")]
		Active,
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleted")]
		Deleted,
		
		[EnumMember(Value="suspended")]
		Suspended,
		
		[EnumMember(Value="toCreate")]
		ToCreate,
		
		[EnumMember(Value="toDelete")]
		ToDelete,
	}
	
	/// <summary>
	/// Status of a task.
	/// </summary>
	public enum OverTheBoxTaskStatusEnum {
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Tunnel mode of the service.
	/// </summary>
	public enum OverTheBoxTunnelModeEnum {
		
		[EnumMember(Value="glorytun")]
		Glorytun,
		
		[EnumMember(Value="glorytun_hybrid")]
		Glorytun_hybrid,
		
		[EnumMember(Value="glorytun_mud")]
		Glorytun_mud,
	}
	
	/// <summary>
	/// Enum of Offers
	/// </summary>
	public enum PriceOverTheBoxOfferEnum {
		
		[EnumMember(Value="plus.v1")]
		Plus_V1,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// Price with it's currency and textual representation
	/// </summary>
	public class OrderPrice {
		
		private string CurrencyCode_bfield;
		
		private string Text_bfield;
		
		private double Value_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;order.CurrencyCodeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("currencyCode")]
		public string CurrencyCode {
			get {
				return this.CurrencyCode_bfield;
			}
			set {
				this.CurrencyCode_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("text")]
		public string Text {
			get {
				return this.Text_bfield;
			}
			set {
				this.Text_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;double&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("value")]
		public double Value {
			get {
				return this.Value_bfield;
			}
			set {
				this.Value_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Device action
	/// </summary>
	public class OverTheBoxAvailableDeviceAction {
		
		private string Description_bfield;
		
		private string Name_bfield;
		
		/// <summary>
		/// Description of the action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Description of the action&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("description")]
		public string Description {
			get {
				return this.Description_bfield;
			}
			set {
				this.Description_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the action&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Migration offer
	/// </summary>
	public class OverTheBoxAvailableMigrationOffer {
		
		private OrderPrice CurrentOfferPrice_bfield;
		
		private string Description_bfield;
		
		private long EngagementMonths_bfield;
		
		private bool HardwareAvailable_bfield;
		
		private string Offer_bfield;
		
		private OrderPrice Price_bfield;
		
		/// <summary>
		/// Monthly price of the current offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;order.Price&quot;,&quot;Description&quot;:&quot;Monthly price of the current offer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("currentOfferPrice")]
		public OrderPrice CurrentOfferPrice {
			get {
				return this.CurrentOfferPrice_bfield;
			}
			set {
				this.CurrentOfferPrice_bfield = value;
			}
		}
		
		/// <summary>
		/// Description of the offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Description of the offer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("description")]
		public string Description {
			get {
				return this.Description_bfield;
			}
			set {
				this.Description_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of months of engagement
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Number of months of engagement&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("engagementMonths")]
		public long EngagementMonths {
			get {
				return this.EngagementMonths_bfield;
			}
			set {
				this.EngagementMonths_bfield = value;
			}
		}
		
		/// <summary>
		/// Specify if a hardware is available
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Specify if a hardware is available&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hardwareAvailable")]
		public bool HardwareAvailable {
			get {
				return this.HardwareAvailable_bfield;
			}
			set {
				this.HardwareAvailable_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the offer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// Monthly price of the new offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;order.Price&quot;,&quot;Description&quot;:&quot;Monthly price of the new offer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("price")]
		public OrderPrice Price {
			get {
				return this.Price_bfield;
			}
			set {
				this.Price_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Backup
	/// </summary>
	public class OverTheBoxBackup {
		
		private string BackupId_bfield;
		
		private System.DateTime CreatedAt_bfield;
		
		private string DeviceActionId_bfield;
		
		/// <summary>
		/// The id of the backup
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The id of the backup&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("backupId")]
		public string BackupId {
			get {
				return this.BackupId_bfield;
			}
			set {
				this.BackupId_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the creation of the backup
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of the creation of the backup&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The id of the device action that triggered the backup
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The id of the device action that triggered the backup&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("deviceActionId")]
		public string DeviceActionId {
			get {
				return this.DeviceActionId_bfield;
			}
			set {
				this.DeviceActionId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Device
	/// </summary>
	public class OverTheBoxDevice {
		
		private bool Activated_bfield;
		
		private string DeviceId_bfield;
		
		private System.DateTime LastSeen_bfield;
		
		private string[] NetworkInterfaces_bfield;
		
		private string PublicIp_bfield;
		
		private string SystemVersion_bfield;
		
		private string Version_bfield;
		
		/// <summary>
		/// Whether or not this device is associated to a service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether or not this device is associated to a service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("activated")]
		public bool Activated {
			get {
				return this.Activated_bfield;
			}
			set {
				this.Activated_bfield = value;
			}
		}
		
		/// <summary>
		/// The id of the device
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The id of the device&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("deviceId")]
		public string DeviceId {
			get {
				return this.DeviceId_bfield;
			}
			set {
				this.DeviceId_bfield = value;
			}
		}
		
		/// <summary>
		/// Last time the device has been seen on the provisionning servers
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last time the device has been seen on the provisionning servers&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastSeen")]
		public System.DateTime LastSeen {
			get {
				return this.LastSeen_bfield;
			}
			set {
				this.LastSeen_bfield = value;
			}
		}
		
		/// <summary>
		/// Network interfaces of the device
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.DeviceInterface[]&quot;,&quot;Description&quot;:&quot;Network interfaces of the device&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("networkInterfaces")]
		public string[] NetworkInterfaces {
			get {
				return this.NetworkInterfaces_bfield;
			}
			set {
				this.NetworkInterfaces_bfield = value;
			}
		}
		
		/// <summary>
		/// The public IP of the device
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;The public IP of the device&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("publicIp")]
		public string PublicIp {
			get {
				return this.PublicIp_bfield;
			}
			set {
				this.PublicIp_bfield = value;
			}
		}
		
		/// <summary>
		/// System version of the device
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;System version of the device&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("systemVersion")]
		public string SystemVersion {
			get {
				return this.SystemVersion_bfield;
			}
			set {
				this.SystemVersion_bfield = value;
			}
		}
		
		/// <summary>
		/// Version of the device
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Version of the device&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("version")]
		public string Version {
			get {
				return this.Version_bfield;
			}
			set {
				this.Version_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Device action
	/// </summary>
	public class OverTheBoxDeviceAction {
		
		private string ActionId_bfield;
		
		private System.DateTime CreatedAt_bfield;
		
		private string Details_bfield;
		
		private string Name_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		private System.DateTime UpdatedAt_bfield;
		
		/// <summary>
		/// The id of the action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The id of the action&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("actionId")]
		public string ActionId {
			get {
				return this.ActionId_bfield;
			}
			set {
				this.ActionId_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of creation of the action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of creation of the action&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("createdAt")]
		public System.DateTime CreatedAt {
			get {
				return this.CreatedAt_bfield;
			}
			set {
				this.CreatedAt_bfield = value;
			}
		}
		
		/// <summary>
		/// The details of the action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The details of the action&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("details")]
		public string Details {
			get {
				return this.Details_bfield;
			}
			set {
				this.Details_bfield = value;
			}
		}
		
		/// <summary>
		/// The name of the action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The name of the action&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// The status of the action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.ActionStatusEnum&quot;,&quot;Description&quot;:&quot;The status of the action&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of execution of the action
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of execution of the action&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Last time the action was updated
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last time the action was updated&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("updatedAt")]
		public System.DateTime UpdatedAt {
			get {
				return this.UpdatedAt_bfield;
			}
			set {
				this.UpdatedAt_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A device for registration
	/// </summary>
	public class OverTheBoxDeviceForRegistration {
		
		private bool Activated_bfield;
		
		private string DeviceId_bfield;
		
		private System.DateTime LastSeen_bfield;
		
		/// <summary>
		/// Whether or not this device is actived
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether or not this device is actived&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("activated")]
		public bool Activated {
			get {
				return this.Activated_bfield;
			}
			set {
				this.Activated_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deviceId")]
		public string DeviceId {
			get {
				return this.DeviceId_bfield;
			}
			set {
				this.DeviceId_bfield = value;
			}
		}
		
		/// <summary>
		/// The last time this device was seen on the provisionning servers
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;The last time this device was seen on the provisionning servers&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastSeen")]
		public System.DateTime LastSeen {
			get {
				return this.LastSeen_bfield;
			}
			set {
				this.LastSeen_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Infos about a network interface
	/// </summary>
	public class OverTheBoxDeviceInterface {
		
		private string Device_bfield;
		
		private string[] DnsServers_bfield;
		
		private string Gateway_bfield;
		
		private string Ip_bfield;
		
		private string MultipathStatus_bfield;
		
		private string Name_bfield;
		
		private string Netmask_bfield;
		
		private string PublicIp_bfield;
		
		/// <summary>
		/// Device of the interface
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Device of the interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("device")]
		public string Device {
			get {
				return this.Device_bfield;
			}
			set {
				this.Device_bfield = value;
			}
		}
		
		/// <summary>
		/// The DNS servers of this interface
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ip[]&quot;,&quot;Description&quot;:&quot;The DNS servers of this interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("dnsServers")]
		public string[] DnsServers {
			get {
				return this.DnsServers_bfield;
			}
			set {
				this.DnsServers_bfield = value;
			}
		}
		
		/// <summary>
		/// Gateway of the interface
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;Gateway of the interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("gateway")]
		public string Gateway {
			get {
				return this.Gateway_bfield;
			}
			set {
				this.Gateway_bfield = value;
			}
		}
		
		/// <summary>
		/// IP of the interface
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;IP of the interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// Status of MPTCP on this interface
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.MultipathStatusEnum&quot;,&quot;Description&quot;:&quot;Status of MPTCP on this interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("multipathStatus")]
		public string MultipathStatus {
			get {
				return this.MultipathStatus_bfield;
			}
			set {
				this.MultipathStatus_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the interface
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Netmask of the interface
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;Netmask of the interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("netmask")]
		public string Netmask {
			get {
				return this.Netmask_bfield;
			}
			set {
				this.Netmask_bfield = value;
			}
		}
		
		/// <summary>
		/// Public IP of the interface
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;Public IP of the interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("publicIp")]
		public string PublicIp {
			get {
				return this.PublicIp_bfield;
			}
			set {
				this.PublicIp_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Parameters required to query metrics from OpenTSDB
	/// </summary>
	public class OverTheBoxGraphEndpoint {
		
		private string Host_bfield;
		
		private string ReadToken_bfield;
		
		private string ReadTokenID_bfield;
		
		/// <summary>
		/// The OpenTSDB host
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The OpenTSDB host&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("host")]
		public string Host {
			get {
				return this.Host_bfield;
			}
			set {
				this.Host_bfield = value;
			}
		}
		
		/// <summary>
		/// A read-only token
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;A read-only token&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("readToken")]
		public string ReadToken {
			get {
				return this.ReadToken_bfield;
			}
			set {
				this.ReadToken_bfield = value;
			}
		}
		
		/// <summary>
		/// The read-only token ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The read-only token ID&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("readTokenID")]
		public string ReadTokenID {
			get {
				return this.ReadTokenID_bfield;
			}
			set {
				this.ReadTokenID_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// If authorized, a remote access will expose a port, allowing an access to the device remotely
	/// </summary>
	public class OverTheBoxRemoteAccess {
		
		private bool Accepted_bfield;
		
		private System.DateTime AskDate_bfield;
		
		private string AuthorizedBy_bfield;
		
		private OverTheBoxRemoteAccessConnectionInfos ConnectionInfos_bfield;
		
		private System.DateTime ExpirationDate_bfield;
		
		private long ExposedPort_bfield;
		
		private string RemoteAccessId_bfield;
		
		private OverTheBoxRemoteAccessUserInfos RemoteUserInfos_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// If the remote access was accepted by the remote user
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If the remote access was accepted by the remote user&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("accepted")]
		public bool Accepted {
			get {
				return this.Accepted_bfield;
			}
			set {
				this.Accepted_bfield = value;
			}
		}
		
		/// <summary>
		/// The date of the remote access demand
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;The date of the remote access demand&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("askDate")]
		public System.DateTime AskDate {
			get {
				return this.AskDate_bfield;
			}
			set {
				this.AskDate_bfield = value;
			}
		}
		
		/// <summary>
		/// The user that authorized the remote access
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The user that authorized the remote access&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("authorizedBy")]
		public string AuthorizedBy {
			get {
				return this.AuthorizedBy_bfield;
			}
			set {
				this.AuthorizedBy_bfield = value;
			}
		}
		
		/// <summary>
		/// All the infos needed to connect yourself to your OTB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.RemoteAccessConnectionInfos&quot;,&quot;Description&quot;:&quot;All the infos needed to connect yourself to your OTB&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("connectionInfos")]
		public OverTheBoxRemoteAccessConnectionInfos ConnectionInfos {
			get {
				return this.ConnectionInfos_bfield;
			}
			set {
				this.ConnectionInfos_bfield = value;
			}
		}
		
		/// <summary>
		/// When the remote access will be automatically deleted
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;When the remote access will be automatically deleted&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationDate")]
		public System.DateTime ExpirationDate {
			get {
				return this.ExpirationDate_bfield;
			}
			set {
				this.ExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// The device's port which will be exposed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The device's port which will be exposed&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("exposedPort")]
		public long ExposedPort {
			get {
				return this.ExposedPort_bfield;
			}
			set {
				this.ExposedPort_bfield = value;
			}
		}
		
		/// <summary>
		/// The id of the remote access
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The id of the remote access&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("remoteAccessId")]
		public string RemoteAccessId {
			get {
				return this.RemoteAccessId_bfield;
			}
			set {
				this.RemoteAccessId_bfield = value;
			}
		}
		
		/// <summary>
		/// Infos about the remote user
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.RemoteAccessUserInfos&quot;,&quot;Description&quot;:&quot;Infos about the remote user&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("remoteUserInfos")]
		public OverTheBoxRemoteAccessUserInfos RemoteUserInfos {
			get {
				return this.RemoteUserInfos_bfield;
			}
			set {
				this.RemoteUserInfos_bfield = value;
			}
		}
		
		/// <summary>
		/// Status of the remote access
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.RemoteAccessStatusEnum&quot;,&quot;Description&quot;:&quot;Status of the remote access&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// All the infos needed to connect yourself to your OTB
	/// </summary>
	public class OverTheBoxRemoteAccessConnectionInfos {
		
		private string Ip_bfield;
		
		private System.Nullable<long> Port_bfield;
		
		/// <summary>
		/// IP to connect to when accessing the device remotely
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;IP to connect to when accessing the device remotely&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// Port to connect to when accessing the device remotely
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Port to connect to when accessing the device remotely&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("port")]
		public System.Nullable<long> Port {
			get {
				return this.Port_bfield;
			}
			set {
				this.Port_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Infos about the remote user
	/// </summary>
	public class OverTheBoxRemoteAccessUserInfos {
		
		private string Ip_bfield;
		
		private string PublicKey_bfield;
		
		private string User_bfield;
		
		/// <summary>
		/// IP from which the remote access will be allowed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipBlock&quot;,&quot;Description&quot;:&quot;IP from which the remote access will be allowed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// The public key authorized on the device (for SSH purpose)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The public key authorized on the device (for SSH purpose)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("publicKey")]
		public string PublicKey {
			get {
				return this.PublicKey_bfield;
			}
			set {
				this.PublicKey_bfield = value;
			}
		}
		
		/// <summary>
		/// The user that will access the device remotely
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The user that will access the device remotely&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("user")]
		public string User {
			get {
				return this.User_bfield;
			}
			set {
				this.User_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Service
	/// </summary>
	public class OverTheBoxService {
		
		private bool SOCKSProxyEnabled_bfield;
		
		private string CustomerDescription_bfield;
		
		private OverTheBoxGraphEndpoint GraphEndpoint_bfield;
		
		private string ReleaseChannel_bfield;
		
		private string ServiceName_bfield;
		
		private string Status_bfield;
		
		private string TunnelMode_bfield;
		
		/// <summary>
		/// If the socks proxy is enabled
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If the socks proxy is enabled&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("SOCKSProxyEnabled")]
		public bool SOCKSProxyEnabled {
			get {
				return this.SOCKSProxyEnabled_bfield;
			}
			set {
				this.SOCKSProxyEnabled_bfield = value;
			}
		}
		
		/// <summary>
		/// Editable field for customer
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Editable field for customer&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("customerDescription")]
		public string CustomerDescription {
			get {
				return this.CustomerDescription_bfield;
			}
			set {
				this.CustomerDescription_bfield = value;
			}
		}
		
		/// <summary>
		/// Parameters needed to fetch metrics
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;overTheBox.GraphEndpoint&quot;,&quot;Description&quot;:&quot;Parameters needed to fetch metrics&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("graphEndpoint")]
		public OverTheBoxGraphEndpoint GraphEndpoint {
			get {
				return this.GraphEndpoint_bfield;
			}
			set {
				this.GraphEndpoint_bfield = value;
			}
		}
		
		/// <summary>
		/// Release channel of the service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Release channel of the service&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("releaseChannel")]
		public string ReleaseChannel {
			get {
				return this.ReleaseChannel_bfield;
			}
			set {
				this.ReleaseChannel_bfield = value;
			}
		}
		
		/// <summary>
		/// The name of the service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The name of the service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceName")]
		public string ServiceName {
			get {
				return this.ServiceName_bfield;
			}
			set {
				this.ServiceName_bfield = value;
			}
		}
		
		/// <summary>
		/// The status of the service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.ServiceStatusEnum&quot;,&quot;Description&quot;:&quot;The status of the service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// The tunnel mode of the service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.TunnelModeEnum&quot;,&quot;Description&quot;:&quot;The tunnel mode of the service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("tunnelMode")]
		public string TunnelMode {
			get {
				return this.TunnelMode_bfield;
			}
			set {
				this.TunnelMode_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Task
	/// </summary>
	public class OverTheBoxTask {
		
		private string Name_bfield;
		
		private string Status_bfield;
		
		private string TaskId_bfield;
		
		/// <summary>
		/// The name of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The name of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// The status of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;overTheBox.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;The status of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// The id of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The id of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskId")]
		public string TaskId {
			get {
				return this.TaskId_bfield;
			}
			set {
				this.TaskId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Temporary url informations
	/// </summary>
	public class OverTheBoxTemporaryLogsLink {
		
		private System.DateTime ExpirationDate_bfield;
		
		private string Url_bfield;
		
		/// <summary>
		/// Temporary url expiration date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Temporary url expiration date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("expirationDate")]
		public System.DateTime ExpirationDate {
			get {
				return this.ExpirationDate_bfield;
			}
			set {
				this.ExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Temporary url
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Temporary url&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("url")]
		public string Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
