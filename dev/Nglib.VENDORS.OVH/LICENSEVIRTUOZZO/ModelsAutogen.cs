//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/license/virtuozzo"  string[]--
//[GET] "/license/virtuozzo/orderableVersions"  license.VirtuozzoOrderConfiguration[]--ip
//[GET] "/license/virtuozzo/{serviceName}"  license.virtuozzo.Virtuozzo--serviceName
//[PUT] "/license/virtuozzo/{serviceName}"  void--,serviceName
//[GET] "/license/virtuozzo/{serviceName}/allowedDestinationIp"  ipBlock[]--serviceName
//[GET] "/license/virtuozzo/{serviceName}/canLicenseBeMovedTo"  license.ChangeIpStatus--destinationIp,serviceName
//[POST] "/license/virtuozzo/{serviceName}/changeIp"  license.Task--destinationIp,serviceName
//[POST] "/license/virtuozzo/{serviceName}/confirmTermination"  string--commentary,futureUse,reason,serviceName,token
//[GET] "/license/virtuozzo/{serviceName}/option"  license.OptionLabel[]--label,serviceName
//[DELETE] "/license/virtuozzo/{serviceName}/option/{label}"  license.Task--label,serviceName
//[GET] "/license/virtuozzo/{serviceName}/option/{label}"  license.Option--label,serviceName
//[GET] "/license/virtuozzo/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/license/virtuozzo/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/license/virtuozzo/{serviceName}/tasks"  long[]--action,serviceName,status
//[GET] "/license/virtuozzo/{serviceName}/tasks/{taskId}"  license.Task--serviceName,taskId
//[POST] "/license/virtuozzo/{serviceName}/terminate"  string--serviceName
namespace Nglib.VENDORS.OVH.LICENSEVIRTUOZZO {
	
	
	/// <summary>
	/// Messages from change IP
	/// </summary>
	public enum LicenseChangeIpMessageEnum {
		
		[EnumMember(Value="OK")]
		OK,
		
		[EnumMember(Value="destinationNotAllowed")]
		DestinationNotAllowed,
		
		[EnumMember(Value="licenseAlreadyExists")]
		LicenseAlreadyExists,
		
		[EnumMember(Value="notAllowedToHandleThis")]
		NotAllowedToHandleThis,
		
		[EnumMember(Value="notSameType")]
		NotSameType,
		
		[EnumMember(Value="sameIp")]
		SameIp,
		
		[EnumMember(Value="versionNotAllowed")]
		VersionNotAllowed,
	}
	
	/// <summary>
	/// Possible values for license type
	/// </summary>
	public enum LicenseLicenseTypeEnum {
		
		[EnumMember(Value="dedicated")]
		Dedicated,
		
		[EnumMember(Value="dedicatedCloud")]
		DedicatedCloud,
		
		[EnumMember(Value="dedicatedFailover")]
		DedicatedFailover,
		
		[EnumMember(Value="failover")]
		Failover,
		
		[EnumMember(Value="vm")]
		Vm,
		
		[EnumMember(Value="vps")]
		Vps,
		
		[EnumMember(Value="vps_ceph")]
		Vps_ceph,
		
		[EnumMember(Value="vps_classic")]
		Vps_classic,
		
		[EnumMember(Value="vps_cloud")]
		Vps_cloud,
		
		[EnumMember(Value="vps_cloud_2016")]
		Vps_cloud_2016,
		
		[EnumMember(Value="vps_ssd")]
		Vps_ssd,
	}
	
	/// <summary>
	/// All quantities of container available for a Virtuozzo license
	/// </summary>
	public enum LicenseOrderableVirtuozzoContainerNumberEnum {
		
		[EnumMember(Value="2_CPU_001_CONTAINER")]
		_2_CPU_001_CONTAINER,
		
		[EnumMember(Value="2_CPU_003_CONTAINER")]
		_2_CPU_003_CONTAINER,
		
		[EnumMember(Value="2_CPU_010_CONTAINER")]
		_2_CPU_010_CONTAINER,
		
		[EnumMember(Value="2_CPU_030_CONTAINER")]
		_2_CPU_030_CONTAINER,
		
		[EnumMember(Value="2_CPU_060_CONTAINER")]
		_2_CPU_060_CONTAINER,
		
		[EnumMember(Value="2_CPU_100_CONTAINER")]
		_2_CPU_100_CONTAINER,
	}
	
	/// <summary>
	/// All versions available for Virtuozzo products
	/// </summary>
	public enum LicenseOrderableVirtuozzoVersionEnum {
		
		[EnumMember(Value="VIRTUOZZO_CONTAINERS_4_FOR_LINUX")]
		VIRTUOZZO_CONTAINERS_4_FOR_LINUX,
		
		[EnumMember(Value="VIRTUOZZO_CONTAINERS_4_FOR_WINDOWS")]
		VIRTUOZZO_CONTAINERS_4_FOR_WINDOWS,
		
		[EnumMember(Value="virtuozzo-4")]
		Virtuozzo_4,
		
		[EnumMember(Value="virtuozzo-4-for-windows")]
		Virtuozzo_4_for_windows,
	}
	
	/// <summary>
	/// Tests that have failed for Virtuozzo products
	/// </summary>
	public enum LicensePotentialProblemVirtuozzoEnum {
		
		[EnumMember(Value="isLinuxOs")]
		IsLinuxOs,
		
		[EnumMember(Value="isOsVirtuozzo4Like")]
		IsOsVirtuozzo4Like,
		
		[EnumMember(Value="isWindowsOs")]
		IsWindowsOs,
	}
	
	/// <summary>
	/// All states a license can be in
	/// </summary>
	public enum LicenseStateEnum {
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="released")]
		Released,
		
		[EnumMember(Value="terminated")]
		Terminated,
		
		[EnumMember(Value="toDeliver")]
		ToDeliver,
	}
	
	/// <summary>
	/// All states a license Task can be in
	/// </summary>
	public enum LicenseTaskStateEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// All quantities of container available for a Virtuozzo license
	/// </summary>
	public enum LicenseVirtuozzoContainerNumberEnum {
		
		[EnumMember(Value="2_CPU_001_CONTAINER")]
		_2_CPU_001_CONTAINER,
		
		[EnumMember(Value="2_CPU_003_CONTAINER")]
		_2_CPU_003_CONTAINER,
		
		[EnumMember(Value="2_CPU_010_CONTAINER")]
		_2_CPU_010_CONTAINER,
		
		[EnumMember(Value="2_CPU_030_CONTAINER")]
		_2_CPU_030_CONTAINER,
		
		[EnumMember(Value="2_CPU_060_CONTAINER")]
		_2_CPU_060_CONTAINER,
		
		[EnumMember(Value="2_CPU_100_CONTAINER")]
		_2_CPU_100_CONTAINER,
	}
	
	/// <summary>
	/// All versions available for Virtuozzo products
	/// </summary>
	public enum LicenseVirtuozzoVersionEnum {
		
		[EnumMember(Value="VIRTUOZZO_CONTAINERS_4_FOR_LINUX")]
		VIRTUOZZO_CONTAINERS_4_FOR_LINUX,
		
		[EnumMember(Value="VIRTUOZZO_CONTAINERS_4_FOR_WINDOWS")]
		VIRTUOZZO_CONTAINERS_4_FOR_WINDOWS,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// All future uses you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationFutureUseEnum {
		
		[EnumMember(Value="NOT_REPLACING_SERVICE")]
		NOT_REPLACING_SERVICE,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="SUBSCRIBE_AN_OTHER_SERVICE")]
		SUBSCRIBE_AN_OTHER_SERVICE,
		
		[EnumMember(Value="SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR,
		
		[EnumMember(Value="SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR,
	}
	
	/// <summary>
	/// All reasons you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationReasonEnum {
		
		[EnumMember(Value="FEATURES_DONT_SUIT_ME")]
		FEATURES_DONT_SUIT_ME,
		
		[EnumMember(Value="LACK_OF_PERFORMANCES")]
		LACK_OF_PERFORMANCES,
		
		[EnumMember(Value="MIGRATED_TO_ANOTHER_OVH_PRODUCT")]
		MIGRATED_TO_ANOTHER_OVH_PRODUCT,
		
		[EnumMember(Value="MIGRATED_TO_COMPETITOR")]
		MIGRATED_TO_COMPETITOR,
		
		[EnumMember(Value="NOT_ENOUGH_RECOGNITION")]
		NOT_ENOUGH_RECOGNITION,
		
		[EnumMember(Value="NOT_NEEDED_ANYMORE")]
		NOT_NEEDED_ANYMORE,
		
		[EnumMember(Value="NOT_RELIABLE")]
		NOT_RELIABLE,
		
		[EnumMember(Value="NO_ANSWER")]
		NO_ANSWER,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="PRODUCT_DIMENSION_DONT_SUIT_ME")]
		PRODUCT_DIMENSION_DONT_SUIT_ME,
		
		[EnumMember(Value="PRODUCT_TOOLS_DONT_SUIT_ME")]
		PRODUCT_TOOLS_DONT_SUIT_ME,
		
		[EnumMember(Value="TOO_EXPENSIVE")]
		TOO_EXPENSIVE,
		
		[EnumMember(Value="TOO_HARD_TO_USE")]
		TOO_HARD_TO_USE,
		
		[EnumMember(Value="UNSATIFIED_BY_CUSTOMER_SUPPORT")]
		UNSATIFIED_BY_CUSTOMER_SUPPORT,
	}
	
	/// <summary>
	/// A short description of what does the Task on your license
	/// </summary>
	public class LicenseActionType {
	}
	
	/// <summary>
	/// License change ip status return
	/// </summary>
	public class LicenseChangeIpStatus {
		
		private string Message_bfield;
		
		private bool Success_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.ChangeIpMessageEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("message")]
		public string Message {
			get {
				return this.Message_bfield;
			}
			set {
				this.Message_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("success")]
		public bool Success {
			get {
				return this.Success_bfield;
			}
			set {
				this.Success_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Your License options
	/// </summary>
	public class LicenseOption {
		
		private string Amount_bfield;
		
		private bool CanBeDeleted_bfield;
		
		private System.DateTime ExpirationDate_bfield;
		
		private LicenseOptionLabel Label_bfield;
		
		private string Version_bfield;
		
		/// <summary>
		/// Quantity or corresponding label of the designated option enabled on your license
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Quantity or corresponding label of the designated option enabled on your license&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("amount")]
		public string Amount {
			get {
				return this.Amount_bfield;
			}
			set {
				this.Amount_bfield = value;
			}
		}
		
		/// <summary>
		/// Specifies whether this option can be released or not
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Specifies whether this option can be released or not&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canBeDeleted")]
		public bool CanBeDeleted {
			get {
				return this.CanBeDeleted_bfield;
			}
			set {
				this.CanBeDeleted_bfield = value;
			}
		}
		
		/// <summary>
		/// This option expiration date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;This option expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationDate")]
		public System.DateTime ExpirationDate {
			get {
				return this.ExpirationDate_bfield;
			}
			set {
				this.ExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// This option designation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.OptionLabel&quot;,&quot;Description&quot;:&quot;This option designation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("label")]
		public LicenseOptionLabel Label {
			get {
				return this.Label_bfield;
			}
			set {
				this.Label_bfield = value;
			}
		}
		
		/// <summary>
		/// This option related version
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;This option related version&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("version")]
		public string Version {
			get {
				return this.Version_bfield;
			}
			set {
				this.Version_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The name of an option currently enabled on your license
	/// </summary>
	public class LicenseOptionLabel {
	}
	
	/// <summary>
	/// All versions available for Virtuozzo products
	/// </summary>
	public class LicenseOrderableVirtuozzoCompatibilityInfos {
		
		private string[] CompliantContainers_bfield;
		
		private string[] PotentialProblems_bfield;
		
		private string Version_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.OrderableVirtuozzoContainerNumberEnum[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("compliantContainers")]
		public string[] CompliantContainers {
			get {
				return this.CompliantContainers_bfield;
			}
			set {
				this.CompliantContainers_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.PotentialProblemVirtuozzoEnum[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("potentialProblems")]
		public string[] PotentialProblems {
			get {
				return this.PotentialProblems_bfield;
			}
			set {
				this.PotentialProblems_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.OrderableVirtuozzoVersionEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("version")]
		public string Version {
			get {
				return this.Version_bfield;
			}
			set {
				this.Version_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// licenses Todos
	/// </summary>
	public class LicenseTask {
		
		private LicenseActionType Action_bfield;
		
		private System.Nullable<System.DateTime> DoneDate_bfield;
		
		private System.DateTime LastUpdate_bfield;
		
		private string Name_bfield;
		
		private string Status_bfield;
		
		private long TaskId_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// This Task description
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.ActionType&quot;,&quot;Description&quot;:&quot;This Task description&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("action")]
		public LicenseActionType Action {
			get {
				return this.Action_bfield;
			}
			set {
				this.Action_bfield = value;
			}
		}
		
		/// <summary>
		/// When was this Task done
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;When was this Task done&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("doneDate")]
		public System.Nullable<System.DateTime> DoneDate {
			get {
				return this.DoneDate_bfield;
			}
			set {
				this.DoneDate_bfield = value;
			}
		}
		
		/// <summary>
		/// The last time this Task was updated
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;The last time this Task was updated&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.DateTime LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// This Task name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;This Task name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Current Taks status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.TaskStateEnum&quot;,&quot;Description&quot;:&quot;Current Taks status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// This Task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;This Task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskId")]
		public long TaskId {
			get {
				return this.TaskId_bfield;
			}
			set {
				this.TaskId_bfield = value;
			}
		}
		
		/// <summary>
		/// When was this Task created
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;When was this Task created&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The serviceTypes allowed to Order a Virtuozzo version
	/// </summary>
	public class LicenseVirtuozzoOrderConfiguration {
		
		private string[] OrderableVersions_bfield;
		
		private string ServiceType_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.OrderableVirtuozzoCompatibilityInfos[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("orderableVersions")]
		public string[] OrderableVersions {
			get {
				return this.OrderableVersions_bfield;
			}
			set {
				this.OrderableVersions_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.LicenseTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("serviceType")]
		public string ServiceType {
			get {
				return this.ServiceType_bfield;
			}
			set {
				this.ServiceType_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Your Virtuozzo license
	/// </summary>
	public class LicensevirtuozzoVirtuozzo {
		
		private string ContainerNumber_bfield;
		
		private System.DateTime Creation_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private string Domain_bfield;
		
		private string InformationKey_bfield;
		
		private string Ip_bfield;
		
		private string LicenseId_bfield;
		
		private string ProductKey_bfield;
		
		private string Status_bfield;
		
		private string Version_bfield;
		
		/// <summary>
		/// The amount of containers this license can manage
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.VirtuozzoContainerNumberEnum&quot;,&quot;Description&quot;:&quot;The amount of containers this license can manage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("containerNumber")]
		public string ContainerNumber {
			get {
				return this.ContainerNumber_bfield;
			}
			set {
				this.ContainerNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// This license creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;This license creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public System.DateTime Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// Shall we delete this on expiration ?
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Shall we delete this on expiration ?&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The internal name of your license
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The internal name of your license&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// This license Information key
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;This license Information key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("informationKey")]
		public string InformationKey {
			get {
				return this.InformationKey_bfield;
			}
			set {
				this.InformationKey_bfield = value;
			}
		}
		
		/// <summary>
		/// The ip on which this license is attached
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;The ip on which this license is attached&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// The license id on license provider side
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The license id on license provider side&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("licenseId")]
		public string LicenseId {
			get {
				return this.LicenseId_bfield;
			}
			set {
				this.LicenseId_bfield = value;
			}
		}
		
		/// <summary>
		/// This license product key
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;This license product key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("productKey")]
		public string ProductKey {
			get {
				return this.ProductKey_bfield;
			}
			set {
				this.ProductKey_bfield = value;
			}
		}
		
		/// <summary>
		/// This license state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.StateEnum&quot;,&quot;Description&quot;:&quot;This license state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// This license version
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;license.VirtuozzoVersionEnum&quot;,&quot;Description&quot;:&quot;This license version&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("version")]
		public string Version {
			get {
				return this.Version_bfield;
			}
			set {
				this.Version_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
