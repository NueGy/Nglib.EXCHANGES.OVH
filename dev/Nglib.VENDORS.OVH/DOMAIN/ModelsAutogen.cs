//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/domain"  string[]--whoisOwner
//[GET] "/domain/configurationRule"  domain.configuration.rules.Rule--action,domain
//[POST] "/domain/configurationRule/check"  void--,action,domain
//[GET] "/domain/contact"  domain.Contact[]--
//[POST] "/domain/contact"  domain.Contact--
//[GET] "/domain/contact/{contactId}"  domain.Contact--contactId
//[PUT] "/domain/contact/{contactId}"  domain.Contact--,contactId
//[GET] "/domain/data/afnicAssociationInformation"  long[]--
//[POST] "/domain/data/afnicAssociationInformation"  domain.data.AssociationContact--contactId,declarationDate,publicationDate,publicationNumber,publicationPageNumber
//[GET] "/domain/data/afnicAssociationInformation/{associationInformationId}"  domain.data.AssociationContact--associationInformationId
//[GET] "/domain/data/afnicCorporationTrademarkInformation"  long[]--
//[POST] "/domain/data/afnicCorporationTrademarkInformation"  domain.data.AfnicCorporationTrademarkContact--contactId,inpiNumber,inpiTrademarkOwner
//[GET] "/domain/data/afnicCorporationTrademarkInformation/{afnicCorporationTrademarkId}"  domain.data.AfnicCorporationTrademarkContact--afnicCorporationTrademarkId
//[GET] "/domain/data/claimNotice"  domain.data.claimNotice.ClaimNotice--domain
//[GET] "/domain/data/extension"  string[]--country
//[GET] "/domain/data/proContact"  long[]--
//[POST] "/domain/data/proContact"  domain.data.ProContact--authority,authorityWebsite,contactId,jobDescription,licenseNumber
//[GET] "/domain/data/proContact/{proContactId}"  domain.data.ProContact--proContactId
//[GET] "/domain/data/smd"  long[]--protectedLabels.label
//[POST] "/domain/data/smd"  domain.data.Smd--data
//[DELETE] "/domain/data/smd/{smdId}"  void--smdId
//[GET] "/domain/data/smd/{smdId}"  domain.data.Smd--smdId
//[PUT] "/domain/data/smd/{smdId}"  domain.data.Smd--data,smdId
//[GET] "/domain/rules"  domain.Rule--cartId,itemId
//[GET] "/domain/zone"  string[]--
//[GET] "/domain/zone/{zoneName}"  domain.zone.Zone--zoneName
//[GET] "/domain/zone/{zoneName}/capabilities"  zone.Capabilities--zoneName
//[POST] "/domain/zone/{zoneName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,zoneName
//[POST] "/domain/zone/{zoneName}/confirmTermination"  string--commentary,futureUse,reason,token,zoneName
//[DELETE] "/domain/zone/{zoneName}/dnssec"  void--zoneName
//[GET] "/domain/zone/{zoneName}/dnssec"  domain.zone.Dnssec--zoneName
//[POST] "/domain/zone/{zoneName}/dnssec"  void--zoneName
//[GET] "/domain/zone/{zoneName}/dynHost/login"  string[]--login,subDomain,zoneName
//[POST] "/domain/zone/{zoneName}/dynHost/login"  domain.zone.DynHostLogin--loginSuffix,password,subDomain,zoneName
//[DELETE] "/domain/zone/{zoneName}/dynHost/login/{login}"  void--login,zoneName
//[GET] "/domain/zone/{zoneName}/dynHost/login/{login}"  domain.zone.DynHostLogin--login,zoneName
//[PUT] "/domain/zone/{zoneName}/dynHost/login/{login}"  void--,login,zoneName
//[POST] "/domain/zone/{zoneName}/dynHost/login/{login}/changePassword"  void--login,password,zoneName
//[GET] "/domain/zone/{zoneName}/dynHost/record"  long[]--subDomain,zoneName
//[POST] "/domain/zone/{zoneName}/dynHost/record"  domain.zone.DynHostRecord--ip,subDomain,zoneName
//[DELETE] "/domain/zone/{zoneName}/dynHost/record/{id}"  void--id,zoneName
//[GET] "/domain/zone/{zoneName}/dynHost/record/{id}"  domain.zone.DynHostRecord--id,zoneName
//[PUT] "/domain/zone/{zoneName}/dynHost/record/{id}"  void--,id,zoneName
//[GET] "/domain/zone/{zoneName}/export"  text--zoneName
//[GET] "/domain/zone/{zoneName}/history"  datetime[]--creationDate.from,creationDate.to,zoneName
//[GET] "/domain/zone/{zoneName}/history/{creationDate}"  domain.zone.ZoneRestorePoint--creationDate,zoneName
//[POST] "/domain/zone/{zoneName}/history/{creationDate}/restore"  domain.zone.Task--creationDate,zoneName
//[POST] "/domain/zone/{zoneName}/import"  domain.zone.Task--zoneFile,zoneName
//[GET] "/domain/zone/{zoneName}/record"  long[]--fieldType,subDomain,zoneName
//[POST] "/domain/zone/{zoneName}/record"  domain.zone.Record--fieldType,subDomain,target,ttl,zoneName
//[DELETE] "/domain/zone/{zoneName}/record/{id}"  void--id,zoneName
//[GET] "/domain/zone/{zoneName}/record/{id}"  domain.zone.Record--id,zoneName
//[PUT] "/domain/zone/{zoneName}/record/{id}"  void--,id,zoneName
//[GET] "/domain/zone/{zoneName}/redirection"  long[]--subDomain,zoneName
//[POST] "/domain/zone/{zoneName}/redirection"  domain.zone.Redirection--description,keywords,subDomain,target,title,type,zoneName
//[DELETE] "/domain/zone/{zoneName}/redirection/{id}"  void--id,zoneName
//[GET] "/domain/zone/{zoneName}/redirection/{id}"  domain.zone.Redirection--id,zoneName
//[PUT] "/domain/zone/{zoneName}/redirection/{id}"  void--,id,zoneName
//[POST] "/domain/zone/{zoneName}/refresh"  void--zoneName
//[POST] "/domain/zone/{zoneName}/reset"  void--DnsRecords,minimized,zoneName
//[GET] "/domain/zone/{zoneName}/serviceInfos"  services.Service--zoneName
//[PUT] "/domain/zone/{zoneName}/serviceInfos"  void--,zoneName
//[GET] "/domain/zone/{zoneName}/soa"  domain.zone.Soa--zoneName
//[PUT] "/domain/zone/{zoneName}/soa"  void--,zoneName
//[GET] "/domain/zone/{zoneName}/status"  zone.Status--zoneName
//[GET] "/domain/zone/{zoneName}/task"  long[]--function,status,zoneName
//[GET] "/domain/zone/{zoneName}/task/{id}"  domain.zone.Task--id,zoneName
//[POST] "/domain/zone/{zoneName}/task/{id}/accelerate"  void--id,zoneName
//[POST] "/domain/zone/{zoneName}/task/{id}/cancel"  void--id,zoneName
//[POST] "/domain/zone/{zoneName}/task/{id}/relaunch"  void--id,zoneName
//[POST] "/domain/zone/{zoneName}/terminate"  string--zoneName
//[GET] "/domain/{serviceName}"  domain.Domain--serviceName
//[PUT] "/domain/{serviceName}"  void--,serviceName
//[POST] "/domain/{serviceName}/activateZone"  void--minimized,serviceName
//[GET] "/domain/{serviceName}/authInfo"  password--serviceName
//[POST] "/domain/{serviceName}/changeContact"  long[]--contactAdmin,contactBilling,contactTech,serviceName
//[GET] "/domain/{serviceName}/configurations/obfuscatedEmails"  domain.configurations.ObfuscatedEmail[]--serviceName
//[PUT] "/domain/{serviceName}/configurations/obfuscatedEmails"  domain.configurations.ObfuscatedEmail[]--contacts,serviceName
//[POST] "/domain/{serviceName}/configurations/obfuscatedEmails/refresh"  void--contacts,serviceName
//[GET] "/domain/{serviceName}/configurations/optin"  domain.configurations.Optin[]--serviceName
//[PUT] "/domain/{serviceName}/configurations/optin"  domain.configurations.Optin[]--optin,serviceName
//[GET] "/domain/{serviceName}/dsRecord"  long[]--flags,serviceName,status
//[POST] "/domain/{serviceName}/dsRecord"  domain.Task--keys,serviceName
//[GET] "/domain/{serviceName}/dsRecord/{id}"  domain.DnssecKey--id,serviceName
//[POST] "/domain/{serviceName}/email/obfuscated/refresh"  void--contactType,serviceName
//[GET] "/domain/{serviceName}/glueRecord"  string[]--host,serviceName
//[POST] "/domain/{serviceName}/glueRecord"  domain.Task--host,ips,serviceName
//[DELETE] "/domain/{serviceName}/glueRecord/{host}"  domain.Task--host,serviceName
//[GET] "/domain/{serviceName}/glueRecord/{host}"  domain.GlueRecord--host,serviceName
//[POST] "/domain/{serviceName}/glueRecord/{host}/update"  domain.Task--host,ips,serviceName
//[GET] "/domain/{serviceName}/nameServer"  long[]--serviceName
//[POST] "/domain/{serviceName}/nameServer"  domain.Task--nameServer,serviceName
//[DELETE] "/domain/{serviceName}/nameServer/{id}"  domain.Task--id,serviceName
//[GET] "/domain/{serviceName}/nameServer/{id}"  domain.CurrentNameServer--id,serviceName
//[POST] "/domain/{serviceName}/nameServer/{id}/status"  domain.DomainNsStatus--id,serviceName
//[POST] "/domain/{serviceName}/nameServers/update"  domain.Task--nameServers,serviceName
//[GET] "/domain/{serviceName}/option"  domain.DomainOptionEnum[]--serviceName
//[DELETE] "/domain/{serviceName}/option/{option}"  void--option,serviceName
//[GET] "/domain/{serviceName}/option/{option}"  domain.Option--option,serviceName
//[GET] "/domain/{serviceName}/options"  domain.ServiceOptions--serviceName
//[GET] "/domain/{serviceName}/owo"  domain.WhoisObfuscatorFieldsEnum[]--field,serviceName
//[POST] "/domain/{serviceName}/owo"  domain.WhoisObfuscatorFieldsEnum[]--fields,serviceName
//[DELETE] "/domain/{serviceName}/owo/{field}"  void--field,serviceName
//[GET] "/domain/{serviceName}/owo/{field}"  domain.Owo--field,serviceName
//[GET] "/domain/{serviceName}/rules/emailsObfuscation"  domain.ContactAllTypesEnum[]--serviceName
//[GET] "/domain/{serviceName}/rules/optin"  domain.rules.Optin[]--serviceName
//[GET] "/domain/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/domain/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/domain/{serviceName}/task"  long[]--function,serviceName,status
//[GET] "/domain/{serviceName}/task/{id}"  domain.Task--id,serviceName
//[POST] "/domain/{serviceName}/task/{id}/accelerate"  void--id,serviceName
//[POST] "/domain/{serviceName}/task/{id}/cancel"  void--id,serviceName
//[POST] "/domain/{serviceName}/task/{id}/relaunch"  void--id,serviceName
//[POST] "/domain/{serviceName}/ukOutgoingTransfer"  domain.Task--serviceName,tag
//[GET] "/domain/{serviceName}/ukRegistrars"  domain.UkRegistrar[]--serviceName
namespace Nglib.VENDORS.OVH.DOMAIN {
	
	
	/// <summary>
	/// Dnssec Status
	/// </summary>
	public enum DnssecDnssecStatusEnum {
		
		[EnumMember(Value="disableInProgress")]
		DisableInProgress,
		
		[EnumMember(Value="disabled")]
		Disabled,
		
		[EnumMember(Value="enableInProgress")]
		EnableInProgress,
		
		[EnumMember(Value="enabled")]
		Enabled,
	}
	
	/// <summary>
	/// Dnssec Algorithm
	///                        ###
	///                        5  : RSASHA1
	///                        7  : RSASHA1-NSEC3-SHA1
	///                        8  : RSASHA256
	///                        10 : RSASHA512
	///                        13 : ECDSAP256SHA256
	///                        14 : ECDSAP384SHA384
	/// </summary>
	public enum DnssecKeyAlgorithmEnum {
		
		[EnumMember(Value="10")]
		_10,
		
		[EnumMember(Value="13")]
		_13,
		
		[EnumMember(Value="14")]
		_14,
		
		[EnumMember(Value="5")]
		_5,
		
		[EnumMember(Value="7")]
		_7,
		
		[EnumMember(Value="8")]
		_8,
	}
	
	/// <summary>
	/// Dnssec Key Flag Type
	///                        ###
	///                        256 : Zone Signing Key (ZSK)
	///                        257 : Key  Signing Key (KSK)
	/// </summary>
	public enum DnssecKeyFlagEnum {
		
		[EnumMember(Value="256")]
		_256,
		
		[EnumMember(Value="257")]
		_257,
	}
	
	/// <summary>
	/// 
	///                Generated : The key has been created, but has not yet been used for anything.
	///                ###
	///                Published : The DNSKEY record is published in the zone, but predecessors of the key may be held in caches.
	///                ###
	///                Ready     : The new key data has been published for long enough to guarantee that any previous versions of the DNSKEY RRset have expired from caches.
	///                ###
	///                Active    : The key has started to be used to sign RRsets.
	///                ###
	///                Retired   : A successor key has become active and this key is no longer being used to generate RRSIGs.
	///                ###
	///                Removed   : The key has been removed from the zone.
	///                ###
	///                Revoked   : The key is published for a period with the &quot;revoke&quot; bit set as a way of notifying validating resolvers that have configured it as an trust anchor that it is about to be removed from the zone.
	/// </summary>
	public enum DnssecKeyStatusEnum {
		
		[EnumMember(Value="active")]
		Active,
		
		[EnumMember(Value="generated")]
		Generated,
		
		[EnumMember(Value="published")]
		Published,
		
		[EnumMember(Value="removed")]
		Removed,
		
		[EnumMember(Value="retired")]
		Retired,
		
		[EnumMember(Value="revoked")]
		Revoked,
	}
	
	/// <summary>
	/// An action to execute on a domain name
	/// </summary>
	public enum DomainActionEnum {
		
		[EnumMember(Value="create")]
		Create,
		
		[EnumMember(Value="transfer")]
		Transfer,
		
		[EnumMember(Value="update")]
		Update,
		
		[EnumMember(Value="trade")]
		Trade,
	}
	
	/// <summary>
	/// Contact type fields
	/// </summary>
	public enum DomainContactAllTypesEnum {
		
		[EnumMember(Value="admin")]
		Admin,
		
		[EnumMember(Value="all")]
		All,
		
		[EnumMember(Value="billing")]
		Billing,
		
		[EnumMember(Value="owner")]
		Owner,
		
		[EnumMember(Value="tech")]
		Tech,
	}
	
	/// <summary>
	/// All contact type for a domain
	/// </summary>
	public enum DomainDomainContactTypeEnum {
		
		[EnumMember(Value="admin")]
		Admin,
		
		[EnumMember(Value="billing")]
		Billing,
		
		[EnumMember(Value="owner")]
		Owner,
		
		[EnumMember(Value="tech")]
		Tech,
	}
	
	/// <summary>
	/// Domain lock status
	/// </summary>
	public enum DomainDomainLockStatusEnum {
		
		[EnumMember(Value="locked")]
		Locked,
		
		[EnumMember(Value="locking")]
		Locking,
		
		[EnumMember(Value="unavailable")]
		Unavailable,
		
		[EnumMember(Value="unlocked")]
		Unlocked,
		
		[EnumMember(Value="unlocking")]
		Unlocking,
	}
	
	/// <summary>
	/// DNS server state
	/// </summary>
	public enum DomainDomainNsStateEnum {
		
		[EnumMember(Value="ko")]
		Ko,
		
		[EnumMember(Value="ok")]
		Ok,
	}
	
	/// <summary>
	/// DomainNS Type
	/// </summary>
	public enum DomainDomainNsTypeEnum {
		
		[EnumMember(Value="external")]
		External,
		
		[EnumMember(Value="hosted")]
		Hosted,
	}
	
	/// <summary>
	/// All options a domain can have
	/// </summary>
	public enum DomainDomainOptionEnum {
		
		[EnumMember(Value="dnsAnycast")]
		DnsAnycast,
	}
	
	/// <summary>
	/// All states a domain Option can be in
	/// </summary>
	public enum DomainDomainOptionStateEnum {
		
		[EnumMember(Value="released")]
		Released,
		
		[EnumMember(Value="subscribed")]
		Subscribed,
	}
	
	/// <summary>
	/// Possible purposes of the domain
	/// </summary>
	public enum DomainIsForEnum {
		
		[EnumMember(Value="campaign_website")]
		Campaign_website,
		
		[EnumMember(Value="educational_website")]
		Educational_website,
		
		[EnumMember(Value="information_website")]
		Information_website,
		
		[EnumMember(Value="transactional_website")]
		Transactional_website,
		
		[EnumMember(Value="redirect_page")]
		Redirect_page,
		
		[EnumMember(Value="emails")]
		Emails,
		
		[EnumMember(Value="other_purpose")]
		Other_purpose,
	}
	
	/// <summary>
	/// Offer
	/// </summary>
	public enum DomainOfferEnum {
		
		[EnumMember(Value="diamond")]
		Diamond,
		
		[EnumMember(Value="gold")]
		Gold,
		
		[EnumMember(Value="platinum")]
		Platinum,
	}
	
	/// <summary>
	/// Operation status
	/// </summary>
	public enum DomainOperationStatusEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Whois optin fields
	/// </summary>
	public enum DomainOptinFieldsEnum {
		
		[EnumMember(Value="address")]
		Address,
		
		[EnumMember(Value="city")]
		City,
		
		[EnumMember(Value="country")]
		Country,
		
		[EnumMember(Value="email")]
		Email,
		
		[EnumMember(Value="fax")]
		Fax,
		
		[EnumMember(Value="name")]
		Name,
		
		[EnumMember(Value="organisation")]
		Organisation,
		
		[EnumMember(Value="phone")]
		Phone,
		
		[EnumMember(Value="province")]
		Province,
		
		[EnumMember(Value="zip")]
		Zip,
	}
	
	/// <summary>
	/// Parent service type enum
	/// </summary>
	public enum DomainParentServiceTypeEnum {
		
		[EnumMember(Value="/allDom")]
		_allDom,
	}
	
	/// <summary>
	/// Whois obfuscable fields
	/// </summary>
	public enum DomainWhoisObfuscatorFieldsEnum {
		
		[EnumMember(Value="address")]
		Address,
		
		[EnumMember(Value="email")]
		Email,
		
		[EnumMember(Value="phone")]
		Phone,
	}
	
	/// <summary>
	/// Used in rule to tell if rule (or part of the rule) is applicable for a given context
	/// </summary>
	public enum DomainconfigurationrulesContextEnum {
		
		[EnumMember(Value="update")]
		Update,
		
		[EnumMember(Value="create")]
		Create,
		
		[EnumMember(Value="transfer")]
		Transfer,
		
		[EnumMember(Value="trade")]
		Trade,
		
		[EnumMember(Value="order")]
		Order,
		
		[EnumMember(Value="premium")]
		Premium,
		
		[EnumMember(Value="accept_conditions")]
		Accept_conditions,
		
		[EnumMember(Value="claims")]
		Claims,
		
		[EnumMember(Value="reason")]
		Reason,
		
		[EnumMember(Value="protected_code")]
		Protected_code,
	}
	
	/// <summary>
	/// Operator use in configuration rule to check content of a field
	/// </summary>
	public enum DomainconfigurationrulesOperatorEnum {
		
		[EnumMember(Value="eq")]
		Eq,
		
		[EnumMember(Value="ne")]
		Ne,
		
		[EnumMember(Value="gt")]
		Gt,
		
		[EnumMember(Value="gte")]
		Gte,
		
		[EnumMember(Value="lt")]
		Lt,
		
		[EnumMember(Value="lte")]
		Lte,
		
		[EnumMember(Value="maxlength")]
		Maxlength,
		
		[EnumMember(Value="minlength")]
		Minlength,
		
		[EnumMember(Value="between")]
		Between,
		
		[EnumMember(Value="contains")]
		Contains,
		
		[EnumMember(Value="notcontains")]
		Notcontains,
		
		[EnumMember(Value="empty")]
		Empty,
		
		[EnumMember(Value="notempty")]
		Notempty,
		
		[EnumMember(Value="match")]
		Match,
		
		[EnumMember(Value="shouldbetrue")]
		Shouldbetrue,
		
		[EnumMember(Value="required")]
		Required,
		
		[EnumMember(Value="readonly")]
		Readonly,
	}
	
	/// <summary>
	/// Type of rule configuration
	/// </summary>
	public enum DomainconfigurationrulesTypeEnum {
		
		[EnumMember(Value="string")]
		String,
		
		[EnumMember(Value="text")]
		Text,
		
		[EnumMember(Value="bool")]
		Bool,
		
		[EnumMember(Value="number")]
		Number,
		
		[EnumMember(Value="json")]
		Json,
		
		[EnumMember(Value="contact")]
		Contact,
		
		[EnumMember(Value="domain")]
		Domain,
		
		[EnumMember(Value="date_ISO8601")]
		Date_ISO8601,
	}
	
	/// <summary>
	/// Type of claim notice
	/// </summary>
	public enum DomaindataclaimNoticeClaimNoticeTypeEnum {
		
		[EnumMember(Value="UK")]
		UK,
		
		[EnumMember(Value="TRADEMARK")]
		TRADEMARK,
	}
	
	/// <summary>
	/// Countries a nichandle can choose
	/// </summary>
	public enum NichandleCountryEnum {
		
		[EnumMember(Value="AC")]
		AC,
		
		[EnumMember(Value="AD")]
		AD,
		
		[EnumMember(Value="AE")]
		AE,
		
		[EnumMember(Value="AF")]
		AF,
		
		[EnumMember(Value="AG")]
		AG,
		
		[EnumMember(Value="AI")]
		AI,
		
		[EnumMember(Value="AL")]
		AL,
		
		[EnumMember(Value="AM")]
		AM,
		
		[EnumMember(Value="AO")]
		AO,
		
		[EnumMember(Value="AQ")]
		AQ,
		
		[EnumMember(Value="AR")]
		AR,
		
		[EnumMember(Value="AS")]
		AS,
		
		[EnumMember(Value="AT")]
		AT,
		
		[EnumMember(Value="AU")]
		AU,
		
		[EnumMember(Value="AW")]
		AW,
		
		[EnumMember(Value="AX")]
		AX,
		
		[EnumMember(Value="AZ")]
		AZ,
		
		[EnumMember(Value="BA")]
		BA,
		
		[EnumMember(Value="BB")]
		BB,
		
		[EnumMember(Value="BD")]
		BD,
		
		[EnumMember(Value="BE")]
		BE,
		
		[EnumMember(Value="BF")]
		BF,
		
		[EnumMember(Value="BG")]
		BG,
		
		[EnumMember(Value="BH")]
		BH,
		
		[EnumMember(Value="BI")]
		BI,
		
		[EnumMember(Value="BJ")]
		BJ,
		
		[EnumMember(Value="BL")]
		BL,
		
		[EnumMember(Value="BM")]
		BM,
		
		[EnumMember(Value="BN")]
		BN,
		
		[EnumMember(Value="BO")]
		BO,
		
		[EnumMember(Value="BQ")]
		BQ,
		
		[EnumMember(Value="BR")]
		BR,
		
		[EnumMember(Value="BS")]
		BS,
		
		[EnumMember(Value="BT")]
		BT,
		
		[EnumMember(Value="BW")]
		BW,
		
		[EnumMember(Value="BY")]
		BY,
		
		[EnumMember(Value="BZ")]
		BZ,
		
		[EnumMember(Value="CA")]
		CA,
		
		[EnumMember(Value="CC")]
		CC,
		
		[EnumMember(Value="CD")]
		CD,
		
		[EnumMember(Value="CF")]
		CF,
		
		[EnumMember(Value="CG")]
		CG,
		
		[EnumMember(Value="CH")]
		CH,
		
		[EnumMember(Value="CI")]
		CI,
		
		[EnumMember(Value="CK")]
		CK,
		
		[EnumMember(Value="CL")]
		CL,
		
		[EnumMember(Value="CM")]
		CM,
		
		[EnumMember(Value="CN")]
		CN,
		
		[EnumMember(Value="CO")]
		CO,
		
		[EnumMember(Value="CR")]
		CR,
		
		[EnumMember(Value="CU")]
		CU,
		
		[EnumMember(Value="CV")]
		CV,
		
		[EnumMember(Value="CW")]
		CW,
		
		[EnumMember(Value="CX")]
		CX,
		
		[EnumMember(Value="CY")]
		CY,
		
		[EnumMember(Value="CZ")]
		CZ,
		
		[EnumMember(Value="DE")]
		DE,
		
		[EnumMember(Value="DG")]
		DG,
		
		[EnumMember(Value="DJ")]
		DJ,
		
		[EnumMember(Value="DK")]
		DK,
		
		[EnumMember(Value="DM")]
		DM,
		
		[EnumMember(Value="DO")]
		DO,
		
		[EnumMember(Value="DZ")]
		DZ,
		
		[EnumMember(Value="EA")]
		EA,
		
		[EnumMember(Value="EC")]
		EC,
		
		[EnumMember(Value="EE")]
		EE,
		
		[EnumMember(Value="EG")]
		EG,
		
		[EnumMember(Value="EH")]
		EH,
		
		[EnumMember(Value="ER")]
		ER,
		
		[EnumMember(Value="ES")]
		ES,
		
		[EnumMember(Value="ET")]
		ET,
		
		[EnumMember(Value="FI")]
		FI,
		
		[EnumMember(Value="FJ")]
		FJ,
		
		[EnumMember(Value="FK")]
		FK,
		
		[EnumMember(Value="FM")]
		FM,
		
		[EnumMember(Value="FO")]
		FO,
		
		[EnumMember(Value="FR")]
		FR,
		
		[EnumMember(Value="GA")]
		GA,
		
		[EnumMember(Value="GB")]
		GB,
		
		[EnumMember(Value="GD")]
		GD,
		
		[EnumMember(Value="GE")]
		GE,
		
		[EnumMember(Value="GF")]
		GF,
		
		[EnumMember(Value="GG")]
		GG,
		
		[EnumMember(Value="GH")]
		GH,
		
		[EnumMember(Value="GI")]
		GI,
		
		[EnumMember(Value="GL")]
		GL,
		
		[EnumMember(Value="GM")]
		GM,
		
		[EnumMember(Value="GN")]
		GN,
		
		[EnumMember(Value="GP")]
		GP,
		
		[EnumMember(Value="GQ")]
		GQ,
		
		[EnumMember(Value="GR")]
		GR,
		
		[EnumMember(Value="GS")]
		GS,
		
		[EnumMember(Value="GT")]
		GT,
		
		[EnumMember(Value="GU")]
		GU,
		
		[EnumMember(Value="GW")]
		GW,
		
		[EnumMember(Value="GY")]
		GY,
		
		[EnumMember(Value="HK")]
		HK,
		
		[EnumMember(Value="HN")]
		HN,
		
		[EnumMember(Value="HR")]
		HR,
		
		[EnumMember(Value="HT")]
		HT,
		
		[EnumMember(Value="HU")]
		HU,
		
		[EnumMember(Value="IC")]
		IC,
		
		[EnumMember(Value="ID")]
		ID,
		
		[EnumMember(Value="IE")]
		IE,
		
		[EnumMember(Value="IL")]
		IL,
		
		[EnumMember(Value="IM")]
		IM,
		
		[EnumMember(Value="IN")]
		IN,
		
		[EnumMember(Value="IO")]
		IO,
		
		[EnumMember(Value="IQ")]
		IQ,
		
		[EnumMember(Value="IR")]
		IR,
		
		[EnumMember(Value="IS")]
		IS,
		
		[EnumMember(Value="IT")]
		IT,
		
		[EnumMember(Value="JE")]
		JE,
		
		[EnumMember(Value="JM")]
		JM,
		
		[EnumMember(Value="JO")]
		JO,
		
		[EnumMember(Value="JP")]
		JP,
		
		[EnumMember(Value="KE")]
		KE,
		
		[EnumMember(Value="KG")]
		KG,
		
		[EnumMember(Value="KH")]
		KH,
		
		[EnumMember(Value="KI")]
		KI,
		
		[EnumMember(Value="KM")]
		KM,
		
		[EnumMember(Value="KN")]
		KN,
		
		[EnumMember(Value="KP")]
		KP,
		
		[EnumMember(Value="KR")]
		KR,
		
		[EnumMember(Value="KW")]
		KW,
		
		[EnumMember(Value="KY")]
		KY,
		
		[EnumMember(Value="KZ")]
		KZ,
		
		[EnumMember(Value="LA")]
		LA,
		
		[EnumMember(Value="LB")]
		LB,
		
		[EnumMember(Value="LC")]
		LC,
		
		[EnumMember(Value="LI")]
		LI,
		
		[EnumMember(Value="LK")]
		LK,
		
		[EnumMember(Value="LR")]
		LR,
		
		[EnumMember(Value="LS")]
		LS,
		
		[EnumMember(Value="LT")]
		LT,
		
		[EnumMember(Value="LU")]
		LU,
		
		[EnumMember(Value="LV")]
		LV,
		
		[EnumMember(Value="LY")]
		LY,
		
		[EnumMember(Value="MA")]
		MA,
		
		[EnumMember(Value="MC")]
		MC,
		
		[EnumMember(Value="MD")]
		MD,
		
		[EnumMember(Value="ME")]
		ME,
		
		[EnumMember(Value="MF")]
		MF,
		
		[EnumMember(Value="MG")]
		MG,
		
		[EnumMember(Value="MH")]
		MH,
		
		[EnumMember(Value="MK")]
		MK,
		
		[EnumMember(Value="ML")]
		ML,
		
		[EnumMember(Value="MM")]
		MM,
		
		[EnumMember(Value="MN")]
		MN,
		
		[EnumMember(Value="MO")]
		MO,
		
		[EnumMember(Value="MP")]
		MP,
		
		[EnumMember(Value="MQ")]
		MQ,
		
		[EnumMember(Value="MR")]
		MR,
		
		[EnumMember(Value="MS")]
		MS,
		
		[EnumMember(Value="MT")]
		MT,
		
		[EnumMember(Value="MU")]
		MU,
		
		[EnumMember(Value="MV")]
		MV,
		
		[EnumMember(Value="MW")]
		MW,
		
		[EnumMember(Value="MX")]
		MX,
		
		[EnumMember(Value="MY")]
		MY,
		
		[EnumMember(Value="MZ")]
		MZ,
		
		[EnumMember(Value="NA")]
		NA,
		
		[EnumMember(Value="NC")]
		NC,
		
		[EnumMember(Value="NE")]
		NE,
		
		[EnumMember(Value="NF")]
		NF,
		
		[EnumMember(Value="NG")]
		NG,
		
		[EnumMember(Value="NI")]
		NI,
		
		[EnumMember(Value="NL")]
		NL,
		
		[EnumMember(Value="NO")]
		NO,
		
		[EnumMember(Value="NP")]
		NP,
		
		[EnumMember(Value="NR")]
		NR,
		
		[EnumMember(Value="NU")]
		NU,
		
		[EnumMember(Value="NZ")]
		NZ,
		
		[EnumMember(Value="OM")]
		OM,
		
		[EnumMember(Value="PA")]
		PA,
		
		[EnumMember(Value="PE")]
		PE,
		
		[EnumMember(Value="PF")]
		PF,
		
		[EnumMember(Value="PG")]
		PG,
		
		[EnumMember(Value="PH")]
		PH,
		
		[EnumMember(Value="PK")]
		PK,
		
		[EnumMember(Value="PL")]
		PL,
		
		[EnumMember(Value="PM")]
		PM,
		
		[EnumMember(Value="PN")]
		PN,
		
		[EnumMember(Value="PR")]
		PR,
		
		[EnumMember(Value="PS")]
		PS,
		
		[EnumMember(Value="PT")]
		PT,
		
		[EnumMember(Value="PW")]
		PW,
		
		[EnumMember(Value="PY")]
		PY,
		
		[EnumMember(Value="QA")]
		QA,
		
		[EnumMember(Value="RE")]
		RE,
		
		[EnumMember(Value="RO")]
		RO,
		
		[EnumMember(Value="RS")]
		RS,
		
		[EnumMember(Value="RU")]
		RU,
		
		[EnumMember(Value="RW")]
		RW,
		
		[EnumMember(Value="SA")]
		SA,
		
		[EnumMember(Value="SB")]
		SB,
		
		[EnumMember(Value="SC")]
		SC,
		
		[EnumMember(Value="SD")]
		SD,
		
		[EnumMember(Value="SE")]
		SE,
		
		[EnumMember(Value="SG")]
		SG,
		
		[EnumMember(Value="SH")]
		SH,
		
		[EnumMember(Value="SI")]
		SI,
		
		[EnumMember(Value="SJ")]
		SJ,
		
		[EnumMember(Value="SK")]
		SK,
		
		[EnumMember(Value="SL")]
		SL,
		
		[EnumMember(Value="SM")]
		SM,
		
		[EnumMember(Value="SN")]
		SN,
		
		[EnumMember(Value="SO")]
		SO,
		
		[EnumMember(Value="SR")]
		SR,
		
		[EnumMember(Value="SS")]
		SS,
		
		[EnumMember(Value="ST")]
		ST,
		
		[EnumMember(Value="SV")]
		SV,
		
		[EnumMember(Value="SX")]
		SX,
		
		[EnumMember(Value="SY")]
		SY,
		
		[EnumMember(Value="SZ")]
		SZ,
		
		[EnumMember(Value="TA")]
		TA,
		
		[EnumMember(Value="TC")]
		TC,
		
		[EnumMember(Value="TD")]
		TD,
		
		[EnumMember(Value="TF")]
		TF,
		
		[EnumMember(Value="TG")]
		TG,
		
		[EnumMember(Value="TH")]
		TH,
		
		[EnumMember(Value="TJ")]
		TJ,
		
		[EnumMember(Value="TK")]
		TK,
		
		[EnumMember(Value="TL")]
		TL,
		
		[EnumMember(Value="TM")]
		TM,
		
		[EnumMember(Value="TN")]
		TN,
		
		[EnumMember(Value="TO")]
		TO,
		
		[EnumMember(Value="TR")]
		TR,
		
		[EnumMember(Value="TT")]
		TT,
		
		[EnumMember(Value="TV")]
		TV,
		
		[EnumMember(Value="TW")]
		TW,
		
		[EnumMember(Value="TZ")]
		TZ,
		
		[EnumMember(Value="UA")]
		UA,
		
		[EnumMember(Value="UG")]
		UG,
		
		[EnumMember(Value="UM")]
		UM,
		
		[EnumMember(Value="UNKNOWN")]
		UNKNOWN,
		
		[EnumMember(Value="US")]
		US,
		
		[EnumMember(Value="UY")]
		UY,
		
		[EnumMember(Value="UZ")]
		UZ,
		
		[EnumMember(Value="VA")]
		VA,
		
		[EnumMember(Value="VC")]
		VC,
		
		[EnumMember(Value="VE")]
		VE,
		
		[EnumMember(Value="VG")]
		VG,
		
		[EnumMember(Value="VI")]
		VI,
		
		[EnumMember(Value="VN")]
		VN,
		
		[EnumMember(Value="VU")]
		VU,
		
		[EnumMember(Value="WF")]
		WF,
		
		[EnumMember(Value="WS")]
		WS,
		
		[EnumMember(Value="XK")]
		XK,
		
		[EnumMember(Value="YE")]
		YE,
		
		[EnumMember(Value="YT")]
		YT,
		
		[EnumMember(Value="ZA")]
		ZA,
		
		[EnumMember(Value="ZM")]
		ZM,
		
		[EnumMember(Value="ZW")]
		ZW,
	}
	
	/// <summary>
	/// All genders a person can choose
	/// </summary>
	public enum NichandleGenderEnum {
		
		[EnumMember(Value="female")]
		Female,
		
		[EnumMember(Value="male")]
		Male,
	}
	
	/// <summary>
	/// Languages a nichandle can choose
	/// </summary>
	public enum NichandleLanguageEnum {
		
		[EnumMember(Value="cs_CZ")]
		Cs_CZ,
		
		[EnumMember(Value="de_DE")]
		De_DE,
		
		[EnumMember(Value="en_AU")]
		En_AU,
		
		[EnumMember(Value="en_CA")]
		En_CA,
		
		[EnumMember(Value="en_GB")]
		En_GB,
		
		[EnumMember(Value="en_IE")]
		En_IE,
		
		[EnumMember(Value="en_US")]
		En_US,
		
		[EnumMember(Value="es_ES")]
		Es_ES,
		
		[EnumMember(Value="fi_FI")]
		Fi_FI,
		
		[EnumMember(Value="fr_CA")]
		Fr_CA,
		
		[EnumMember(Value="fr_FR")]
		Fr_FR,
		
		[EnumMember(Value="fr_MA")]
		Fr_MA,
		
		[EnumMember(Value="fr_SN")]
		Fr_SN,
		
		[EnumMember(Value="fr_TN")]
		Fr_TN,
		
		[EnumMember(Value="it_IT")]
		It_IT,
		
		[EnumMember(Value="lt_LT")]
		Lt_LT,
		
		[EnumMember(Value="nl_NL")]
		Nl_NL,
		
		[EnumMember(Value="pl_PL")]
		Pl_PL,
		
		[EnumMember(Value="pt_PT")]
		Pt_PT,
	}
	
	/// <summary>
	/// Legal forms a nichandle can be registered as
	/// </summary>
	public enum NichandleLegalFormEnum {
		
		[EnumMember(Value="administration")]
		Administration,
		
		[EnumMember(Value="association")]
		Association,
		
		[EnumMember(Value="corporation")]
		Corporation,
		
		[EnumMember(Value="individual")]
		Individual,
		
		[EnumMember(Value="other")]
		Other,
		
		[EnumMember(Value="personalcorporation")]
		Personalcorporation,
	}
	
	/// <summary>
	/// OVH subsidiaries
	/// </summary>
	public enum NichandleOvhCompanyEnum {
		
		[EnumMember(Value="kimsufi")]
		Kimsufi,
		
		[EnumMember(Value="ovh")]
		Ovh,
		
		[EnumMember(Value="soyoustart")]
		Soyoustart,
	}
	
	/// <summary>
	/// OVH subsidiaries
	/// </summary>
	public enum NichandleOvhSubsidiaryEnum {
		
		[EnumMember(Value="CZ")]
		CZ,
		
		[EnumMember(Value="DE")]
		DE,
		
		[EnumMember(Value="ES")]
		ES,
		
		[EnumMember(Value="EU")]
		EU,
		
		[EnumMember(Value="FI")]
		FI,
		
		[EnumMember(Value="FR")]
		FR,
		
		[EnumMember(Value="GB")]
		GB,
		
		[EnumMember(Value="IE")]
		IE,
		
		[EnumMember(Value="IT")]
		IT,
		
		[EnumMember(Value="LT")]
		LT,
		
		[EnumMember(Value="MA")]
		MA,
		
		[EnumMember(Value="NL")]
		NL,
		
		[EnumMember(Value="PL")]
		PL,
		
		[EnumMember(Value="PT")]
		PT,
		
		[EnumMember(Value="SN")]
		SN,
		
		[EnumMember(Value="TN")]
		TN,
	}
	
	/// <summary>
	/// States a nichandle can be in
	/// </summary>
	public enum NichandleStateEnum {
		
		[EnumMember(Value="complete")]
		Complete,
		
		[EnumMember(Value="incomplete")]
		Incomplete,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// All future uses you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationFutureUseEnum {
		
		[EnumMember(Value="NOT_REPLACING_SERVICE")]
		NOT_REPLACING_SERVICE,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="SUBSCRIBE_AN_OTHER_SERVICE")]
		SUBSCRIBE_AN_OTHER_SERVICE,
		
		[EnumMember(Value="SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_OTHER_KIND_OF_SERVICE_WITH_COMPETITOR,
		
		[EnumMember(Value="SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR")]
		SUBSCRIBE_SIMILAR_SERVICE_WITH_COMPETITOR,
	}
	
	/// <summary>
	/// All reasons you can provide for a service termination
	/// </summary>
	public enum ServiceTerminationReasonEnum {
		
		[EnumMember(Value="FEATURES_DONT_SUIT_ME")]
		FEATURES_DONT_SUIT_ME,
		
		[EnumMember(Value="LACK_OF_PERFORMANCES")]
		LACK_OF_PERFORMANCES,
		
		[EnumMember(Value="MIGRATED_TO_ANOTHER_OVH_PRODUCT")]
		MIGRATED_TO_ANOTHER_OVH_PRODUCT,
		
		[EnumMember(Value="MIGRATED_TO_COMPETITOR")]
		MIGRATED_TO_COMPETITOR,
		
		[EnumMember(Value="NOT_ENOUGH_RECOGNITION")]
		NOT_ENOUGH_RECOGNITION,
		
		[EnumMember(Value="NOT_NEEDED_ANYMORE")]
		NOT_NEEDED_ANYMORE,
		
		[EnumMember(Value="NOT_RELIABLE")]
		NOT_RELIABLE,
		
		[EnumMember(Value="NO_ANSWER")]
		NO_ANSWER,
		
		[EnumMember(Value="OTHER")]
		OTHER,
		
		[EnumMember(Value="PRODUCT_DIMENSION_DONT_SUIT_ME")]
		PRODUCT_DIMENSION_DONT_SUIT_ME,
		
		[EnumMember(Value="PRODUCT_TOOLS_DONT_SUIT_ME")]
		PRODUCT_TOOLS_DONT_SUIT_ME,
		
		[EnumMember(Value="TOO_EXPENSIVE")]
		TOO_EXPENSIVE,
		
		[EnumMember(Value="TOO_HARD_TO_USE")]
		TOO_HARD_TO_USE,
		
		[EnumMember(Value="UNSATIFIED_BY_CUSTOMER_SUPPORT")]
		UNSATIFIED_BY_CUSTOMER_SUPPORT,
	}
	
	/// <summary>
	/// Resource record fieldType
	/// </summary>
	public enum ZoneNamedResolutionFieldTypeEnum {
		
		[EnumMember(Value="A")]
		A,
		
		[EnumMember(Value="AAAA")]
		AAAA,
		
		[EnumMember(Value="CAA")]
		CAA,
		
		[EnumMember(Value="CNAME")]
		CNAME,
		
		[EnumMember(Value="DKIM")]
		DKIM,
		
		[EnumMember(Value="DMARC")]
		DMARC,
		
		[EnumMember(Value="LOC")]
		LOC,
		
		[EnumMember(Value="MX")]
		MX,
		
		[EnumMember(Value="NAPTR")]
		NAPTR,
		
		[EnumMember(Value="NS")]
		NS,
		
		[EnumMember(Value="PTR")]
		PTR,
		
		[EnumMember(Value="SPF")]
		SPF,
		
		[EnumMember(Value="SRV")]
		SRV,
		
		[EnumMember(Value="SSHFP")]
		SSHFP,
		
		[EnumMember(Value="TLSA")]
		TLSA,
		
		[EnumMember(Value="TXT")]
		TXT,
	}
	
	/// <summary>
	/// Redirection type enum : visible -&gt; Redirection by http code 302, visiblePermanent -&gt; Redirection by http code 301, invisible -&gt; Redirection by html frame
	/// </summary>
	public enum ZoneRedirectionTypeEnum {
		
		[EnumMember(Value="invisible")]
		Invisible,
		
		[EnumMember(Value="visible")]
		Visible,
		
		[EnumMember(Value="visiblePermanent")]
		VisiblePermanent,
	}
	
	/// <summary>
	/// Resource record type
	/// </summary>
	public enum ZoneResettableNamedResolutionFieldTypeEnum {
		
		[EnumMember(Value="A")]
		A,
		
		[EnumMember(Value="MX")]
		MX,
	}
	
	/// <summary>
	/// Key type
	/// </summary>
	public class DnssecKey {
		
		private string Algorithm_bfield;
		
		private string Flags_bfield;
		
		private string PublicKey_bfield;
		
		private long Tag_bfield;
		
		/// <summary>
		/// Algorithm
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dnssec.KeyAlgorithmEnum&quot;,&quot;Description&quot;:&quot;Algorithm&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("algorithm")]
		public string Algorithm {
			get {
				return this.Algorithm_bfield;
			}
			set {
				this.Algorithm_bfield = value;
			}
		}
		
		/// <summary>
		/// Flag of the dnssec key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dnssec.KeyFlagEnum&quot;,&quot;Description&quot;:&quot;Flag of the dnssec key&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("flags")]
		public string Flags {
			get {
				return this.Flags_bfield;
			}
			set {
				this.Flags_bfield = value;
			}
		}
		
		/// <summary>
		/// Public key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Public key&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("publicKey")]
		public string PublicKey {
			get {
				return this.PublicKey_bfield;
			}
			set {
				this.PublicKey_bfield = value;
			}
		}
		
		/// <summary>
		/// Key tag
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Key tag&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("tag")]
		public long Tag {
			get {
				return this.Tag_bfield;
			}
			set {
				this.Tag_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A contact contains the personal data of a user
	/// </summary>
	public class DomainContact {
		
		private string AccreditationCountry_bfield;
		
		private string AccreditationId_bfield;
		
		private string AccreditationOrganism_bfield;
		
		private System.Nullable<long> AccreditationYear_bfield;
		
		private DomainContactAddress Address_bfield;
		
		private string BirthCity_bfield;
		
		private string BirthCountry_bfield;
		
		private string BirthDay_bfield;
		
		private string BirthZip_bfield;
		
		private string CellPhone_bfield;
		
		private string CompanyNationalIdentificationNumber_bfield;
		
		private string Email_bfield;
		
		private string EnterpriseId_bfield;
		
		private string Fax_bfield;
		
		private string FirstName_bfield;
		
		private string Gender_bfield;
		
		private long Id_bfield;
		
		private string Insee_bfield;
		
		private string Language_bfield;
		
		private string LastName_bfield;
		
		private string LegalForm_bfield;
		
		private string LegalFormCategory_bfield;
		
		private string NationalIdentificationNumber_bfield;
		
		private string Nationality_bfield;
		
		private string OrganisationAccountable_bfield;
		
		private string OrganisationFunding_bfield;
		
		private string OrganisationFundingOther_bfield;
		
		private string OrganisationName_bfield;
		
		private string OrganisationRole_bfield;
		
		private string OrganisationRoleOther_bfield;
		
		private string OrganisationStaffStatus_bfield;
		
		private string OrganisationStaffStatusOther_bfield;
		
		private string OrganisationType_bfield;
		
		private string OrganisationTypeOther_bfield;
		
		private string Phone_bfield;
		
		private string RegistrantDocumentType_bfield;
		
		private string RegistrantDocumentTypeOther_bfield;
		
		private string RoleInOrganisation_bfield;
		
		private string Vat_bfield;
		
		private string Website_bfield;
		
		/// <summary>
		/// Country of lawyer accreditation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.CountryEnum&quot;,&quot;Description&quot;:&quot;Country of lawyer accreditation&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accreditationCountry")]
		public string AccreditationCountry {
			get {
				return this.AccreditationCountry_bfield;
			}
			set {
				this.AccreditationCountry_bfield = value;
			}
		}
		
		/// <summary>
		/// Lawyer accreditation number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Lawyer accreditation number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accreditationId")]
		public string AccreditationId {
			get {
				return this.AccreditationId_bfield;
			}
			set {
				this.AccreditationId_bfield = value;
			}
		}
		
		/// <summary>
		/// Organism of lawyer accreditation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Organism of lawyer accreditation&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accreditationOrganism")]
		public string AccreditationOrganism {
			get {
				return this.AccreditationOrganism_bfield;
			}
			set {
				this.AccreditationOrganism_bfield = value;
			}
		}
		
		/// <summary>
		/// Year of lawyer accreditation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Year of lawyer accreditation&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accreditationYear")]
		public System.Nullable<long> AccreditationYear {
			get {
				return this.AccreditationYear_bfield;
			}
			set {
				this.AccreditationYear_bfield = value;
			}
		}
		
		/// <summary>
		/// The address of the contact
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.ContactAddress&quot;,&quot;Description&quot;:&quot;The address of the contact&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("address")]
		public DomainContactAddress Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// City of birth
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;City of birth&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("birthCity")]
		public string BirthCity {
			get {
				return this.BirthCity_bfield;
			}
			set {
				this.BirthCity_bfield = value;
			}
		}
		
		/// <summary>
		/// Birth Country
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.CountryEnum&quot;,&quot;Description&quot;:&quot;Birth Country&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("birthCountry")]
		public string BirthCountry {
			get {
				return this.BirthCountry_bfield;
			}
			set {
				this.BirthCountry_bfield = value;
			}
		}
		
		/// <summary>
		/// Birth date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:&quot;Birth date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("birthDay")]
		public string BirthDay {
			get {
				return this.BirthDay_bfield;
			}
			set {
				this.BirthDay_bfield = value;
			}
		}
		
		/// <summary>
		/// Birth Zipcode
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Birth Zipcode&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("birthZip")]
		public string BirthZip {
			get {
				return this.BirthZip_bfield;
			}
			set {
				this.BirthZip_bfield = value;
			}
		}
		
		/// <summary>
		/// Cellphone number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;phoneNumber&quot;,&quot;Description&quot;:&quot;Cellphone number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("cellPhone")]
		public string CellPhone {
			get {
				return this.CellPhone_bfield;
			}
			set {
				this.CellPhone_bfield = value;
			}
		}
		
		/// <summary>
		/// Company National Identification Number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Company National Identification Number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("companyNationalIdentificationNumber")]
		public string CompanyNationalIdentificationNumber {
			get {
				return this.CompanyNationalIdentificationNumber_bfield;
			}
			set {
				this.CompanyNationalIdentificationNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Email address
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Email address&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("email")]
		public string Email {
			get {
				return this.Email_bfield;
			}
			set {
				this.Email_bfield = value;
			}
		}
		
		/// <summary>
		/// Enterprise identifier
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Enterprise identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("enterpriseId")]
		public string EnterpriseId {
			get {
				return this.EnterpriseId_bfield;
			}
			set {
				this.EnterpriseId_bfield = value;
			}
		}
		
		/// <summary>
		/// Fax number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Fax number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("fax")]
		public string Fax {
			get {
				return this.Fax_bfield;
			}
			set {
				this.Fax_bfield = value;
			}
		}
		
		/// <summary>
		/// First name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;First name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// Gender
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.GenderEnum&quot;,&quot;Description&quot;:&quot;Gender&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("gender")]
		public string Gender {
			get {
				return this.Gender_bfield;
			}
			set {
				this.Gender_bfield = value;
			}
		}
		
		/// <summary>
		/// Unique identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Unique identifier&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// INSEE identifier
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;INSEE identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("insee")]
		public string Insee {
			get {
				return this.Insee_bfield;
			}
			set {
				this.Insee_bfield = value;
			}
		}
		
		/// <summary>
		/// Language
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.LanguageEnum&quot;,&quot;Description&quot;:&quot;Language&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("language")]
		public string Language {
			get {
				return this.Language_bfield;
			}
			set {
				this.Language_bfield = value;
			}
		}
		
		/// <summary>
		/// Last name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Last name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.LegalFormEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("legalForm")]
		public string LegalForm {
			get {
				return this.LegalForm_bfield;
			}
			set {
				this.LegalForm_bfield = value;
			}
		}
		
		/// <summary>
		/// category of legalForm
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;category of legalForm&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("legalFormCategory")]
		public string LegalFormCategory {
			get {
				return this.LegalFormCategory_bfield;
			}
			set {
				this.LegalFormCategory_bfield = value;
			}
		}
		
		/// <summary>
		/// National Identification Number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;National Identification Number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("nationalIdentificationNumber")]
		public string NationalIdentificationNumber {
			get {
				return this.NationalIdentificationNumber_bfield;
			}
			set {
				this.NationalIdentificationNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Nationality
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.CountryEnum&quot;,&quot;Description&quot;:&quot;Nationality&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("nationality")]
		public string Nationality {
			get {
				return this.Nationality_bfield;
			}
			set {
				this.Nationality_bfield = value;
			}
		}
		
		/// <summary>
		/// To whom is the organisation accountable
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;To whom is the organisation accountable&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationAccountable")]
		public string OrganisationAccountable {
			get {
				return this.OrganisationAccountable_bfield;
			}
			set {
				this.OrganisationAccountable_bfield = value;
			}
		}
		
		/// <summary>
		/// What is the source of funding
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;What is the source of funding&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationFunding")]
		public string OrganisationFunding {
			get {
				return this.OrganisationFunding_bfield;
			}
			set {
				this.OrganisationFunding_bfield = value;
			}
		}
		
		/// <summary>
		/// Explain the source of funding if organisationFunding is other
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Explain the source of funding if organisationFunding is other&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationFundingOther")]
		public string OrganisationFundingOther {
			get {
				return this.OrganisationFundingOther_bfield;
			}
			set {
				this.OrganisationFundingOther_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of organisation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of organisation&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationName")]
		public string OrganisationName {
			get {
				return this.OrganisationName_bfield;
			}
			set {
				this.OrganisationName_bfield = value;
			}
		}
		
		/// <summary>
		/// Role of your organisation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Role of your organisation&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationRole")]
		public string OrganisationRole {
			get {
				return this.OrganisationRole_bfield;
			}
			set {
				this.OrganisationRole_bfield = value;
			}
		}
		
		/// <summary>
		/// Explain the role of your organisation if organisationRole is other
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Explain the role of your organisation if organisationRole is other&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationRoleOther")]
		public string OrganisationRoleOther {
			get {
				return this.OrganisationRoleOther_bfield;
			}
			set {
				this.OrganisationRoleOther_bfield = value;
			}
		}
		
		/// <summary>
		/// Status of the staff
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Status of the staff&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationStaffStatus")]
		public string OrganisationStaffStatus {
			get {
				return this.OrganisationStaffStatus_bfield;
			}
			set {
				this.OrganisationStaffStatus_bfield = value;
			}
		}
		
		/// <summary>
		/// Explain the status of the staff if organisationStaffStatus is other
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Explain the status of the staff if organisationStaffStatus is other&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationStaffStatusOther")]
		public string OrganisationStaffStatusOther {
			get {
				return this.OrganisationStaffStatusOther_bfield;
			}
			set {
				this.OrganisationStaffStatusOther_bfield = value;
			}
		}
		
		/// <summary>
		/// type of organisation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;type of organisation&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationType")]
		public string OrganisationType {
			get {
				return this.OrganisationType_bfield;
			}
			set {
				this.OrganisationType_bfield = value;
			}
		}
		
		/// <summary>
		/// Explain the type of organisation if organisationType is other
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Explain the type of organisation if organisationType is other&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisationTypeOther")]
		public string OrganisationTypeOther {
			get {
				return this.OrganisationTypeOther_bfield;
			}
			set {
				this.OrganisationTypeOther_bfield = value;
			}
		}
		
		/// <summary>
		/// Phone number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;phoneNumber&quot;,&quot;Description&quot;:&quot;Phone number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("phone")]
		public string Phone {
			get {
				return this.Phone_bfield;
			}
			set {
				this.Phone_bfield = value;
			}
		}
		
		/// <summary>
		/// Type of registrant document
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Type of registrant document&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("registrantDocumentType")]
		public string RegistrantDocumentType {
			get {
				return this.RegistrantDocumentType_bfield;
			}
			set {
				this.RegistrantDocumentType_bfield = value;
			}
		}
		
		/// <summary>
		/// Explain the type of registrant document if registrantDocumentType is other
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Explain the type of registrant document if registrantDocumentType is other&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("registrantDocumentTypeOther")]
		public string RegistrantDocumentTypeOther {
			get {
				return this.RegistrantDocumentTypeOther_bfield;
			}
			set {
				this.RegistrantDocumentTypeOther_bfield = value;
			}
		}
		
		/// <summary>
		/// The role in the organisation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The role in the organisation&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("roleInOrganisation")]
		public string RoleInOrganisation {
			get {
				return this.RoleInOrganisation_bfield;
			}
			set {
				this.RoleInOrganisation_bfield = value;
			}
		}
		
		/// <summary>
		/// VAT number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;VAT number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vat")]
		public string Vat {
			get {
				return this.Vat_bfield;
			}
			set {
				this.Vat_bfield = value;
			}
		}
		
		/// <summary>
		/// Website
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Website&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("website")]
		public string Website {
			get {
				return this.Website_bfield;
			}
			set {
				this.Website_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Missing description
	/// </summary>
	public class DomainContactAddress {
		
		private string City_bfield;
		
		private string Country_bfield;
		
		private string Line1_bfield;
		
		private string Line2_bfield;
		
		private string Line3_bfield;
		
		private string OtherDetails_bfield;
		
		private string Province_bfield;
		
		private string Zip_bfield;
		
		/// <summary>
		/// City
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;City&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("city")]
		public string City {
			get {
				return this.City_bfield;
			}
			set {
				this.City_bfield = value;
			}
		}
		
		/// <summary>
		/// Country
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.CountryEnum&quot;,&quot;Description&quot;:&quot;Country&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("country")]
		public string Country {
			get {
				return this.Country_bfield;
			}
			set {
				this.Country_bfield = value;
			}
		}
		
		/// <summary>
		/// Address line 1
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Address line 1&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("line1")]
		public string Line1 {
			get {
				return this.Line1_bfield;
			}
			set {
				this.Line1_bfield = value;
			}
		}
		
		/// <summary>
		/// Address line 2
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Address line 2&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("line2")]
		public string Line2 {
			get {
				return this.Line2_bfield;
			}
			set {
				this.Line2_bfield = value;
			}
		}
		
		/// <summary>
		/// Address line 3
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Address line 3&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("line3")]
		public string Line3 {
			get {
				return this.Line3_bfield;
			}
			set {
				this.Line3_bfield = value;
			}
		}
		
		/// <summary>
		/// Others details
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Others details&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("otherDetails")]
		public string OtherDetails {
			get {
				return this.OtherDetails_bfield;
			}
			set {
				this.OtherDetails_bfield = value;
			}
		}
		
		/// <summary>
		/// Province
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Province&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("province")]
		public string Province {
			get {
				return this.Province_bfield;
			}
			set {
				this.Province_bfield = value;
			}
		}
		
		/// <summary>
		/// Zip code
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zip code&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zip")]
		public string Zip {
			get {
				return this.Zip_bfield;
			}
			set {
				this.Zip_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// CurrentNameServer
	/// </summary>
	public class DomainCurrentNameServer {
		
		private string Host_bfield;
		
		private long Id_bfield;
		
		private string Ip_bfield;
		
		private bool IsUsed_bfield;
		
		private bool ToDelete_bfield;
		
		/// <summary>
		/// Host of the name server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Host of the name server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("host")]
		public string Host {
			get {
				return this.Host_bfield;
			}
			set {
				this.Host_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of the name server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the name server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Ip of the name server
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;Ip of the name server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// isUsed flag of the name server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;isUsed flag of the name server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isUsed")]
		public bool IsUsed {
			get {
				return this.IsUsed_bfield;
			}
			set {
				this.IsUsed_bfield = value;
			}
		}
		
		/// <summary>
		/// toDelete flag of the name server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;toDelete flag of the name server&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("toDelete")]
		public bool ToDelete {
			get {
				return this.ToDelete_bfield;
			}
			set {
				this.ToDelete_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A domain data
	/// </summary>
	public class DomainData {
		
		private string Audience_bfield;
		
		private string AuthInfo_bfield;
		
		private string[] IsFor_bfield;
		
		private string OtherPurpose_bfield;
		
		private string Reason_bfield;
		
		private string Represent_bfield;
		
		/// <summary>
		/// Domain name audience
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name audience&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("audience")]
		public string Audience {
			get {
				return this.Audience_bfield;
			}
			set {
				this.Audience_bfield = value;
			}
		}
		
		/// <summary>
		/// Auth Info
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;password&quot;,&quot;Description&quot;:&quot;Auth Info&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("authInfo")]
		public string AuthInfo {
			get {
				return this.AuthInfo_bfield;
			}
			set {
				this.AuthInfo_bfield = value;
			}
		}
		
		/// <summary>
		/// Purposes of the domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.IsForEnum[]&quot;,&quot;Description&quot;:&quot;Purposes of the domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("isFor")]
		public string[] IsFor {
			get {
				return this.IsFor_bfield;
			}
			set {
				this.IsFor_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain name other purpose
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name other purpose&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("otherPurpose")]
		public string OtherPurpose {
			get {
				return this.OtherPurpose_bfield;
			}
			set {
				this.OtherPurpose_bfield = value;
			}
		}
		
		/// <summary>
		/// Reason of the purchase of this domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Reason of the purchase of this domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("reason")]
		public string Reason {
			get {
				return this.Reason_bfield;
			}
			set {
				this.Reason_bfield = value;
			}
		}
		
		/// <summary>
		/// Represented company
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Represented company&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("represent")]
		public string Represent {
			get {
				return this.Represent_bfield;
			}
			set {
				this.Represent_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Domain's DNSSEC Key
	/// </summary>
	public class DomainDnssecKey {
		
		private string Algorithm_bfield;
		
		private string Flags_bfield;
		
		private long Id_bfield;
		
		private string PublicKey_bfield;
		
		private string Status_bfield;
		
		private long Tag_bfield;
		
		/// <summary>
		/// Algorithm number of the DNSSEC key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dnssec.KeyAlgorithmEnum&quot;,&quot;Description&quot;:&quot;Algorithm number of the DNSSEC key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("algorithm")]
		public string Algorithm {
			get {
				return this.Algorithm_bfield;
			}
			set {
				this.Algorithm_bfield = value;
			}
		}
		
		/// <summary>
		/// Flag of the DNSSEC key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dnssec.KeyFlagEnum&quot;,&quot;Description&quot;:&quot;Flag of the DNSSEC key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("flags")]
		public string Flags {
			get {
				return this.Flags_bfield;
			}
			set {
				this.Flags_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of the DNSSEC key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the DNSSEC key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Public key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Public key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("publicKey")]
		public string PublicKey {
			get {
				return this.PublicKey_bfield;
			}
			set {
				this.PublicKey_bfield = value;
			}
		}
		
		/// <summary>
		/// Key status of the DNSSEC key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dnssec.KeyStatusEnum&quot;,&quot;Description&quot;:&quot;Key status of the DNSSEC key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Tag of the DNSSEC key
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Tag of the DNSSEC key&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("tag")]
		public long Tag {
			get {
				return this.Tag_bfield;
			}
			set {
				this.Tag_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Domain name administration
	/// </summary>
	public class DomainDomain {
		
		private bool DnssecSupported_bfield;
		
		private string Domain_bfield;
		
		private bool GlueRecordIpv6Supported_bfield;
		
		private bool GlueRecordMultiIpSupported_bfield;
		
		private System.DateTime LastUpdate_bfield;
		
		private string NameServerType_bfield;
		
		private string Offer_bfield;
		
		private bool OwoSupported_bfield;
		
		private DomainParentService ParentService_bfield;
		
		private string TransferLockStatus_bfield;
		
		private string WhoisOwner_bfield;
		
		/// <summary>
		/// Is DNSSEC implemented for this domain name's tld
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Is DNSSEC implemented for this domain name's tld&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("dnssecSupported")]
		public bool DnssecSupported {
			get {
				return this.DnssecSupported_bfield;
			}
			set {
				this.DnssecSupported_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// Does the registry support ipv6 glue record
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Does the registry support ipv6 glue record&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("glueRecordIpv6Supported")]
		public bool GlueRecordIpv6Supported {
			get {
				return this.GlueRecordIpv6Supported_bfield;
			}
			set {
				this.GlueRecordIpv6Supported_bfield = value;
			}
		}
		
		/// <summary>
		/// Does the registry support multi ip glue record
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Does the registry support multi ip glue record&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("glueRecordMultiIpSupported")]
		public bool GlueRecordMultiIpSupported {
			get {
				return this.GlueRecordMultiIpSupported_bfield;
			}
			set {
				this.GlueRecordMultiIpSupported_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.DateTime LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Name servers type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.DomainNsTypeEnum&quot;,&quot;Description&quot;:&quot;Name servers type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("nameServerType")]
		public string NameServerType {
			get {
				return this.NameServerType_bfield;
			}
			set {
				this.NameServerType_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain's offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.OfferEnum&quot;,&quot;Description&quot;:&quot;Domain's offer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// Is whois obfuscation supported by this domain name's registry
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Is whois obfuscation supported by this domain name's registry&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("owoSupported")]
		public bool OwoSupported {
			get {
				return this.OwoSupported_bfield;
			}
			set {
				this.OwoSupported_bfield = value;
			}
		}
		
		/// <summary>
		/// Parent service
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.ParentService&quot;,&quot;Description&quot;:&quot;Parent service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("parentService")]
		public DomainParentService ParentService {
			get {
				return this.ParentService_bfield;
			}
			set {
				this.ParentService_bfield = value;
			}
		}
		
		/// <summary>
		/// Transfer lock status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.DomainLockStatusEnum&quot;,&quot;Description&quot;:&quot;Transfer lock status&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("transferLockStatus")]
		public string TransferLockStatus {
			get {
				return this.TransferLockStatus_bfield;
			}
			set {
				this.TransferLockStatus_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact Owner (you can edit it via /me/contact/&lt;ID&gt;)
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact Owner (you can edit it via /me/contact/&lt;ID&gt;)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("whoisOwner")]
		public string WhoisOwner {
			get {
				return this.WhoisOwner_bfield;
			}
			set {
				this.WhoisOwner_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Name server
	/// </summary>
	public class DomainDomainNs {
		
		private string Host_bfield;
		
		private string Ip_bfield;
		
		/// <summary>
		/// Host
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Host&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("host")]
		public string Host {
			get {
				return this.Host_bfield;
			}
			set {
				this.Host_bfield = value;
			}
		}
		
		/// <summary>
		/// Ip
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;Ip&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// DNS server status
	/// </summary>
	public class DomainDomainNsStatus {
		
		private string State_bfield;
		
		private string Type_bfield;
		
		private System.Nullable<System.DateTime> UsedSince_bfield;
		
		/// <summary>
		/// Whether or not the DNS server is working
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.DomainNsStateEnum&quot;,&quot;Description&quot;:&quot;Whether or not the DNS server is working&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether or not the DNS server is managed by OVH
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.DomainNsTypeEnum&quot;,&quot;Description&quot;:&quot;Whether or not the DNS server is managed by OVH&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
		
		/// <summary>
		/// Date from which the DNS server is used by the domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date from which the DNS server is used by the domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("usedSince")]
		public System.Nullable<System.DateTime> UsedSince {
			get {
				return this.UsedSince_bfield;
			}
			set {
				this.UsedSince_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Glue record
	/// </summary>
	public class DomainGlueRecord {
		
		private string Host_bfield;
		
		private string[] Ips_bfield;
		
		/// <summary>
		/// Host of the glue record
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Host of the glue record&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("host")]
		public string Host {
			get {
				return this.Host_bfield;
			}
			set {
				this.Host_bfield = value;
			}
		}
		
		/// <summary>
		/// Ips of the glue record
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ip[]&quot;,&quot;Description&quot;:&quot;Ips of the glue record&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ips")]
		public string[] Ips {
			get {
				return this.Ips_bfield;
			}
			set {
				this.Ips_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Information about the options of a domain
	/// </summary>
	public class DomainOption {
		
		private System.DateTime ExpirationDate_bfield;
		
		private string Option_bfield;
		
		private string State_bfield;
		
		/// <summary>
		/// Expiration date of the option
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Expiration date of the option&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationDate")]
		public System.DateTime ExpirationDate {
			get {
				return this.ExpirationDate_bfield;
			}
			set {
				this.ExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// The option name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.DomainOptionEnum&quot;,&quot;Description&quot;:&quot;The option name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("option")]
		public string Option {
			get {
				return this.Option_bfield;
			}
			set {
				this.Option_bfield = value;
			}
		}
		
		/// <summary>
		/// The state of the option
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.DomainOptionStateEnum&quot;,&quot;Description&quot;:&quot;The state of the option&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Obfuscate whois
	/// </summary>
	public class DomainOwo {
		
		private string Field_bfield;
		
		/// <summary>
		/// Obfuscated field
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.WhoisObfuscatorFieldsEnum&quot;,&quot;Description&quot;:&quot;Obfuscated field&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("field")]
		public string Field {
			get {
				return this.Field_bfield;
			}
			set {
				this.Field_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Parent service
	/// </summary>
	public class DomainParentService {
		
		private string Name_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Name of the parent service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the parent service&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Type of the parent service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.ParentServiceTypeEnum&quot;,&quot;Description&quot;:&quot;Type of the parent service&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Description not available
	/// </summary>
	public class DomainRule {
		
		private string[] AllowedValues_bfield;
		
		private string Description_bfield;
		
		private string[] Fields_bfield;
		
		private string[] InnerConfigurations_bfield;
		
		private string Label_bfield;
		
		private System.Nullable<bool> Required_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("allowedValues")]
		public string[] AllowedValues {
			get {
				return this.AllowedValues_bfield;
			}
			set {
				this.AllowedValues_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("description")]
		public string Description {
			get {
				return this.Description_bfield;
			}
			set {
				this.Description_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("fields")]
		public string[] Fields {
			get {
				return this.Fields_bfield;
			}
			set {
				this.Fields_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.Rule[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("innerConfigurations")]
		public string[] InnerConfigurations {
			get {
				return this.InnerConfigurations_bfield;
			}
			set {
				this.InnerConfigurations_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("label")]
		public string Label {
			get {
				return this.Label_bfield;
			}
			set {
				this.Label_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("required")]
		public System.Nullable<bool> Required {
			get {
				return this.Required_bfield;
			}
			set {
				this.Required_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Data of a domain option
	/// </summary>
	public class DomainServiceOption {
		
		private string ServiceName_bfield;
		
		/// <summary>
		/// Service name of the option
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Service name of the option&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceName")]
		public string ServiceName {
			get {
				return this.ServiceName_bfield;
			}
			set {
				this.ServiceName_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of the domain options
	/// </summary>
	public class DomainServiceOptions {
		
		private DomainServiceOption Hosting_bfield;
		
		private DomainServiceOption Offer_bfield;
		
		private DomainServiceOption Zone_bfield;
		
		/// <summary>
		/// Hosting option
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.ServiceOption&quot;,&quot;Description&quot;:&quot;Hosting option&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("hosting")]
		public DomainServiceOption Hosting {
			get {
				return this.Hosting_bfield;
			}
			set {
				this.Hosting_bfield = value;
			}
		}
		
		/// <summary>
		/// Offer option (Diamond, Platinum)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.ServiceOption&quot;,&quot;Description&quot;:&quot;Offer option (Diamond, Platinum)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public DomainServiceOption Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// DNS zone option
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.ServiceOption&quot;,&quot;Description&quot;:&quot;DNS zone option&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public DomainServiceOption Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Tasks associated to domain
	/// </summary>
	public class DomainTask {
		
		private bool CanAccelerate_bfield;
		
		private bool CanCancel_bfield;
		
		private bool CanRelaunch_bfield;
		
		private string Comment_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private System.Nullable<System.DateTime> DoneDate_bfield;
		
		private string Function_bfield;
		
		private long Id_bfield;
		
		private System.DateTime LastUpdate_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// Can accelerate the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Can accelerate the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canAccelerate")]
		public bool CanAccelerate {
			get {
				return this.CanAccelerate_bfield;
			}
			set {
				this.CanAccelerate_bfield = value;
			}
		}
		
		/// <summary>
		/// Can cancel the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Can cancel the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canCancel")]
		public bool CanCancel {
			get {
				return this.CanCancel_bfield;
			}
			set {
				this.CanCancel_bfield = value;
			}
		}
		
		/// <summary>
		/// Can relaunch the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Can relaunch the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canRelaunch")]
		public bool CanRelaunch {
			get {
				return this.CanRelaunch_bfield;
			}
			set {
				this.CanRelaunch_bfield = value;
			}
		}
		
		/// <summary>
		/// Comment about the task
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Comment about the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("comment")]
		public string Comment {
			get {
				return this.Comment_bfield;
			}
			set {
				this.Comment_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Done date of the task
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Done date of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("doneDate")]
		public System.Nullable<System.DateTime> DoneDate {
			get {
				return this.DoneDate_bfield;
			}
			set {
				this.DoneDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Function of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Function of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.DateTime LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Status of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.OperationStatusEnum&quot;,&quot;Description&quot;:&quot;Status of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Todo date of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Todo date of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of a UK Registrar (used for outgoing transfer)
	/// </summary>
	public class DomainUkRegistrar {
		
		private string Name_bfield;
		
		private string Tag_bfield;
		
		/// <summary>
		/// Registrar name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Registrar name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Registrar tag
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Registrar tag&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("tag")]
		public string Tag {
			get {
				return this.Tag_bfield;
			}
			set {
				this.Tag_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A configuration rule defines validation to launch when executing an action on a domain (create, trade...). Depending on the extension, the rule may be different
	/// </summary>
	public class DomainconfigurationrulesConstraint {
		
		private DomainconfigurationrulesRule Conditions_bfield;
		
		private string[] Contexts_bfield;
		
		private string Operator_bfield;
		
		private string Value_bfield;
		
		private string[] Values_bfield;
		
		/// <summary>
		/// Whether this constraint is applied or not
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.Rule&quot;,&quot;Description&quot;:&quot;Whether this constraint is applied or not&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("conditions")]
		public DomainconfigurationrulesRule Conditions {
			get {
				return this.Conditions_bfield;
			}
			set {
				this.Conditions_bfield = value;
			}
		}
		
		/// <summary>
		/// The context on which the constraint applies
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.ContextEnum[]&quot;,&quot;Description&quot;:&quot;The context on which the constraint applies&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contexts")]
		public string[] Contexts {
			get {
				return this.Contexts_bfield;
			}
			set {
				this.Contexts_bfield = value;
			}
		}
		
		/// <summary>
		/// The operator of the constraint
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.OperatorEnum&quot;,&quot;Description&quot;:&quot;The operator of the constraint&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("operator")]
		public string Operator {
			get {
				return this.Operator_bfield;
			}
			set {
				this.Operator_bfield = value;
			}
		}
		
		/// <summary>
		/// The value to match against
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The value to match against&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("value")]
		public string Value {
			get {
				return this.Value_bfield;
			}
			set {
				this.Value_bfield = value;
			}
		}
		
		/// <summary>
		/// The values to match against
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;The values to match against&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("values")]
		public string[] Values {
			get {
				return this.Values_bfield;
			}
			set {
				this.Values_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A configuration rule defines validation to launch when executing an action on a domain (create, trade...). Depending on the extension, the rule may be different
	/// </summary>
	public class DomainconfigurationrulesRule {
		
		private string[] And_bfield;
		
		private DomainconfigurationrulesRule Conditions_bfield;
		
		private string[] Constraints_bfield;
		
		private string[] Contexts_bfield;
		
		private string Description_bfield;
		
		private DomainconfigurationrulesRule Fields_bfield;
		
		private string Label_bfield;
		
		private string[] Or_bfield;
		
		private string Placeholder_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// An &quot;and&quot; operator on multiple rules
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.Rule[]&quot;,&quot;Description&quot;:&quot;An \&quot;and\&quot; operator on multiple rules&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("and")]
		public string[] And {
			get {
				return this.And_bfield;
			}
			set {
				this.And_bfield = value;
			}
		}
		
		/// <summary>
		/// Whether this rule is applied or not
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.Rule&quot;,&quot;Description&quot;:&quot;Whether this rule is applied or not&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("conditions")]
		public DomainconfigurationrulesRule Conditions {
			get {
				return this.Conditions_bfield;
			}
			set {
				this.Conditions_bfield = value;
			}
		}
		
		/// <summary>
		/// The constraints of the rule
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.Constraint[]&quot;,&quot;Description&quot;:&quot;The constraints of the rule&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("constraints")]
		public string[] Constraints {
			get {
				return this.Constraints_bfield;
			}
			set {
				this.Constraints_bfield = value;
			}
		}
		
		/// <summary>
		/// The context on which the rule applies
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.ContextEnum[]&quot;,&quot;Description&quot;:&quot;The context on which the rule applies&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contexts")]
		public string[] Contexts {
			get {
				return this.Contexts_bfield;
			}
			set {
				this.Contexts_bfield = value;
			}
		}
		
		/// <summary>
		/// The description of the rule
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The description of the rule&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("description")]
		public string Description {
			get {
				return this.Description_bfield;
			}
			set {
				this.Description_bfield = value;
			}
		}
		
		/// <summary>
		/// The fields with specific rules
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.Rule&quot;,&quot;Description&quot;:&quot;The fields with specific rules&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("fields")]
		public DomainconfigurationrulesRule Fields {
			get {
				return this.Fields_bfield;
			}
			set {
				this.Fields_bfield = value;
			}
		}
		
		/// <summary>
		/// The label of the rule
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The label of the rule&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("label")]
		public string Label {
			get {
				return this.Label_bfield;
			}
			set {
				this.Label_bfield = value;
			}
		}
		
		/// <summary>
		/// An &quot;or&quot; operator on multiple rules
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.Rule[]&quot;,&quot;Description&quot;:&quot;An \&quot;or\&quot; operator on multiple rules&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("or")]
		public string[] Or {
			get {
				return this.Or_bfield;
			}
			set {
				this.Or_bfield = value;
			}
		}
		
		/// <summary>
		/// The default value used for the rule
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The default value used for the rule&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("placeholder")]
		public string Placeholder {
			get {
				return this.Placeholder_bfield;
			}
			set {
				this.Placeholder_bfield = value;
			}
		}
		
		/// <summary>
		/// The type of the object the rule applies on
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.TypeEnum&quot;,&quot;Description&quot;:&quot;The type of the object the rule applies on&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// A rule data contains the fields that must be validated against a rule
	/// </summary>
	public class DomainconfigurationrulesRuleData {
		
		private NichandleNichandle AdminAccount_bfield;
		
		private DomainData Domain_bfield;
		
		private DomainconfigurationrulesRuleExtraData Extras_bfield;
		
		private DomainContact Owner_bfield;
		
		private NichandleNichandle TechAccount_bfield;
		
		/// <summary>
		/// The admin contact data
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.Nichandle&quot;,&quot;Description&quot;:&quot;The admin contact data&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("adminAccount")]
		public NichandleNichandle AdminAccount {
			get {
				return this.AdminAccount_bfield;
			}
			set {
				this.AdminAccount_bfield = value;
			}
		}
		
		/// <summary>
		/// The domain data
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.Data&quot;,&quot;Description&quot;:&quot;The domain data&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public DomainData Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// The extra data of the rule
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.configuration.rules.RuleExtraData&quot;,&quot;Description&quot;:&quot;The extra data of the rule&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("extras")]
		public DomainconfigurationrulesRuleExtraData Extras {
			get {
				return this.Extras_bfield;
			}
			set {
				this.Extras_bfield = value;
			}
		}
		
		/// <summary>
		/// The owner contact data
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.Contact&quot;,&quot;Description&quot;:&quot;The owner contact data&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("owner")]
		public DomainContact Owner {
			get {
				return this.Owner_bfield;
			}
			set {
				this.Owner_bfield = value;
			}
		}
		
		/// <summary>
		/// The tech contact data
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.Nichandle&quot;,&quot;Description&quot;:&quot;The tech contact data&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("techAccount")]
		public NichandleNichandle TechAccount {
			get {
				return this.TechAccount_bfield;
			}
			set {
				this.TechAccount_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// The extra data contain additional rule data fields
	/// </summary>
	public class DomainconfigurationrulesRuleExtraData {
		
		private System.Nullable<bool> AcceptCondition_bfield;
		
		private string AuthInfo_bfield;
		
		/// <summary>
		/// Whether you accept the domain specific conditions or not
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Whether you accept the domain specific conditions or not&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("acceptCondition")]
		public System.Nullable<bool> AcceptCondition {
			get {
				return this.AcceptCondition_bfield;
			}
			set {
				this.AcceptCondition_bfield = value;
			}
		}
		
		/// <summary>
		/// The auth info code for the domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;password&quot;,&quot;Description&quot;:&quot;The auth info code for the domain&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("authInfo")]
		public string AuthInfo {
			get {
				return this.AuthInfo_bfield;
			}
			set {
				this.AuthInfo_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of the domain custom fields
	/// </summary>
	public class DomainconfigurationsCustomFields {
		
		private string Audience_bfield;
		
		private string AuthInfo_bfield;
		
		private string[] IsFor_bfield;
		
		private string OtherPurpose_bfield;
		
		private string Reason_bfield;
		
		private string Represent_bfield;
		
		/// <summary>
		/// Domain name audience
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name audience&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("audience")]
		public string Audience {
			get {
				return this.Audience_bfield;
			}
			set {
				this.Audience_bfield = value;
			}
		}
		
		/// <summary>
		/// Auth Info
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;password&quot;,&quot;Description&quot;:&quot;Auth Info&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("authInfo")]
		public string AuthInfo {
			get {
				return this.AuthInfo_bfield;
			}
			set {
				this.AuthInfo_bfield = value;
			}
		}
		
		/// <summary>
		/// Purposes of the domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.IsForEnum[]&quot;,&quot;Description&quot;:&quot;Purposes of the domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("isFor")]
		public string[] IsFor {
			get {
				return this.IsFor_bfield;
			}
			set {
				this.IsFor_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain name other purpose
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name other purpose&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("otherPurpose")]
		public string OtherPurpose {
			get {
				return this.OtherPurpose_bfield;
			}
			set {
				this.OtherPurpose_bfield = value;
			}
		}
		
		/// <summary>
		/// Why you want to buy this domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Why you want to buy this domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("reason")]
		public string Reason {
			get {
				return this.Reason_bfield;
			}
			set {
				this.Reason_bfield = value;
			}
		}
		
		/// <summary>
		/// Represented company
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Represented company&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("represent")]
		public string Represent {
			get {
				return this.Represent_bfield;
			}
			set {
				this.Represent_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of the obfuscated emails configuration
	/// </summary>
	public class DomainconfigurationsObfuscatedEmail {
		
		private string Type_bfield;
		
		private string Value_bfield;
		
		/// <summary>
		/// Contact's type associated to the obfuscated email
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.ContactAllTypesEnum&quot;,&quot;Description&quot;:&quot;Contact's type associated to the obfuscated email&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
		
		/// <summary>
		/// Obfuscated email value
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Obfuscated email value&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("value")]
		public string Value {
			get {
				return this.Value_bfield;
			}
			set {
				this.Value_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of the optin configuration
	/// </summary>
	public class DomainconfigurationsOptin {
		
		private string[] Fields_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Displayed fields
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.OptinFieldsEnum[]&quot;,&quot;Description&quot;:&quot;Displayed fields&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("fields")]
		public string[] Fields {
			get {
				return this.Fields_bfield;
			}
			set {
				this.Fields_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact's type associated to the optin configuration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.ContactAllTypesEnum&quot;,&quot;Description&quot;:&quot;Contact's type associated to the optin configuration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of an Inpi additional information for a corporation
	/// </summary>
	public class DomaindataAfnicCorporationTrademarkContact {
		
		private long ContactId_bfield;
		
		private long Id_bfield;
		
		private string InpiNumber_bfield;
		
		private string InpiTrademarkOwner_bfield;
		
		/// <summary>
		/// Contact ID related to the Inpi additional information
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Contact ID related to the Inpi additional information&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("contactId")]
		public long ContactId {
			get {
				return this.ContactId_bfield;
			}
			set {
				this.ContactId_bfield = value;
			}
		}
		
		/// <summary>
		/// Corporation Inpi additional information ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Corporation Inpi additional information ID&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of the Inpi declaration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Number of the Inpi declaration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("inpiNumber")]
		public string InpiNumber {
			get {
				return this.InpiNumber_bfield;
			}
			set {
				this.InpiNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Owner of the trademark
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Owner of the trademark&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("inpiTrademarkOwner")]
		public string InpiTrademarkOwner {
			get {
				return this.InpiTrademarkOwner_bfield;
			}
			set {
				this.InpiTrademarkOwner_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of a Association additional information
	/// </summary>
	public class DomaindataAssociationContact {
		
		private long ContactId_bfield;
		
		private string DeclarationDate_bfield;
		
		private long Id_bfield;
		
		private string PublicationDate_bfield;
		
		private string PublicationNumber_bfield;
		
		private string PublicationPageNumber_bfield;
		
		/// <summary>
		/// Contact ID related to the association contact information
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Contact ID related to the association contact information&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("contactId")]
		public long ContactId {
			get {
				return this.ContactId_bfield;
			}
			set {
				this.ContactId_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the declaration of the association
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:&quot;Date of the declaration of the association&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("declarationDate")]
		public string DeclarationDate {
			get {
				return this.DeclarationDate_bfield;
			}
			set {
				this.DeclarationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Association additional information ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Association additional information ID&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Date of the publication of the declaration of the association
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:&quot;Date of the publication of the declaration of the association&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("publicationDate")]
		public string PublicationDate {
			get {
				return this.PublicationDate_bfield;
			}
			set {
				this.PublicationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of the publication of the declaration of the association
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Number of the publication of the declaration of the association&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("publicationNumber")]
		public string PublicationNumber {
			get {
				return this.PublicationNumber_bfield;
			}
			set {
				this.PublicationNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Page number of the publication of the declaration of the association
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Page number of the publication of the declaration of the association&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("publicationPageNumber")]
		public string PublicationPageNumber {
			get {
				return this.PublicationPageNumber_bfield;
			}
			set {
				this.PublicationPageNumber_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of an .pro Contact Resource
	/// </summary>
	public class DomaindataProContact {
		
		private string Authority_bfield;
		
		private string AuthorityWebsite_bfield;
		
		private long Id_bfield;
		
		private string JobDescription_bfield;
		
		private string LicenseNumber_bfield;
		
		/// <summary>
		/// Authority that certify your profesional status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Authority that certify your profesional status&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("authority")]
		public string Authority {
			get {
				return this.Authority_bfield;
			}
			set {
				this.Authority_bfield = value;
			}
		}
		
		/// <summary>
		/// Website of the authority that certify your profesional status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Website of the authority that certify your profesional status&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("authorityWebsite")]
		public string AuthorityWebsite {
			get {
				return this.AuthorityWebsite_bfield;
			}
			set {
				this.AuthorityWebsite_bfield = value;
			}
		}
		
		/// <summary>
		/// .pro Contact ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;.pro Contact ID&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Description of your job
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Description of your job&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("jobDescription")]
		public string JobDescription {
			get {
				return this.JobDescription_bfield;
			}
			set {
				this.JobDescription_bfield = value;
			}
		}
		
		/// <summary>
		/// License number given by the authority
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;License number given by the authority&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("licenseNumber")]
		public string LicenseNumber {
			get {
				return this.LicenseNumber_bfield;
			}
			set {
				this.LicenseNumber_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of a SMD Resource file
	/// </summary>
	public class DomaindataSmd {
		
		private string Data_bfield;
		
		private long Id_bfield;
		
		private System.Nullable<System.DateTime> NotAfter_bfield;
		
		private System.Nullable<System.DateTime> NotBefore_bfield;
		
		private string[] ProtectedLabels_bfield;
		
		private string SmdId_bfield;
		
		/// <summary>
		/// SMD file content
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;SMD file content&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("data")]
		public string Data {
			get {
				return this.Data_bfield;
			}
			set {
				this.Data_bfield = value;
			}
		}
		
		/// <summary>
		/// SMD file ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;SMD file ID&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Date when information about SMD file aren't valid anymore
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date when information about SMD file aren't valid anymore&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("notAfter")]
		public System.Nullable<System.DateTime> NotAfter {
			get {
				return this.NotAfter_bfield;
			}
			set {
				this.NotAfter_bfield = value;
			}
		}
		
		/// <summary>
		/// Date before when information about SMD file aren't valid yet
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date before when information about SMD file aren't valid yet&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("notBefore")]
		public System.Nullable<System.DateTime> NotBefore {
			get {
				return this.NotBefore_bfield;
			}
			set {
				this.NotBefore_bfield = value;
			}
		}
		
		/// <summary>
		/// List of the labels that are protected with that SMD file
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.data.SmdLabel[]&quot;,&quot;Description&quot;:&quot;List of the labels that are protected with that SMD file&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("protectedLabels")]
		public string[] ProtectedLabels {
			get {
				return this.ProtectedLabels_bfield;
			}
			set {
				this.ProtectedLabels_bfield = value;
			}
		}
		
		/// <summary>
		/// TMCH Internal identifier
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;TMCH Internal identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("smdId")]
		public string SmdId {
			get {
				return this.SmdId_bfield;
			}
			set {
				this.SmdId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of a protected label
	/// </summary>
	public class DomaindataSmdLabel {
		
		private string Label_bfield;
		
		private string Trademark_bfield;
		
		/// <summary>
		/// Label that is protected
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Label that is protected&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("label")]
		public string Label {
			get {
				return this.Label_bfield;
			}
			set {
				this.Label_bfield = value;
			}
		}
		
		/// <summary>
		/// Trademark associated to the protected label
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Trademark associated to the protected label&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("trademark")]
		public string Trademark {
			get {
				return this.Trademark_bfield;
			}
			set {
				this.Trademark_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Address for a claim notice holder
	/// </summary>
	public class DomaindataclaimNoticeAddress {
		
		private string City_bfield;
		
		private string CountryCode_bfield;
		
		private string Fax_bfield;
		
		private string FaxExtension_bfield;
		
		private string PostalCode_bfield;
		
		private string StateOrProvince_bfield;
		
		private string[] Streets_bfield;
		
		private string Voice_bfield;
		
		private string VoiceExtension_bfield;
		
		/// <summary>
		/// City
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;City&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("city")]
		public string City {
			get {
				return this.City_bfield;
			}
			set {
				this.City_bfield = value;
			}
		}
		
		/// <summary>
		/// Country code
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.CountryEnum&quot;,&quot;Description&quot;:&quot;Country code&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("countryCode")]
		public string CountryCode {
			get {
				return this.CountryCode_bfield;
			}
			set {
				this.CountryCode_bfield = value;
			}
		}
		
		/// <summary>
		/// Fax number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;phoneNumber&quot;,&quot;Description&quot;:&quot;Fax number&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("fax")]
		public string Fax {
			get {
				return this.Fax_bfield;
			}
			set {
				this.Fax_bfield = value;
			}
		}
		
		/// <summary>
		/// Fax number extension
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Fax number extension&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("faxExtension")]
		public string FaxExtension {
			get {
				return this.FaxExtension_bfield;
			}
			set {
				this.FaxExtension_bfield = value;
			}
		}
		
		/// <summary>
		/// Postal zip code
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Postal zip code&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("postalCode")]
		public string PostalCode {
			get {
				return this.PostalCode_bfield;
			}
			set {
				this.PostalCode_bfield = value;
			}
		}
		
		/// <summary>
		/// State of province
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;State of province&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("stateOrProvince")]
		public string StateOrProvince {
			get {
				return this.StateOrProvince_bfield;
			}
			set {
				this.StateOrProvince_bfield = value;
			}
		}
		
		/// <summary>
		/// Array of street name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Array of street name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("streets")]
		public string[] Streets {
			get {
				return this.Streets_bfield;
			}
			set {
				this.Streets_bfield = value;
			}
		}
		
		/// <summary>
		/// Phone number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;phoneNumber&quot;,&quot;Description&quot;:&quot;Phone number&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("voice")]
		public string Voice {
			get {
				return this.Voice_bfield;
			}
			set {
				this.Voice_bfield = value;
			}
		}
		
		/// <summary>
		/// Phone number extension
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Phone number extension&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("voiceExtension")]
		public string VoiceExtension {
			get {
				return this.VoiceExtension_bfield;
			}
			set {
				this.VoiceExtension_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Definition of claim notices applying to a domain name
	/// </summary>
	public class DomaindataclaimNoticeClaimNotice {
		
		private string[] Claims_bfield;
		
		private string EndingDate_bfield;
		
		private string Id_bfield;
		
		private string Label_bfield;
		
		private string StartingDate_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Array of claim notice for the domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.data.claimNotice.ClaimNoticeDecision[]&quot;,&quot;Description&quot;:&quot;Array of claim notice for the domain&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("claims")]
		public string[] Claims {
			get {
				return this.Claims_bfield;
			}
			set {
				this.Claims_bfield = value;
			}
		}
		
		/// <summary>
		/// Ending date of claim notice
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Ending date of claim notice&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("endingDate")]
		public string EndingDate {
			get {
				return this.EndingDate_bfield;
			}
			set {
				this.EndingDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Claim notice ID
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Claim notice ID&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public string Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Label referring to claim notice
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Label referring to claim notice&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("label")]
		public string Label {
			get {
				return this.Label_bfield;
			}
			set {
				this.Label_bfield = value;
			}
		}
		
		/// <summary>
		/// Beginning date of claim notice
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Beginning date of claim notice&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("startingDate")]
		public string StartingDate {
			get {
				return this.StartingDate_bfield;
			}
			set {
				this.StartingDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Type of claim notice
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;domain.data.claimNotice.ClaimNoticeTypeEnum&quot;,&quot;Description&quot;:&quot;Type of claim notice&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Definition of a single claim notice
	/// </summary>
	public class DomaindataclaimNoticeClaimNoticeDecision {
		
		private string[] Classifications_bfield;
		
		private string[] CourtDecisions_bfield;
		
		private string GoodsAndServices_bfield;
		
		private string Jurisdiction_bfield;
		
		private string JurisdictionCountryCode_bfield;
		
		private string MarkName_bfield;
		
		private string[] TrademarkContacts_bfield;
		
		private string[] TrademarkHolders_bfield;
		
		private string[] TrademarkUDRP_bfield;
		
		/// <summary>
		/// Classifications where trademark claim notice apply
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.data.claimNotice.Classification[]&quot;,&quot;Description&quot;:&quot;Classifications where trademark claim notice apply&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("classifications")]
		public string[] Classifications {
			get {
				return this.Classifications_bfield;
			}
			set {
				this.Classifications_bfield = value;
			}
		}
		
		/// <summary>
		/// Array of court decisions related to claim notice
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.data.claimNotice.CourtDecision[]&quot;,&quot;Description&quot;:&quot;Array of court decisions related to claim notice&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("courtDecisions")]
		public string[] CourtDecisions {
			get {
				return this.CourtDecisions_bfield;
			}
			set {
				this.CourtDecisions_bfield = value;
			}
		}
		
		/// <summary>
		/// Goods and services on which apply claim notice
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Goods and services on which apply claim notice&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("goodsAndServices")]
		public string GoodsAndServices {
			get {
				return this.GoodsAndServices_bfield;
			}
			set {
				this.GoodsAndServices_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of jurisdiction
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of jurisdiction&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("jurisdiction")]
		public string Jurisdiction {
			get {
				return this.Jurisdiction_bfield;
			}
			set {
				this.Jurisdiction_bfield = value;
			}
		}
		
		/// <summary>
		/// Jurisdiction country code
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Jurisdiction country code&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("jurisdictionCountryCode")]
		public string JurisdictionCountryCode {
			get {
				return this.JurisdictionCountryCode_bfield;
			}
			set {
				this.JurisdictionCountryCode_bfield = value;
			}
		}
		
		/// <summary>
		/// Mark name implicated in claim notice
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Mark name implicated in claim notice&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("markName")]
		public string MarkName {
			get {
				return this.MarkName_bfield;
			}
			set {
				this.MarkName_bfield = value;
			}
		}
		
		/// <summary>
		/// Trademark contacts
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.data.claimNotice.Contact[]&quot;,&quot;Description&quot;:&quot;Trademark contacts&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("trademarkContacts")]
		public string[] TrademarkContacts {
			get {
				return this.TrademarkContacts_bfield;
			}
			set {
				this.TrademarkContacts_bfield = value;
			}
		}
		
		/// <summary>
		/// Trademark holders
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.data.claimNotice.Contact[]&quot;,&quot;Description&quot;:&quot;Trademark holders&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("trademarkHolders")]
		public string[] TrademarkHolders {
			get {
				return this.TrademarkHolders_bfield;
			}
			set {
				this.TrademarkHolders_bfield = value;
			}
		}
		
		/// <summary>
		/// Trademark UDRP informations
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.data.claimNotice.UDRP[]&quot;,&quot;Description&quot;:&quot;Trademark UDRP informations&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("trademarkUDRP")]
		public string[] TrademarkUDRP {
			get {
				return this.TrademarkUDRP_bfield;
			}
			set {
				this.TrademarkUDRP_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Definition of a trademark claim notice classification
	/// </summary>
	public class DomaindataclaimNoticeClassification {
		
		private string Description_bfield;
		
		private string Number_bfield;
		
		/// <summary>
		/// Summary of the classification
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Summary of the classification&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("description")]
		public string Description {
			get {
				return this.Description_bfield;
			}
			set {
				this.Description_bfield = value;
			}
		}
		
		/// <summary>
		/// Code of the classification
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Code of the classification&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("number")]
		public string Number {
			get {
				return this.Number_bfield;
			}
			set {
				this.Number_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Contact definition of a claim notice holder
	/// </summary>
	public class DomaindataclaimNoticeContact {
		
		private DomaindataclaimNoticeAddress Address_bfield;
		
		private string Email_bfield;
		
		private string Entitlement_bfield;
		
		private string Name_bfield;
		
		private string Organisation_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Address of holder
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.data.claimNotice.Address&quot;,&quot;Description&quot;:&quot;Address of holder&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("address")]
		public DomaindataclaimNoticeAddress Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// Email address
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Email address&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("email")]
		public string Email {
			get {
				return this.Email_bfield;
			}
			set {
				this.Email_bfield = value;
			}
		}
		
		/// <summary>
		/// Legitimacy of holder
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Legitimacy of holder&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("entitlement")]
		public string Entitlement {
			get {
				return this.Entitlement_bfield;
			}
			set {
				this.Entitlement_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of claim notice holder
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of claim notice holder&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Organisation name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Organisation name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("organisation")]
		public string Organisation {
			get {
				return this.Organisation_bfield;
			}
			set {
				this.Organisation_bfield = value;
			}
		}
		
		/// <summary>
		/// Type of contact
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Type of contact&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Definition of a court decision
	/// </summary>
	public class DomaindataclaimNoticeCourtDecision {
		
		private string CountryCode_bfield;
		
		private string CourtName_bfield;
		
		private string ReferenceNumber_bfield;
		
		private string[] Regions_bfield;
		
		/// <summary>
		/// Country code
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Country code&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("countryCode")]
		public string CountryCode {
			get {
				return this.CountryCode_bfield;
			}
			set {
				this.CountryCode_bfield = value;
			}
		}
		
		/// <summary>
		/// Court name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Court name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("courtName")]
		public string CourtName {
			get {
				return this.CourtName_bfield;
			}
			set {
				this.CourtName_bfield = value;
			}
		}
		
		/// <summary>
		/// Reference number of court decision
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Reference number of court decision&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("referenceNumber")]
		public string ReferenceNumber {
			get {
				return this.ReferenceNumber_bfield;
			}
			set {
				this.ReferenceNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Regions where court decision apply
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Regions where court decision apply&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("regions")]
		public string[] Regions {
			get {
				return this.Regions_bfield;
			}
			set {
				this.Regions_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Definition of a UDRP procedure
	/// </summary>
	public class DomaindataclaimNoticeUDRP {
		
		private string CaseNumber_bfield;
		
		private string UdrpProvider_bfield;
		
		/// <summary>
		/// Case number
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Case number&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("caseNumber")]
		public string CaseNumber {
			get {
				return this.CaseNumber_bfield;
			}
			set {
				this.CaseNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// UDRP Provider
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;UDRP Provider&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("udrpProvider")]
		public string UdrpProvider {
			get {
				return this.UdrpProvider_bfield;
			}
			set {
				this.UdrpProvider_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Representation of the optin rule
	/// </summary>
	public class DomainrulesOptin {
		
		private string[] Fields_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Displayed fields
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.OptinFieldsEnum[]&quot;,&quot;Description&quot;:&quot;Displayed fields&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("fields")]
		public string[] Fields {
			get {
				return this.Fields_bfield;
			}
			set {
				this.Fields_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact's type associated to the optin rule
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.ContactAllTypesEnum&quot;,&quot;Description&quot;:&quot;Contact's type associated to the optin rule&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// DNS Anycast service
	/// </summary>
	public class DomainzoneAnycast {
		
		private string Name_bfield;
		
		/// <summary>
		/// Zone name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Manage Dnssec for this zone
	/// </summary>
	public class DomainzoneDnssec {
		
		private string Status_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;dnssec.DnssecStatusEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Manage DynHost login
	/// </summary>
	public class DomainzoneDynHostLogin {
		
		private string Login_bfield;
		
		private string SubDomain_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Login
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Login&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("login")]
		public string Login {
			get {
				return this.Login_bfield;
			}
			set {
				this.Login_bfield = value;
			}
		}
		
		/// <summary>
		/// Subdomain that the login will be allowed to update (* to allow all)
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Subdomain that the login will be allowed to update (* to allow all)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("subDomain")]
		public string SubDomain {
			get {
				return this.SubDomain_bfield;
			}
			set {
				this.SubDomain_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// DynHost record
	/// </summary>
	public class DomainzoneDynHostRecord {
		
		private long Id_bfield;
		
		private string Ip_bfield;
		
		private string SubDomain_bfield;
		
		private System.Nullable<long> Ttl_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Id of the DynHost record
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the DynHost record&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Ip address of the DynHost record
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ip&quot;,&quot;Description&quot;:&quot;Ip address of the DynHost record&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// Subdomain of the DynHost record
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Subdomain of the DynHost record&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("subDomain")]
		public string SubDomain {
			get {
				return this.SubDomain_bfield;
			}
			set {
				this.SubDomain_bfield = value;
			}
		}
		
		/// <summary>
		/// DynHost record ttl
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;DynHost record ttl&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ttl")]
		public System.Nullable<long> Ttl {
			get {
				return this.Ttl_bfield;
			}
			set {
				this.Ttl_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone of the DynHost record
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone of the DynHost record&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Zone resource records
	/// </summary>
	public class DomainzoneRecord {
		
		private string FieldType_bfield;
		
		private long Id_bfield;
		
		private string SubDomain_bfield;
		
		private string Target_bfield;
		
		private System.Nullable<long> Ttl_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Resource record Name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;zone.NamedResolutionFieldTypeEnum&quot;,&quot;Description&quot;:&quot;Resource record Name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("fieldType")]
		public string FieldType {
			get {
				return this.FieldType_bfield;
			}
			set {
				this.FieldType_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of the zone resource record
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the zone resource record&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Resource record subdomain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Resource record subdomain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("subDomain")]
		public string SubDomain {
			get {
				return this.SubDomain_bfield;
			}
			set {
				this.SubDomain_bfield = value;
			}
		}
		
		/// <summary>
		/// Resource record target
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Resource record target&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("target")]
		public string Target {
			get {
				return this.Target_bfield;
			}
			set {
				this.Target_bfield = value;
			}
		}
		
		/// <summary>
		/// Resource record ttl
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Resource record ttl&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ttl")]
		public System.Nullable<long> Ttl {
			get {
				return this.Ttl_bfield;
			}
			set {
				this.Ttl_bfield = value;
			}
		}
		
		/// <summary>
		/// Resource record zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Resource record zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Redirection
	/// </summary>
	public class DomainzoneRedirection {
		
		private string Description_bfield;
		
		private long Id_bfield;
		
		private string Keywords_bfield;
		
		private string SubDomain_bfield;
		
		private string Target_bfield;
		
		private string Title_bfield;
		
		private string Type_bfield;
		
		private string Zone_bfield;
		
		/// <summary>
		/// Desciption for invisible redirection
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Desciption for invisible redirection&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("description")]
		public string Description {
			get {
				return this.Description_bfield;
			}
			set {
				this.Description_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of the redirection
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the redirection&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Keywords for invisible redirection
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Keywords for invisible redirection&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("keywords")]
		public string Keywords {
			get {
				return this.Keywords_bfield;
			}
			set {
				this.Keywords_bfield = value;
			}
		}
		
		/// <summary>
		/// subdomain to redirect
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;subdomain to redirect&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("subDomain")]
		public string SubDomain {
			get {
				return this.SubDomain_bfield;
			}
			set {
				this.SubDomain_bfield = value;
			}
		}
		
		/// <summary>
		/// Target of the redirection
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Target of the redirection&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("target")]
		public string Target {
			get {
				return this.Target_bfield;
			}
			set {
				this.Target_bfield = value;
			}
		}
		
		/// <summary>
		/// Title for invisible redirection
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Title for invisible redirection&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("title")]
		public string Title {
			get {
				return this.Title_bfield;
			}
			set {
				this.Title_bfield = value;
			}
		}
		
		/// <summary>
		/// Redirection type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;zone.RedirectionTypeEnum&quot;,&quot;Description&quot;:&quot;Redirection type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
		
		/// <summary>
		/// Redirection zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Redirection zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zone")]
		public string Zone {
			get {
				return this.Zone_bfield;
			}
			set {
				this.Zone_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Zone Start Of Authority
	/// </summary>
	public class DomainzoneSoa {
		
		private string Email_bfield;
		
		private long Expire_bfield;
		
		private long NxDomainTtl_bfield;
		
		private long Refresh_bfield;
		
		private long Serial_bfield;
		
		private string Server_bfield;
		
		private long Ttl_bfield;
		
		/// <summary>
		/// Email address of the DNS Administrator
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Email address of the DNS Administrator&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("email")]
		public string Email {
			get {
				return this.Email_bfield;
			}
			set {
				this.Email_bfield = value;
			}
		}
		
		/// <summary>
		/// When a zone transfer fails, a countdown clock begins. When the number of seconds set in the expire field elapses, the nameserver stops answering for that zone file
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;When a zone transfer fails, a countdown clock begins. When the number of seconds set in the expire field elapses, the nameserver stops answering for that zone file&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("expire")]
		public long Expire {
			get {
				return this.Expire_bfield;
			}
			set {
				this.Expire_bfield = value;
			}
		}
		
		/// <summary>
		/// Non-Existent Domain TTL, if the name server returns a negative response, the remote server should wait the number of seconds set in the nxDomainTtl field before trying again
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Non-Existent Domain TTL, if the name server returns a negative response, the remote server should wait the number of seconds set in the nxDomainTtl field before trying again&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("nxDomainTtl")]
		public long NxDomainTtl {
			get {
				return this.NxDomainTtl_bfield;
			}
			set {
				this.NxDomainTtl_bfield = value;
			}
		}
		
		/// <summary>
		/// The refresh value determines the interval in seconds between successful zone transfers of the entire zone file from a nameserver to another.
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The refresh value determines the interval in seconds between successful zone transfers of the entire zone file from a nameserver to another.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("refresh")]
		public long Refresh {
			get {
				return this.Refresh_bfield;
			}
			set {
				this.Refresh_bfield = value;
			}
		}
		
		/// <summary>
		/// The serial number is used to indicate which copy of the zone file is the most current. When editing zone files, you must increment the serial number
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;The serial number is used to indicate which copy of the zone file is the most current. When editing zone files, you must increment the serial number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("serial")]
		public long Serial {
			get {
				return this.Serial_bfield;
			}
			set {
				this.Serial_bfield = value;
			}
		}
		
		/// <summary>
		/// Primary authoritative server
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Primary authoritative server&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("server")]
		public string Server {
			get {
				return this.Server_bfield;
			}
			set {
				this.Server_bfield = value;
			}
		}
		
		/// <summary>
		/// Time To Live in seconds
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Time To Live in seconds&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ttl")]
		public long Ttl {
			get {
				return this.Ttl_bfield;
			}
			set {
				this.Ttl_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Tasks associated to a zone
	/// </summary>
	public class DomainzoneTask {
		
		private bool CanAccelerate_bfield;
		
		private bool CanCancel_bfield;
		
		private bool CanRelaunch_bfield;
		
		private string Comment_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private System.Nullable<System.DateTime> DoneDate_bfield;
		
		private string Function_bfield;
		
		private long Id_bfield;
		
		private System.DateTime LastUpdate_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// Can accelerate the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Can accelerate the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canAccelerate")]
		public bool CanAccelerate {
			get {
				return this.CanAccelerate_bfield;
			}
			set {
				this.CanAccelerate_bfield = value;
			}
		}
		
		/// <summary>
		/// Can cancel the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Can cancel the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canCancel")]
		public bool CanCancel {
			get {
				return this.CanCancel_bfield;
			}
			set {
				this.CanCancel_bfield = value;
			}
		}
		
		/// <summary>
		/// Can relaunch the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Can relaunch the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canRelaunch")]
		public bool CanRelaunch {
			get {
				return this.CanRelaunch_bfield;
			}
			set {
				this.CanRelaunch_bfield = value;
			}
		}
		
		/// <summary>
		/// Comment about the task
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Comment about the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("comment")]
		public string Comment {
			get {
				return this.Comment_bfield;
			}
			set {
				this.Comment_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Done date of the task
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Done date of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("doneDate")]
		public System.Nullable<System.DateTime> DoneDate {
			get {
				return this.DoneDate_bfield;
			}
			set {
				this.DoneDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Function of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Function of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Id of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Id of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.DateTime LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Status of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;domain.OperationStatusEnum&quot;,&quot;Description&quot;:&quot;Status of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Todo date of the task
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Todo date of the task&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Zone dns Management
	/// </summary>
	public class DomainzoneZone {
		
		private bool DnssecSupported_bfield;
		
		private bool HasDnsAnycast_bfield;
		
		private System.DateTime LastUpdate_bfield;
		
		private string Name_bfield;
		
		private string[] NameServers_bfield;
		
		/// <summary>
		/// Is DNSSEC supported by this zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Is DNSSEC supported by this zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("dnssecSupported")]
		public bool DnssecSupported {
			get {
				return this.DnssecSupported_bfield;
			}
			set {
				this.DnssecSupported_bfield = value;
			}
		}
		
		/// <summary>
		/// hasDnsAnycast flag of the DNS zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;hasDnsAnycast flag of the DNS zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("hasDnsAnycast")]
		public bool HasDnsAnycast {
			get {
				return this.HasDnsAnycast_bfield;
			}
			set {
				this.HasDnsAnycast_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date of the DNS zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date of the DNS zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.DateTime LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Zone name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zone name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Name servers that host the DNS zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Name servers that host the DNS zone&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("nameServers")]
		public string[] NameServers {
			get {
				return this.NameServers_bfield;
			}
			set {
				this.NameServers_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Zone restore point
	/// </summary>
	public class DomainzoneZoneRestorePoint {
		
		private System.DateTime CreationDate_bfield;
		
		private string ZoneFileUrl_bfield;
		
		/// <summary>
		/// Date of backup creation
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Date of backup creation&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// URL to get backup content
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;URL to get backup content&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("zoneFileUrl")]
		public string ZoneFileUrl {
			get {
				return this.ZoneFileUrl_bfield;
			}
			set {
				this.ZoneFileUrl_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Customer currency
	/// </summary>
	public class NichandleCurrency {
		
		private string Code_bfield;
		
		private string Symbol_bfield;
		
		/// <summary>
		/// Currency code
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Currency code&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("code")]
		public string Code {
			get {
				return this.Code_bfield;
			}
			set {
				this.Code_bfield = value;
			}
		}
		
		/// <summary>
		/// Currency symbol
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Currency symbol&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("symbol")]
		public string Symbol {
			get {
				return this.Symbol_bfield;
			}
			set {
				this.Symbol_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about your OVH identifier
	/// </summary>
	public class NichandleNichandle {
		
		private string Address_bfield;
		
		private string Area_bfield;
		
		private string BirthCity_bfield;
		
		private string BirthDay_bfield;
		
		private string City_bfield;
		
		private string CompanyNationalIdentificationNumber_bfield;
		
		private string CorporationType_bfield;
		
		private string Country_bfield;
		
		private NichandleCurrency Currency_bfield;
		
		private string CustomerCode_bfield;
		
		private string Email_bfield;
		
		private string Fax_bfield;
		
		private string Firstname_bfield;
		
		private string ItalianSDI_bfield;
		
		private string Language_bfield;
		
		private string Legalform_bfield;
		
		private string Name_bfield;
		
		private string NationalIdentificationNumber_bfield;
		
		private string Nichandle_bfield;
		
		private string Organisation_bfield;
		
		private string OvhCompany_bfield;
		
		private string OvhSubsidiary_bfield;
		
		private string Phone_bfield;
		
		private string PhoneCountry_bfield;
		
		private string Sex_bfield;
		
		private string SpareEmail_bfield;
		
		private string State_bfield;
		
		private string Vat_bfield;
		
		private string Zip_bfield;
		
		/// <summary>
		/// Address of nichandle
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Address of nichandle&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("address")]
		public string Address {
			get {
				return this.Address_bfield;
			}
			set {
				this.Address_bfield = value;
			}
		}
		
		/// <summary>
		/// Area of nichandle
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Area of nichandle&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("area")]
		public string Area {
			get {
				return this.Area_bfield;
			}
			set {
				this.Area_bfield = value;
			}
		}
		
		/// <summary>
		/// City of birth
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;City of birth&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("birthCity")]
		public string BirthCity {
			get {
				return this.BirthCity_bfield;
			}
			set {
				this.BirthCity_bfield = value;
			}
		}
		
		/// <summary>
		/// Birth date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Birth date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("birthDay")]
		public string BirthDay {
			get {
				return this.BirthDay_bfield;
			}
			set {
				this.BirthDay_bfield = value;
			}
		}
		
		/// <summary>
		/// City of nichandle
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;City of nichandle&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("city")]
		public string City {
			get {
				return this.City_bfield;
			}
			set {
				this.City_bfield = value;
			}
		}
		
		/// <summary>
		/// Company National Identification Number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Company National Identification Number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("companyNationalIdentificationNumber")]
		public string CompanyNationalIdentificationNumber {
			get {
				return this.CompanyNationalIdentificationNumber_bfield;
			}
			set {
				this.CompanyNationalIdentificationNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Corporation type
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Corporation type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("corporationType")]
		public string CorporationType {
			get {
				return this.CorporationType_bfield;
			}
			set {
				this.CorporationType_bfield = value;
			}
		}
		
		/// <summary>
		/// Customer country
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;nichandle.CountryEnum&quot;,&quot;Description&quot;:&quot;Customer country&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("country")]
		public string Country {
			get {
				return this.Country_bfield;
			}
			set {
				this.Country_bfield = value;
			}
		}
		
		/// <summary>
		/// Customer currency
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;nichandle.Currency&quot;,&quot;Description&quot;:&quot;Customer currency&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currency")]
		public NichandleCurrency Currency {
			get {
				return this.Currency_bfield;
			}
			set {
				this.Currency_bfield = value;
			}
		}
		
		/// <summary>
		/// Your customer code (a numerical value used for identification when contacting support via phone call)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Your customer code (a numerical value used for identification when contacting support via phone call)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("customerCode")]
		public string CustomerCode {
			get {
				return this.CustomerCode_bfield;
			}
			set {
				this.CustomerCode_bfield = value;
			}
		}
		
		/// <summary>
		/// Email address
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Email address&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("email")]
		public string Email {
			get {
				return this.Email_bfield;
			}
			set {
				this.Email_bfield = value;
			}
		}
		
		/// <summary>
		/// Fax number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Fax number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("fax")]
		public string Fax {
			get {
				return this.Fax_bfield;
			}
			set {
				this.Fax_bfield = value;
			}
		}
		
		/// <summary>
		/// First name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;First name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstname")]
		public string Firstname {
			get {
				return this.Firstname_bfield;
			}
			set {
				this.Firstname_bfield = value;
			}
		}
		
		/// <summary>
		/// Italian SDI
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Italian SDI&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("italianSDI")]
		public string ItalianSDI {
			get {
				return this.ItalianSDI_bfield;
			}
			set {
				this.ItalianSDI_bfield = value;
			}
		}
		
		/// <summary>
		/// Language
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.LanguageEnum&quot;,&quot;Description&quot;:&quot;Language&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("language")]
		public string Language {
			get {
				return this.Language_bfield;
			}
			set {
				this.Language_bfield = value;
			}
		}
		
		/// <summary>
		/// Customer legal form
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;nichandle.LegalFormEnum&quot;,&quot;Description&quot;:&quot;Customer legal form&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("legalform")]
		public string Legalform {
			get {
				return this.Legalform_bfield;
			}
			set {
				this.Legalform_bfield = value;
			}
		}
		
		/// <summary>
		/// Customer name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Customer name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// National Identification Number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;National Identification Number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("nationalIdentificationNumber")]
		public string NationalIdentificationNumber {
			get {
				return this.NationalIdentificationNumber_bfield;
			}
			set {
				this.NationalIdentificationNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Customer identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Customer identifier&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("nichandle")]
		public string Nichandle {
			get {
				return this.Nichandle_bfield;
			}
			set {
				this.Nichandle_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of organisation
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of organisation&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("organisation")]
		public string Organisation {
			get {
				return this.Organisation_bfield;
			}
			set {
				this.Organisation_bfield = value;
			}
		}
		
		/// <summary>
		/// OVH subsidiary
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;nichandle.OvhCompanyEnum&quot;,&quot;Description&quot;:&quot;OVH subsidiary&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ovhCompany")]
		public string OvhCompany {
			get {
				return this.OvhCompany_bfield;
			}
			set {
				this.OvhCompany_bfield = value;
			}
		}
		
		/// <summary>
		/// OVH subsidiary
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;nichandle.OvhSubsidiaryEnum&quot;,&quot;Description&quot;:&quot;OVH subsidiary&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ovhSubsidiary")]
		public string OvhSubsidiary {
			get {
				return this.OvhSubsidiary_bfield;
			}
			set {
				this.OvhSubsidiary_bfield = value;
			}
		}
		
		/// <summary>
		/// Phone number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Phone number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("phone")]
		public string Phone {
			get {
				return this.Phone_bfield;
			}
			set {
				this.Phone_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.CountryEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("phoneCountry")]
		public string PhoneCountry {
			get {
				return this.PhoneCountry_bfield;
			}
			set {
				this.PhoneCountry_bfield = value;
			}
		}
		
		/// <summary>
		/// Gender
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.GenderEnum&quot;,&quot;Description&quot;:&quot;Gender&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("sex")]
		public string Sex {
			get {
				return this.Sex_bfield;
			}
			set {
				this.Sex_bfield = value;
			}
		}
		
		/// <summary>
		/// Spare email
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Spare email&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("spareEmail")]
		public string SpareEmail {
			get {
				return this.SpareEmail_bfield;
			}
			set {
				this.SpareEmail_bfield = value;
			}
		}
		
		/// <summary>
		/// Nichandle state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;nichandle.StateEnum&quot;,&quot;Description&quot;:&quot;Nichandle state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// VAT number
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;VAT number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("vat")]
		public string Vat {
			get {
				return this.Vat_bfield;
			}
			set {
				this.Vat_bfield = value;
			}
		}
		
		/// <summary>
		/// Zipcode
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Zipcode&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("zip")]
		public string Zip {
			get {
				return this.Zip_bfield;
			}
			set {
				this.Zip_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Zone capabilities
	/// </summary>
	public class ZoneCapabilities {
		
		private bool DynHost_bfield;
		
		/// <summary>
		/// True if dynHost available for this zone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;True if dynHost available for this zone&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("dynHost")]
		public bool DynHost {
			get {
				return this.DynHost_bfield;
			}
			set {
				this.DynHost_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Resource record
	/// </summary>
	public class ZoneResetRecord {
		
		private string FieldType_bfield;
		
		private string Target_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;zone.ResettableNamedResolutionFieldTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("fieldType")]
		public string FieldType {
			get {
				return this.FieldType_bfield;
			}
			set {
				this.FieldType_bfield = value;
			}
		}
		
		/// <summary>
		/// Resource record target
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Resource record target&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("target")]
		public string Target {
			get {
				return this.Target_bfield;
			}
			set {
				this.Target_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Zone status
	/// </summary>
	public class ZoneStatus {
		
		private string[] Errors_bfield;
		
		private bool IsDeployed_bfield;
		
		private string[] Warnings_bfield;
		
		/// <summary>
		/// Error list
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Error list&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("errors")]
		public string[] Errors {
			get {
				return this.Errors_bfield;
			}
			set {
				this.Errors_bfield = value;
			}
		}
		
		/// <summary>
		/// True if the zone has successfully been deployed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;True if the zone has successfully been deployed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("isDeployed")]
		public bool IsDeployed {
			get {
				return this.IsDeployed_bfield;
			}
			set {
				this.IsDeployed_bfield = value;
			}
		}
		
		/// <summary>
		/// Warning list
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Warning list&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("warnings")]
		public string[] Warnings {
			get {
				return this.Warnings_bfield;
			}
			set {
				this.Warnings_bfield = value;
			}
		}
	}
}
