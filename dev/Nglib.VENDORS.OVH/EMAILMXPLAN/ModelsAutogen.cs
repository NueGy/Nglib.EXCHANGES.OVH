//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/email/mxplan"  string[]--
//[GET] "/email/mxplan/{service}"  email.mxplan.Service--service
//[PUT] "/email/mxplan/{service}"  void--,service
//[GET] "/email/mxplan/{service}/account"  string[]--id,primaryEmailAddress,service
//[DELETE] "/email/mxplan/{service}/account/{email}"  email.pro.Task--email,service
//[GET] "/email/mxplan/{service}/account/{email}"  email.mxplan.Account--email,service
//[PUT] "/email/mxplan/{service}/account/{email}"  void--,email,service
//[GET] "/email/mxplan/{service}/account/{email}/alias"  string[]--email,service
//[POST] "/email/mxplan/{service}/account/{email}/alias"  email.pro.Task--alias,email,service
//[DELETE] "/email/mxplan/{service}/account/{email}/alias/{alias}"  email.pro.Task--alias,email,service
//[GET] "/email/mxplan/{service}/account/{email}/alias/{alias}"  email.mxplan.AccountAlias--alias,email,service
//[GET] "/email/mxplan/{service}/account/{email}/capabilities"  email.mxplan.accountCapabilities--email,service
//[POST] "/email/mxplan/{service}/account/{email}/changePassword"  email.pro.Task--email,password,service
//[GET] "/email/mxplan/{service}/account/{email}/diagnostic"  email.mxplan.AccountDiagnosis--email,service
//[POST] "/email/mxplan/{service}/account/{email}/diagnostic"  email.pro.Task--email,password,service
//[GET] "/email/mxplan/{service}/account/{email}/fullAccess"  long[]--email,service
//[POST] "/email/mxplan/{service}/account/{email}/fullAccess"  email.pro.Task--allowedAccountId,email,service
//[DELETE] "/email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}"  email.pro.Task--allowedAccountId,email,service
//[GET] "/email/mxplan/{service}/account/{email}/fullAccess/{allowedAccountId}"  email.mxplan.AccountFullAccess--allowedAccountId,email,service
//[GET] "/email/mxplan/{service}/account/{email}/sendAs"  long[]--email,service
//[POST] "/email/mxplan/{service}/account/{email}/sendAs"  email.pro.Task--allowAccountId,email,service
//[DELETE] "/email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}"  email.pro.Task--allowedAccountId,email,service
//[GET] "/email/mxplan/{service}/account/{email}/sendAs/{allowedAccountId}"  email.mxplan.AccountSendAs--allowedAccountId,email,service
//[GET] "/email/mxplan/{service}/account/{email}/sendOnBehalfTo"  long[]--email,service
//[POST] "/email/mxplan/{service}/account/{email}/sendOnBehalfTo"  email.pro.Task--allowAccountId,email,service
//[DELETE] "/email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}"  email.pro.Task--allowedAccountId,email,service
//[GET] "/email/mxplan/{service}/account/{email}/sendOnBehalfTo/{allowedAccountId}"  email.mxplan.AccountSendOnBehalfTo--allowedAccountId,email,service
//[GET] "/email/mxplan/{service}/account/{email}/task"  long[]--email,service
//[GET] "/email/mxplan/{service}/account/{email}/task/{id}"  email.pro.Task--email,id,service
//[GET] "/email/mxplan/{service}/domain"  string[]--service,state
//[GET] "/email/mxplan/{service}/domain/{domainName}"  email.mxplan.Domain--domainName,service
//[PUT] "/email/mxplan/{service}/domain/{domainName}"  void--,domainName,service
//[DELETE] "/email/mxplan/{service}/domain/{domainName}/disclaimer"  email.pro.Task--domainName,service
//[GET] "/email/mxplan/{service}/domain/{domainName}/disclaimer"  email.pro.disclaimer--domainName,service
//[POST] "/email/mxplan/{service}/domain/{domainName}/disclaimer"  email.pro.Task--content,domainName,outsideOnly,service
//[PUT] "/email/mxplan/{service}/domain/{domainName}/disclaimer"  void--,domainName,service
//[GET] "/email/mxplan/{service}/domain/{domainName}/disclaimerAttribute"  email.pro.DisclaimerAttributeEnum[]--domainName,service
//[GET] "/email/mxplan/{service}/externalContact"  string[]--displayName,externalEmailAddress,firstName,id,lastName,service
//[POST] "/email/mxplan/{service}/externalContact"  email.pro.Task--displayName,externalEmailAddress,firstName,hiddenFromGAL,initials,lastName,service
//[DELETE] "/email/mxplan/{service}/externalContact/{externalEmailAddress}"  email.pro.Task--externalEmailAddress,service
//[GET] "/email/mxplan/{service}/externalContact/{externalEmailAddress}"  email.mxplan.ExternalContact--externalEmailAddress,service
//[PUT] "/email/mxplan/{service}/externalContact/{externalEmailAddress}"  void--,externalEmailAddress,service
//[GET] "/email/mxplan/{service}/server"  email.mxplan.Server--service
//[GET] "/email/mxplan/{service}/task"  long[]--service
//[GET] "/email/mxplan/{service}/task/{id}"  email.pro.Task--id,service
//[POST] "/email/mxplan/{service}/updateFlagsOnAllAccounts"  void--service
namespace Nglib.VENDORS.OVH.EMAILMXPLAN {
	
	
	/// <summary>
	/// Service Offer name
	/// </summary>
	public enum EmailmxplanServiceOfferEnum {
		
		[EnumMember(Value="MXPLAN")]
		MXPLAN,
	}
	
	/// <summary>
	/// Disclaimer attributes list
	/// </summary>
	public enum EmailproDisclaimerAttributeEnum {
		
		[EnumMember(Value="City")]
		City,
		
		[EnumMember(Value="Company")]
		Company,
		
		[EnumMember(Value="Country")]
		Country,
		
		[EnumMember(Value="Department")]
		Department,
		
		[EnumMember(Value="DisplayName")]
		DisplayName,
		
		[EnumMember(Value="Email")]
		Email,
		
		[EnumMember(Value="FaxNumber")]
		FaxNumber,
		
		[EnumMember(Value="FirstName")]
		FirstName,
		
		[EnumMember(Value="HomePhoneNumber")]
		HomePhoneNumber,
		
		[EnumMember(Value="Initials")]
		Initials,
		
		[EnumMember(Value="LastName")]
		LastName,
		
		[EnumMember(Value="Manager")]
		Manager,
		
		[EnumMember(Value="MobileNumber")]
		MobileNumber,
		
		[EnumMember(Value="Notes")]
		Notes,
		
		[EnumMember(Value="Office")]
		Office,
		
		[EnumMember(Value="OtherFaxNumber")]
		OtherFaxNumber,
		
		[EnumMember(Value="OtherHomePhoneNumber")]
		OtherHomePhoneNumber,
		
		[EnumMember(Value="OtherPhoneNumber")]
		OtherPhoneNumber,
		
		[EnumMember(Value="PagerNumber")]
		PagerNumber,
		
		[EnumMember(Value="PhoneNumber")]
		PhoneNumber,
		
		[EnumMember(Value="State")]
		State,
		
		[EnumMember(Value="Street")]
		Street,
		
		[EnumMember(Value="Title")]
		Title,
		
		[EnumMember(Value="UserLogonName")]
		UserLogonName,
		
		[EnumMember(Value="ZipCode")]
		ZipCode,
	}
	
	/// <summary>
	/// Domain type
	/// </summary>
	public enum EmailproDomainTypeEnum {
		
		[EnumMember(Value="authoritative")]
		Authoritative,
		
		[EnumMember(Value="nonAuthoritative")]
		NonAuthoritative,
	}
	
	/// <summary>
	/// Mailing filter options availlable
	/// </summary>
	public enum EmailproMailingFilterEnum {
		
		[EnumMember(Value="vaderetro")]
		Vaderetro,
	}
	
	/// <summary>
	/// Current object state
	/// </summary>
	public enum EmailproObjectStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="reopening")]
		Reopening,
		
		[EnumMember(Value="suspended")]
		Suspended,
		
		[EnumMember(Value="suspending")]
		Suspending,
		
		[EnumMember(Value="unknown")]
		Unknown,
	}
	
	/// <summary>
	/// Server State
	/// </summary>
	public enum EmailproServerStateEnum {
		
		[EnumMember(Value="configurationPending")]
		ConfigurationPending,
		
		[EnumMember(Value="notConfigured")]
		NotConfigured,
		
		[EnumMember(Value="ok")]
		Ok,
	}
	
	/// <summary>
	/// Service State
	/// </summary>
	public enum EmailproServiceStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="inMaintenance")]
		InMaintenance,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="reopening")]
		Reopening,
		
		[EnumMember(Value="suspended")]
		Suspended,
		
		[EnumMember(Value="suspending")]
		Suspending,
	}
	
	/// <summary>
	/// function enumeration for task
	/// </summary>
	public enum EmailproTaskFunctionEnum {
		
		[EnumMember(Value="addAccount")]
		AddAccount,
		
		[EnumMember(Value="addAlias")]
		AddAlias,
		
		[EnumMember(Value="addDomain")]
		AddDomain,
		
		[EnumMember(Value="addDomainDisclaimer")]
		AddDomainDisclaimer,
		
		[EnumMember(Value="addExternalContact")]
		AddExternalContact,
		
		[EnumMember(Value="addFullAccess")]
		AddFullAccess,
		
		[EnumMember(Value="addSendAs")]
		AddSendAs,
		
		[EnumMember(Value="addSendOnBehalfTo")]
		AddSendOnBehalfTo,
		
		[EnumMember(Value="addServiceAuthorizedIp")]
		AddServiceAuthorizedIp,
		
		[EnumMember(Value="changeHostname")]
		ChangeHostname,
		
		[EnumMember(Value="changePassword")]
		ChangePassword,
		
		[EnumMember(Value="configureCustomer")]
		ConfigureCustomer,
		
		[EnumMember(Value="deleteAccount")]
		DeleteAccount,
		
		[EnumMember(Value="deleteAlias")]
		DeleteAlias,
		
		[EnumMember(Value="deleteDomain")]
		DeleteDomain,
		
		[EnumMember(Value="deleteDomainDisclaimer")]
		DeleteDomainDisclaimer,
		
		[EnumMember(Value="deleteExternalContact")]
		DeleteExternalContact,
		
		[EnumMember(Value="deleteFullAccess")]
		DeleteFullAccess,
		
		[EnumMember(Value="deleteSendAs")]
		DeleteSendAs,
		
		[EnumMember(Value="deleteSendOnBehalfTo")]
		DeleteSendOnBehalfTo,
		
		[EnumMember(Value="deleteService")]
		DeleteService,
		
		[EnumMember(Value="deleteServiceAuthorizedIp")]
		DeleteServiceAuthorizedIp,
		
		[EnumMember(Value="diagnoseAccount")]
		DiagnoseAccount,
		
		[EnumMember(Value="expandDrive")]
		ExpandDrive,
		
		[EnumMember(Value="installServer")]
		InstallServer,
		
		[EnumMember(Value="maintenance")]
		Maintenance,
		
		[EnumMember(Value="migrateAccountViaOMM")]
		MigrateAccountViaOMM,
		
		[EnumMember(Value="migrationAccount")]
		MigrationAccount,
		
		[EnumMember(Value="migrationDisclaimer")]
		MigrationDisclaimer,
		
		[EnumMember(Value="migrationExternalContact")]
		MigrationExternalContact,
		
		[EnumMember(Value="migrationHistory")]
		MigrationHistory,
		
		[EnumMember(Value="migrationService")]
		MigrationService,
		
		[EnumMember(Value="reOpenAccount")]
		ReOpenAccount,
		
		[EnumMember(Value="setAccount")]
		SetAccount,
		
		[EnumMember(Value="setAlias")]
		SetAlias,
		
		[EnumMember(Value="setDns")]
		SetDns,
		
		[EnumMember(Value="setDomain")]
		SetDomain,
		
		[EnumMember(Value="setDomainDisclaimer")]
		SetDomainDisclaimer,
		
		[EnumMember(Value="setExternalContact")]
		SetExternalContact,
		
		[EnumMember(Value="setService")]
		SetService,
		
		[EnumMember(Value="suspendAccount")]
		SuspendAccount,
		
		[EnumMember(Value="suspendService")]
		SuspendService,
		
		[EnumMember(Value="unknown")]
		Unknown,
		
		[EnumMember(Value="unsuspendAccount")]
		UnsuspendAccount,
		
		[EnumMember(Value="unsuspendService")]
		UnsuspendService,
	}
	
	/// <summary>
	/// Task status
	/// </summary>
	public enum EmailproTaskStatusEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Renew period
	/// </summary>
	public enum EmailprorenewPeriodEnum {
		
		[EnumMember(Value="monthly")]
		Monthly,
		
		[EnumMember(Value="yearly")]
		Yearly,
	}
	
	/// <summary>
	/// Mailbox
	/// </summary>
	public class EmailmxplanAccount {
		
		private string SAMAccountName_bfield;
		
		private bool Configured_bfield;
		
		private System.Nullable<System.DateTime> CreationDate_bfield;
		
		private System.Nullable<long> CurrentUsage_bfield;
		
		private System.Nullable<bool> DeleteAtExpiration_bfield;
		
		private string DisplayName_bfield;
		
		private string Domain_bfield;
		
		private System.Nullable<System.DateTime> ExpirationDate_bfield;
		
		private System.Nullable<System.DateTime> ExpirationOutlookDate_bfield;
		
		private string FirstName_bfield;
		
		private bool HiddenFromGAL_bfield;
		
		private long Id_bfield;
		
		private string Initial_bfield;
		
		private System.Nullable<System.DateTime> LastLogoffDate_bfield;
		
		private System.Nullable<System.DateTime> LastLogonDate_bfield;
		
		private string LastName_bfield;
		
		private System.Nullable<System.DateTime> LastUpdateDate_bfield;
		
		private string Login_bfield;
		
		private string[] MailingFilter_bfield;
		
		private System.Nullable<System.DateTime> PasswordLastUpdate_bfield;
		
		private string PrimaryEmailAddress_bfield;
		
		private double Quota_bfield;
		
		private string RenewPeriod_bfield;
		
		private EmailprospamAndVirusConfiguration SpamAndVirusConfiguration_bfield;
		
		private bool SpamDetected_bfield;
		
		private System.Nullable<long> SpamTicketNumber_bfield;
		
		private string State_bfield;
		
		private System.Nullable<long> TaskPendingId_bfield;
		
		/// <summary>
		/// SAM account name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;SAM account name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("SAMAccountName")]
		public string SAMAccountName {
			get {
				return this.SAMAccountName_bfield;
			}
			set {
				this.SAMAccountName_bfield = value;
			}
		}
		
		/// <summary>
		/// Indicates if the account is configured
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates if the account is configured&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("configured")]
		public bool Configured {
			get {
				return this.Configured_bfield;
			}
			set {
				this.Configured_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.Nullable<System.DateTime> CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Mailbox usage
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Mailbox usage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentUsage")]
		public System.Nullable<long> CurrentUsage {
			get {
				return this.CurrentUsage_bfield;
			}
			set {
				this.CurrentUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// delete at expiration
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;delete at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public System.Nullable<bool> DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// Account display name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account display name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Email domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Email domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// expiration date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationDate")]
		public System.Nullable<System.DateTime> ExpirationDate {
			get {
				return this.ExpirationDate_bfield;
			}
			set {
				this.ExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// expiration date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationOutlookDate")]
		public System.Nullable<System.DateTime> ExpirationOutlookDate {
			get {
				return this.ExpirationOutlookDate_bfield;
			}
			set {
				this.ExpirationOutlookDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Account first name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account first name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// Hide account in Global Address List
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Hide account in Global Address List&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hiddenFromGAL")]
		public bool HiddenFromGAL {
			get {
				return this.HiddenFromGAL_bfield;
			}
			set {
				this.HiddenFromGAL_bfield = value;
			}
		}
		
		/// <summary>
		/// Account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Account initials
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account initials&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("initial")]
		public string Initial {
			get {
				return this.Initial_bfield;
			}
			set {
				this.Initial_bfield = value;
			}
		}
		
		/// <summary>
		/// Last logoff
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last logoff&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastLogoffDate")]
		public System.Nullable<System.DateTime> LastLogoffDate {
			get {
				return this.LastLogoffDate_bfield;
			}
			set {
				this.LastLogoffDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Last logon
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last logon&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastLogonDate")]
		public System.Nullable<System.DateTime> LastLogonDate {
			get {
				return this.LastLogonDate_bfield;
			}
			set {
				this.LastLogonDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Account last name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account last name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.Nullable<System.DateTime> LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Account login
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account login&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("login")]
		public string Login {
			get {
				return this.Login_bfield;
			}
			set {
				this.Login_bfield = value;
			}
		}
		
		/// <summary>
		/// Enable or disable anti-virus and anti-spam
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;email.pro.MailingFilterEnum[]&quot;,&quot;Description&quot;:&quot;Enable or disable anti-virus and anti-spam&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("mailingFilter")]
		public string[] MailingFilter {
			get {
				return this.MailingFilter_bfield;
			}
			set {
				this.MailingFilter_bfield = value;
			}
		}
		
		/// <summary>
		/// Time of account's password last update
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Time of account's password last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("passwordLastUpdate")]
		public System.Nullable<System.DateTime> PasswordLastUpdate {
			get {
				return this.PasswordLastUpdate_bfield;
			}
			set {
				this.PasswordLastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Default email for this mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Default email for this mailbox&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("primaryEmailAddress")]
		public string PrimaryEmailAddress {
			get {
				return this.PrimaryEmailAddress_bfield;
			}
			set {
				this.PrimaryEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Account maximum size
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;double&quot;,&quot;Description&quot;:&quot;Account maximum size&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quota")]
		public double Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// change the renew period
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;email.pro.renewPeriodEnum&quot;,&quot;Description&quot;:&quot;change the renew period&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renewPeriod")]
		public string RenewPeriod {
			get {
				return this.RenewPeriod_bfield;
			}
			set {
				this.RenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Spam and Antivirus configuration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.spamAndVirusConfiguration&quot;,&quot;Description&quot;:&quot;Spam and Antivirus configuration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("spamAndVirusConfiguration")]
		public EmailprospamAndVirusConfiguration SpamAndVirusConfiguration {
			get {
				return this.SpamAndVirusConfiguration_bfield;
			}
			set {
				this.SpamAndVirusConfiguration_bfield = value;
			}
		}
		
		/// <summary>
		/// Account was sending spam
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Account was sending spam&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamDetected")]
		public bool SpamDetected {
			get {
				return this.SpamDetected_bfield;
			}
			set {
				this.SpamDetected_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket number of spam detection
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket number of spam detection&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamTicketNumber")]
		public System.Nullable<long> SpamTicketNumber {
			get {
				return this.SpamTicketNumber_bfield;
			}
			set {
				this.SpamTicketNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Account state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Account state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending tasks for this account
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending tasks for this account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public System.Nullable<long> TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Aliases on this mailbox
	/// </summary>
	public class EmailmxplanAccountAlias {
		
		private string Alias_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Alias
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Alias&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("alias")]
		public string Alias {
			get {
				return this.Alias_bfield;
			}
			set {
				this.Alias_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Account Diagnosis
	/// </summary>
	public class EmailmxplanAccountDiagnosis {
		
		private bool CanReceiveEmail_bfield;
		
		private bool CanSendEmail_bfield;
		
		private bool ConnectiveWebmail_bfield;
		
		private bool IsLocked_bfield;
		
		private bool IsMxValid_bfield;
		
		private bool IsSpammer_bfield;
		
		private bool IsSrvValid_bfield;
		
		private bool IsSuspended_bfield;
		
		private System.DateTime LastCheck_bfield;
		
		/// <summary>
		/// Determines if ingoing message has been received
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if ingoing message has been received&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canReceiveEmail")]
		public bool CanReceiveEmail {
			get {
				return this.CanReceiveEmail_bfield;
			}
			set {
				this.CanReceiveEmail_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if outgoing message has been delivered
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if outgoing message has been delivered&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canSendEmail")]
		public bool CanSendEmail {
			get {
				return this.CanSendEmail_bfield;
			}
			set {
				this.CanSendEmail_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if possible to authenticate with credentials
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if possible to authenticate with credentials&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("connectiveWebmail")]
		public bool ConnectiveWebmail {
			get {
				return this.ConnectiveWebmail_bfield;
			}
			set {
				this.ConnectiveWebmail_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if account is locked
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if account is locked&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isLocked")]
		public bool IsLocked {
			get {
				return this.IsLocked_bfield;
			}
			set {
				this.IsLocked_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if MX record for account's domain is properly set
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if MX record for account's domain is properly set&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isMxValid")]
		public bool IsMxValid {
			get {
				return this.IsMxValid_bfield;
			}
			set {
				this.IsMxValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if account is flagged as spammer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if account is flagged as spammer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isSpammer")]
		public bool IsSpammer {
			get {
				return this.IsSpammer_bfield;
			}
			set {
				this.IsSpammer_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if SRV (autodiscovery) record for account's domain is properly set
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if SRV (autodiscovery) record for account's domain is properly set&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isSrvValid")]
		public bool IsSrvValid {
			get {
				return this.IsSrvValid_bfield;
			}
			set {
				this.IsSrvValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if account is suspended
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if account is suspended&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isSuspended")]
		public bool IsSuspended {
			get {
				return this.IsSuspended_bfield;
			}
			set {
				this.IsSuspended_bfield = value;
			}
		}
		
		/// <summary>
		/// Last performed diagnostics date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last performed diagnostics date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastCheck")]
		public System.DateTime LastCheck {
			get {
				return this.LastCheck_bfield;
			}
			set {
				this.LastCheck_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Users having full access on this mailbox
	/// </summary>
	public class EmailmxplanAccountFullAccess {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give full access
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give full access&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Users authorized to send mails from this mailbox
	/// </summary>
	public class EmailmxplanAccountSendAs {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give send as
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give send as&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get users authorized to Send On Behalf To mails from this mailbox
	/// </summary>
	public class EmailmxplanAccountSendOnBehalfTo {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give send on behalf to
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give send on behalf to&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Domain
	/// </summary>
	public class EmailmxplanDomain {
		
		private string CnameToCheck_bfield;
		
		private string[] DomainAliases_bfield;
		
		private bool DomainValidated_bfield;
		
		private bool IsAliasDomain_bfield;
		
		private bool MxIsValid_bfield;
		
		private string[] MxRecord_bfield;
		
		private string MxRelay_bfield;
		
		private string Name_bfield;
		
		private bool SrvIsValid_bfield;
		
		private string[] SrvRecord_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Cname that will be checked to prove the domain ownership
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Cname that will be checked to prove the domain ownership&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cnameToCheck")]
		public string CnameToCheck {
			get {
				return this.CnameToCheck_bfield;
			}
			set {
				this.CnameToCheck_bfield = value;
			}
		}
		
		/// <summary>
		/// List of aliases for this domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;List of aliases for this domain&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domainAliases")]
		public string[] DomainAliases {
			get {
				return this.DomainAliases_bfield;
			}
			set {
				this.DomainAliases_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain validation status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Domain validation status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domainValidated")]
		public bool DomainValidated {
			get {
				return this.DomainValidated_bfield;
			}
			set {
				this.DomainValidated_bfield = value;
			}
		}
		
		/// <summary>
		/// Indicate if this domain is an alias for another domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicate if this domain is an alias for another domain&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isAliasDomain")]
		public bool IsAliasDomain {
			get {
				return this.IsAliasDomain_bfield;
			}
			set {
				this.IsAliasDomain_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns mx configuration is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns mx configuration is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mxIsValid")]
		public bool MxIsValid {
			get {
				return this.MxIsValid_bfield;
			}
			set {
				this.MxIsValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain MX record configured in DNS
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Domain MX record configured in DNS&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mxRecord")]
		public string[] MxRecord {
			get {
				return this.MxRecord_bfield;
			}
			set {
				this.MxRecord_bfield = value;
			}
		}
		
		/// <summary>
		/// If specified, emails to not existing address will be redirected to that domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;If specified, emails to not existing address will be redirected to that domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("mxRelay")]
		public string MxRelay {
			get {
				return this.MxRelay_bfield;
			}
			set {
				this.MxRelay_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns srv record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns srv record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("srvIsValid")]
		public bool SrvIsValid {
			get {
				return this.SrvIsValid_bfield;
			}
			set {
				this.SrvIsValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain SRV record configured in DNS
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Domain SRV record configured in DNS&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("srvRecord")]
		public string[] SrvRecord {
			get {
				return this.SrvRecord_bfield;
			}
			set {
				this.SrvRecord_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Domain state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending taks id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending taks id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.DomainTypeEnum&quot;,&quot;Description&quot;:&quot;Domain type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// External contact for this mxplan service
	/// </summary>
	public class EmailmxplanExternalContact {
		
		private System.DateTime CreationDate_bfield;
		
		private string DisplayName_bfield;
		
		private string ExternalEmailAddress_bfield;
		
		private string FirstName_bfield;
		
		private bool HiddenFromGAL_bfield;
		
		private long Id_bfield;
		
		private string Initials_bfield;
		
		private string LastName_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact display name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact display name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact email
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact email&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("externalEmailAddress")]
		public string ExternalEmailAddress {
			get {
				return this.ExternalEmailAddress_bfield;
			}
			set {
				this.ExternalEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact first name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact first name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// Hide the contact in Global Address List
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Hide the contact in Global Address List&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hiddenFromGAL")]
		public bool HiddenFromGAL {
			get {
				return this.HiddenFromGAL_bfield;
			}
			set {
				this.HiddenFromGAL_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Contact id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact initals
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact initals&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("initials")]
		public string Initials {
			get {
				return this.Initials_bfield;
			}
			set {
				this.Initials_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact last name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact last name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Contact state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Server
	/// </summary>
	public class EmailmxplanServer {
		
		private System.Nullable<long> CurrentDiskUsage_bfield;
		
		private System.Nullable<long> DiskSize_bfield;
		
		private string Ip_bfield;
		
		private string IpV6_bfield;
		
		private bool IsAValid_bfield;
		
		private bool IsAaaaValid_bfield;
		
		private bool IsPtrV6Valid_bfield;
		
		private bool IsPtrValid_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private System.Nullable<long> Version_bfield;
		
		/// <summary>
		/// Current disk usage in MB
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Current disk usage in MB&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentDiskUsage")]
		public System.Nullable<long> CurrentDiskUsage {
			get {
				return this.CurrentDiskUsage_bfield;
			}
			set {
				this.CurrentDiskUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// Total disk size in MB
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Total disk size in MB&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("diskSize")]
		public System.Nullable<long> DiskSize {
			get {
				return this.DiskSize_bfield;
			}
			set {
				this.DiskSize_bfield = value;
			}
		}
		
		/// <summary>
		/// ipV4
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;ipV4&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// ipV6
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;ipv6&quot;,&quot;Description&quot;:&quot;ipV6&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ipV6")]
		public string IpV6 {
			get {
				return this.IpV6_bfield;
			}
			set {
				this.IpV6_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns A record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns A record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isAValid")]
		public bool IsAValid {
			get {
				return this.IsAValid_bfield;
			}
			set {
				this.IsAValid_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns AAAA record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns AAAA record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isAaaaValid")]
		public bool IsAaaaValid {
			get {
				return this.IsAaaaValid_bfield;
			}
			set {
				this.IsAaaaValid_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns ptrV6 record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns ptrV6 record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isPtrV6Valid")]
		public bool IsPtrV6Valid {
			get {
				return this.IsPtrV6Valid_bfield;
			}
			set {
				this.IsPtrV6Valid_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns ptr record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns ptr record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isPtrValid")]
		public bool IsPtrValid {
			get {
				return this.IsPtrValid_bfield;
			}
			set {
				this.IsPtrValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Server state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.ServerStateEnum&quot;,&quot;Description&quot;:&quot;Server state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// Server version
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Server version&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("version")]
		public System.Nullable<long> Version {
			get {
				return this.Version_bfield;
			}
			set {
				this.Version_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// MXPlan service
	/// </summary>
	public class EmailmxplanService {
		
		private bool ComplexityEnabled_bfield;
		
		private string DisplayName_bfield;
		
		private string Domain_bfield;
		
		private string Hostname_bfield;
		
		private System.Nullable<System.DateTime> LastUpdateDate_bfield;
		
		private long LockoutDuration_bfield;
		
		private long LockoutObservationWindow_bfield;
		
		private System.Nullable<long> LockoutThreshold_bfield;
		
		private System.Nullable<long> MaxPasswordAge_bfield;
		
		private long MaxReceiveSize_bfield;
		
		private long MaxSendSize_bfield;
		
		private System.Nullable<long> MinPasswordAge_bfield;
		
		private System.Nullable<long> MinPasswordLength_bfield;
		
		private string Offer_bfield;
		
		private EmailprospamAndVirusConfiguration SpamAndVirusConfiguration_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private string WebUrl_bfield;
		
		/// <summary>
		/// enable policy for strong and secure passwords
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;enable policy for strong and secure passwords&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("complexityEnabled")]
		public bool ComplexityEnabled {
			get {
				return this.ComplexityEnabled_bfield;
			}
			set {
				this.ComplexityEnabled_bfield = value;
			}
		}
		
		/// <summary>
		/// service displayName
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;service displayName&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain name of your service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name of your service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// Hostname of your service
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Hostname of your service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("hostname")]
		public string Hostname {
			get {
				return this.Hostname_bfield;
			}
			set {
				this.Hostname_bfield = value;
			}
		}
		
		/// <summary>
		/// Update date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.Nullable<System.DateTime> LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// number of minutes account will remain locked if it occurs
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of minutes account will remain locked if it occurs&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutDuration")]
		public long LockoutDuration {
			get {
				return this.LockoutDuration_bfield;
			}
			set {
				this.LockoutDuration_bfield = value;
			}
		}
		
		/// <summary>
		/// number of minutes that must elapse after a failed logon to reset lockout trigger
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of minutes that must elapse after a failed logon to reset lockout trigger&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutObservationWindow")]
		public long LockoutObservationWindow {
			get {
				return this.LockoutObservationWindow_bfield;
			}
			set {
				this.LockoutObservationWindow_bfield = value;
			}
		}
		
		/// <summary>
		/// number of attempts before account to be locked
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of attempts before account to be locked&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutThreshold")]
		public System.Nullable<long> LockoutThreshold {
			get {
				return this.LockoutThreshold_bfield;
			}
			set {
				this.LockoutThreshold_bfield = value;
			}
		}
		
		/// <summary>
		/// maximum number of days that account's password is valid before expiration
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;maximum number of days that account's password is valid before expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxPasswordAge")]
		public System.Nullable<long> MaxPasswordAge {
			get {
				return this.MaxPasswordAge_bfield;
			}
			set {
				this.MaxPasswordAge_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum message size that You can receive in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum message size that You can receive in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxReceiveSize")]
		public long MaxReceiveSize {
			get {
				return this.MaxReceiveSize_bfield;
			}
			set {
				this.MaxReceiveSize_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum message size that You can send in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum message size that You can send in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxSendSize")]
		public long MaxSendSize {
			get {
				return this.MaxSendSize_bfield;
			}
			set {
				this.MaxSendSize_bfield = value;
			}
		}
		
		/// <summary>
		/// minimum number of days before able to change account's password
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;minimum number of days before able to change account's password&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("minPasswordAge")]
		public System.Nullable<long> MinPasswordAge {
			get {
				return this.MinPasswordAge_bfield;
			}
			set {
				this.MinPasswordAge_bfield = value;
			}
		}
		
		/// <summary>
		/// minimum number of characters password must contain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;minimum number of characters password must contain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("minPasswordLength")]
		public System.Nullable<long> MinPasswordLength {
			get {
				return this.MinPasswordLength_bfield;
			}
			set {
				this.MinPasswordLength_bfield = value;
			}
		}
		
		/// <summary>
		/// Type of your offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.mxplan.ServiceOfferEnum&quot;,&quot;Description&quot;:&quot;Type of your offer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// Spam and Antivirus configuration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.spamAndVirusConfiguration&quot;,&quot;Description&quot;:&quot;Spam and Antivirus configuration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("spamAndVirusConfiguration")]
		public EmailprospamAndVirusConfiguration SpamAndVirusConfiguration {
			get {
				return this.SpamAndVirusConfiguration_bfield;
			}
			set {
				this.SpamAndVirusConfiguration_bfield = value;
			}
		}
		
		/// <summary>
		/// State of your service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.ServiceStateEnum&quot;,&quot;Description&quot;:&quot;State of your service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// URL for web interface
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;URL for web interface&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("webUrl")]
		public string WebUrl {
			get {
				return this.WebUrl_bfield;
			}
			set {
				this.WebUrl_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Account capabilities
	/// </summary>
	public class EmailmxplanaccountCapabilities {
		
		private double[] Quotas_bfield;
		
		/// <summary>
		/// List of allowed quotas (no constraint if null)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;double[]&quot;,&quot;Description&quot;:&quot;List of allowed quotas (no constraint if null)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quotas")]
		public double[] Quotas {
			get {
				return this.Quotas_bfield;
			}
			set {
				this.Quotas_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Organization task details
	/// </summary>
	public class EmailproTask {
		
		private System.Nullable<System.DateTime> FinishDate_bfield;
		
		private string Function_bfield;
		
		private long Id_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// Completion date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Completion date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("finishDate")]
		public System.Nullable<System.DateTime> FinishDate {
			get {
				return this.FinishDate_bfield;
			}
			set {
				this.FinishDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Function name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.TaskFunctionEnum&quot;,&quot;Description&quot;:&quot;Function name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Task status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.pro.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;Task status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// disclaimer
	/// </summary>
	public class Emailprodisclaimer {
		
		private string Content_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private string Name_bfield;
		
		private bool OutsideOnly_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Signature, added at the bottom of your organization emails
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;Signature, added at the bottom of your organization emails&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("content")]
		public string Content {
			get {
				return this.Content_bfield;
			}
			set {
				this.Content_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Disclaimer name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Disclaimer name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Activate the disclaimer only for external emails
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Activate the disclaimer only for external emails&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("outsideOnly")]
		public bool OutsideOnly {
			get {
				return this.OutsideOnly_bfield;
			}
			set {
				this.OutsideOnly_bfield = value;
			}
		}
		
		/// <summary>
		/// task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Spam and Antyvirus configuration
	/// </summary>
	public class EmailprospamAndVirusConfiguration {
		
		private bool CheckDKIM_bfield;
		
		private bool CheckSPF_bfield;
		
		private bool DeleteSpam_bfield;
		
		private bool DeleteVirus_bfield;
		
		private bool PutInJunk_bfield;
		
		private bool TagSpam_bfield;
		
		private bool TagVirus_bfield;
		
		/// <summary>
		/// Check DKIM of message
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Check DKIM of message&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkDKIM")]
		public bool CheckDKIM {
			get {
				return this.CheckDKIM_bfield;
			}
			set {
				this.CheckDKIM_bfield = value;
			}
		}
		
		/// <summary>
		/// Check SPF of message
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Check SPF of message&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkSPF")]
		public bool CheckSPF {
			get {
				return this.CheckSPF_bfield;
			}
			set {
				this.CheckSPF_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam delete it
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam delete it&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteSpam")]
		public bool DeleteSpam {
			get {
				return this.DeleteSpam_bfield;
			}
			set {
				this.DeleteSpam_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a virus delete it
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a virus delete it&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteVirus")]
		public bool DeleteVirus {
			get {
				return this.DeleteVirus_bfield;
			}
			set {
				this.DeleteVirus_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("putInJunk")]
		public bool PutInJunk {
			get {
				return this.PutInJunk_bfield;
			}
			set {
				this.PutInJunk_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam change its subject
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam change its subject&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("tagSpam")]
		public bool TagSpam {
			get {
				return this.TagSpam_bfield;
			}
			set {
				this.TagSpam_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a virus change its subject
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a virus change its subject&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("tagVirus")]
		public bool TagVirus {
			get {
				return this.TagVirus_bfield;
			}
			set {
				this.TagVirus_bfield = value;
			}
		}
	}
}
