//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/email/exchange"  string[]--
//[GET] "/email/exchange/{organizationName}/service"  string[]--organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}"  email.exchange.ExchangeService--exchangeService,organizationName
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}"  void--,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account"  string[]--accountLicense,exchangeService,id,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account"  email.exchange.Task--SAMAccountName,company,displayName,domain,exchangeService,firstName,hiddenFromGAL,initials,lastName,license,litigation,litigationPeriod,login,mailingFilter,organizationName,outlookLicense,password,spamAndVirusConfiguration
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}"  email.exchange.Task--exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}"  email.exchange.Account--exchangeService,organizationName,primaryEmailAddress
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}"  void--,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias"  string[]--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias"  email.exchange.Task--alias,exchangeService,organizationName,primaryEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}"  email.exchange.Task--alias,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/alias/{alias}"  email.exchange.exchangeAccountAlias--alias,exchangeService,organizationName,primaryEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive"  email.exchange.Task--exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive"  email.exchange.exchangeAccountArchive--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive"  email.exchange.Task--exchangeService,organizationName,primaryEmailAddress,quota
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/archive"  void--,exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/changePassword"  email.exchange.Task--exchangeService,organizationName,password,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics"  email.exchange.exchangeAccountDiagnosis--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/diagnostics"  email.exchange.Task--exchangeService,organizationName,password,primaryEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export"  email.exchange.Task--exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export"  email.exchange.Export--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/export"  email.exchange.Task--exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL"  email.exchange.ExportUrl--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/exportURL"  email.exchange.Task--exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess"  long[]--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,primaryEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/fullAccess/{allowedAccountId}"  email.exchange.exchangeAccountFullAccess--allowedAccountId,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL"  email.exchange.OutlookUrl--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/outlookURL"  email.exchange.Task--exchangeService,language,organizationName,primaryEmailAddress,version
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol"  email.exchange.exchangeAccountProtocol--exchangeService,organizationName,primaryEmailAddress
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/protocol"  void--,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs"  long[]--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs"  email.exchange.Task--allowAccountId,exchangeService,organizationName,primaryEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendAs/{allowedAccountId}"  email.exchange.exchangeAccountSendAs--allowedAccountId,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo"  long[]--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo"  email.exchange.Task--allowAccountId,exchangeService,organizationName,primaryEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/sendOnBehalfTo/{allowedAccountId}"  email.exchange.exchangeAccountSendOnBehalfTo--allowedAccountId,exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks"  long[]--exchangeService,organizationName,primaryEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/tasks/{id}"  email.exchange.Task--exchangeService,id,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/account/{primaryEmailAddress}/terminate"  string--exchangeService,organizationName,primaryEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/activateSharepoint"  email.exchange.Task--exchangeService,organizationName,primaryEmailAddress,subDomain
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/changeHostname"  email.exchange.Task--dcvEmail,exchangeService,hostname,organizationName,useDnsAssist
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/dcvEmails"  string[]--exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/device"  string[]--IMEI,deviceState,exchangeService,identity,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}"  email.exchange.exchangeServiceDevice--exchangeService,identity,organizationName
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}"  void--,exchangeService,identity,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/device/{identity}/clearDevice"  email.exchange.Task--exchangeService,identity,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/domain"  string[]--exchangeService,main,organizationName,state
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/domain"  email.exchange.Task--configureAutodiscover,configureMx,exchangeService,main,mxRelay,name,organization2010,organizationName,type
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}"  email.exchange.Task--domainName,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}"  email.exchange.Domain--domainName,exchangeService,organizationName
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}"  void--,domainName,exchangeService,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer"  email.exchange.Task--domainName,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer"  email.exchange.disclaimer--domainName,exchangeService,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer"  email.exchange.Task--content,domainName,exchangeService,organizationName,outsideOnly
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimer"  void--,domainName,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/domain/{domainName}/disclaimerAttribute"  email.exchange.DisclaimerAttributeEnum[]--domainName,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/externalContact"  string[]--displayName,exchangeService,externalEmailAddress,firstName,id,lastName,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/externalContact"  email.exchange.Task--displayName,exchangeService,externalEmailAddress,firstName,hiddenFromGAL,initials,lastName,organization2010,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}"  email.exchange.Task--exchangeService,externalEmailAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}"  email.exchange.exchangeExternalContact--exchangeService,externalEmailAddress,organizationName
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/externalContact/{externalEmailAddress}"  void--,exchangeService,externalEmailAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/license"  email.exchange.DailyLicense[]--exchangeService,fromDate,license,organizationName,toDate
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList"  string[]--exchangeService,mailingListAddress,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList"  email.exchange.Task--departRestriction,displayName,exchangeService,hiddenFromGAL,joinRestriction,mailingListAddress,maxReceiveSize,maxSendSize,organizationName,senderAuthentification
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}"  email.exchange.Task--exchangeService,mailingListAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}"  email.exchange.mailingList--exchangeService,mailingListAddress,organizationName
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}"  void--,exchangeService,mailingListAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias"  string[]--exchangeService,mailingListAddress,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias"  email.exchange.Task--alias,exchangeService,mailingListAddress,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}"  email.exchange.Task--alias,exchangeService,mailingListAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/alias/{alias}"  email.exchange.exchangeMailingListAlias--alias,exchangeService,mailingListAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account"  long[]--exchangeService,mailingListAddress,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account"  email.exchange.Task--exchangeService,mailingListAddress,managerAccountId,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}"  email.exchange.Task--exchangeService,mailingListAddress,managerAccountId,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/manager/account/{managerAccountId}"  email.exchange.exchangeDistributionGroupManager--exchangeService,mailingListAddress,managerAccountId,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account"  long[]--exchangeService,mailingListAddress,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account"  email.exchange.Task--exchangeService,mailingListAddress,memberAccountId,memberContactId,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}"  email.exchange.Task--exchangeService,mailingListAddress,memberAccountId,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/account/{memberAccountId}"  email.exchange.exchangeDistributionGroupMember--exchangeService,mailingListAddress,memberAccountId,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact"  long[]--exchangeService,mailingListAddress,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact"  email.exchange.Task--exchangeService,mailingListAddress,memberAccountId,memberContactId,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}"  email.exchange.Task--exchangeService,mailingListAddress,memberContactId,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/member/contact/{memberContactId}"  email.exchange.exchangeDistributionGroupMember--exchangeService,mailingListAddress,memberContactId,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs"  long[]--exchangeService,mailingListAddress,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs"  email.exchange.Task--allowAccountId,exchangeService,mailingListAddress,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,mailingListAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendAs/{allowedAccountId}"  email.exchange.exchangeDistributionGroupSendAs--allowedAccountId,exchangeService,mailingListAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo"  long[]--exchangeService,mailingListAddress,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo"  email.exchange.Task--allowAccountId,exchangeService,mailingListAddress,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,mailingListAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/mailingList/{mailingListAddress}/sendOnBehalfTo/{allowedAccountId}"  email.exchange.exchangeDistributionGroupSendOnBehalfTo--allowedAccountId,exchangeService,mailingListAddress,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/outlookAvailability"  email.exchange.OutlookVersions[]--exchangeService,organizationName,outlookLanguage,outlookVersion
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/protocol"  email.exchange.exchangeServiceProtocol--exchangeService,organizationName
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/protocol"  void--,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification"  long[]--exchangeService,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification"  email.exchange.Task--exchangeService,notifiedAccountId,organizationName
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}"  email.exchange.Task--exchangeService,notifiedAccountId,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/protocol/activeSyncMailNotification/{notifiedAccountId}"  email.exchange.exchangeServiceActiveSyncNotification--exchangeService,notifiedAccountId,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder"  string[]--exchangeService,organizationName,path
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder"  email.exchange.Task--anonymousPermission,defaultPermission,exchangeService,organizationName,path,quota,type
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}"  email.exchange.Task--exchangeService,organizationName,path
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}"  email.exchange.publicFolder--exchangeService,organizationName,path
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}"  void--,exchangeService,organizationName,path
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission"  long[]--exchangeService,organizationName,path
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission"  email.exchange.Task--accessRights,allowedAccountId,exchangeService,organizationName,path
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,path
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}"  email.exchange.exchangePublicFolderPermission--allowedAccountId,exchangeService,organizationName,path
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolder/{path}/permission/{allowedAccountId}"  void--,allowedAccountId,exchangeService,organizationName,path
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/publicFolderQuota"  email.exchange.PublicFolderQuota--exchangeService,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/renewSSL"  email.exchange.Task--dcv,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount"  string[]--exchangeService,organizationName,resourceEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount"  email.exchange.Task--addOrganizerToSubject,allowConflict,bookingWindow,capacity,deleteComments,deleteSubject,displayName,exchangeService,location,maximumDuration,organizationName,resourceEmailAddress,showMeetingDetails,type
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}"  email.exchange.Task--exchangeService,organizationName,resourceEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}"  email.exchange.resourceAccount--exchangeService,organizationName,resourceEmailAddress
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}"  void--,exchangeService,organizationName,resourceEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate"  long[]--exchangeService,organizationName,resourceEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,resourceEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,resourceEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/resourceAccount/{resourceEmailAddress}/delegate/{allowedAccountId}"  email.exchange.exchangeResourceAccountDelegate--allowedAccountId,exchangeService,organizationName,resourceEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/server"  email.exchange.Server--exchangeService,organizationName
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/server"  void--,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/serviceInfos"  services.Service--exchangeService,organizationName
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/serviceInfos"  void--,exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount"  string[]--exchangeService,organizationName,sharedEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount"  email.exchange.Task--displayName,exchangeService,firstName,hiddenFromGAL,initials,lastName,mailingFilter,organizationName,quota,sharedEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}"  email.exchange.Task--exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}"  email.exchange.sharedAccount--exchangeService,organizationName,sharedEmailAddress
//[PUT] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}"  void--,exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess"  long[]--exchangeService,organizationName,sharedEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,sharedEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/fullAccess/{allowedAccountId}"  email.exchange.exchangeSharedAccountFullAccess--allowedAccountId,exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs"  long[]--exchangeService,organizationName,sharedEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs"  email.exchange.Task--allowAccountId,exchangeService,organizationName,sharedEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendAs/{allowedAccountId}"  email.exchange.exchangeSharedAccountSendAs--allowedAccountId,exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo"  long[]--exchangeService,organizationName,sharedEmailAddress
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo"  email.exchange.Task--allowAccountId,exchangeService,organizationName,sharedEmailAddress
//[DELETE] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}"  email.exchange.Task--allowedAccountId,exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/sendOnBehalfTo/{allowedAccountId}"  email.exchange.exchangeSharedAccountSendOnBehalfTo--allowedAccountId,exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks"  long[]--exchangeService,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccount/{sharedEmailAddress}/tasks/{id}"  email.exchange.Task--exchangeService,id,organizationName,sharedEmailAddress
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/sharedAccountQuota"  email.exchange.SharedAccountQuota--exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/task"  long[]--exchangeService,organizationName
//[GET] "/email/exchange/{organizationName}/service/{exchangeService}/task/{id}"  email.exchange.Task--exchangeService,id,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/updateDeviceList"  email.exchange.Task--exchangeService,organizationName
//[POST] "/email/exchange/{organizationName}/service/{exchangeService}/updateFlagsOnAllAccounts"  void--exchangeService,organizationName
namespace Nglib.VENDORS.OVH.EMAILEXCHANGE {
	
	
	/// <summary>
	/// Activesync action
	/// </summary>
	public enum EmailexchangeActiveSyncPolicyEnum {
		
		[EnumMember(Value="allow")]
		Allow,
		
		[EnumMember(Value="block")]
		Block,
		
		[EnumMember(Value="quarantine")]
		Quarantine,
	}
	
	/// <summary>
	/// Device ActiveSync state
	/// </summary>
	public enum EmailexchangeDeviceActiveSyncStateEnum {
		
		[EnumMember(Value="allowed")]
		Allowed,
		
		[EnumMember(Value="blocked")]
		Blocked,
		
		[EnumMember(Value="deviceDiscovery")]
		DeviceDiscovery,
		
		[EnumMember(Value="quarantined")]
		Quarantined,
	}
	
	/// <summary>
	/// Disclaimer attributes list
	/// </summary>
	public enum EmailexchangeDisclaimerAttributeEnum {
		
		[EnumMember(Value="City")]
		City,
		
		[EnumMember(Value="Company")]
		Company,
		
		[EnumMember(Value="Country")]
		Country,
		
		[EnumMember(Value="Department")]
		Department,
		
		[EnumMember(Value="DisplayName")]
		DisplayName,
		
		[EnumMember(Value="Email")]
		Email,
		
		[EnumMember(Value="FaxNumber")]
		FaxNumber,
		
		[EnumMember(Value="FirstName")]
		FirstName,
		
		[EnumMember(Value="HomePhoneNumber")]
		HomePhoneNumber,
		
		[EnumMember(Value="Initials")]
		Initials,
		
		[EnumMember(Value="LastName")]
		LastName,
		
		[EnumMember(Value="Manager")]
		Manager,
		
		[EnumMember(Value="MobileNumber")]
		MobileNumber,
		
		[EnumMember(Value="Notes")]
		Notes,
		
		[EnumMember(Value="Office")]
		Office,
		
		[EnumMember(Value="OtherFaxNumber")]
		OtherFaxNumber,
		
		[EnumMember(Value="OtherHomePhoneNumber")]
		OtherHomePhoneNumber,
		
		[EnumMember(Value="OtherPhoneNumber")]
		OtherPhoneNumber,
		
		[EnumMember(Value="PagerNumber")]
		PagerNumber,
		
		[EnumMember(Value="PhoneNumber")]
		PhoneNumber,
		
		[EnumMember(Value="State")]
		State,
		
		[EnumMember(Value="Street")]
		Street,
		
		[EnumMember(Value="Title")]
		Title,
		
		[EnumMember(Value="UserLogonName")]
		UserLogonName,
		
		[EnumMember(Value="ZipCode")]
		ZipCode,
	}
	
	/// <summary>
	/// Domain type
	/// </summary>
	public enum EmailexchangeDomainTypeEnum {
		
		[EnumMember(Value="authoritative")]
		Authoritative,
		
		[EnumMember(Value="nonAuthoritative")]
		NonAuthoritative,
	}
	
	/// <summary>
	/// Outlook language
	/// </summary>
	public enum EmailexchangeLanguageEnum {
		
		[EnumMember(Value="ar")]
		Ar,
		
		[EnumMember(Value="bg")]
		Bg,
		
		[EnumMember(Value="cz")]
		Cz,
		
		[EnumMember(Value="da")]
		Da,
		
		[EnumMember(Value="de")]
		De,
		
		[EnumMember(Value="el")]
		El,
		
		[EnumMember(Value="en")]
		En,
		
		[EnumMember(Value="es")]
		Es,
		
		[EnumMember(Value="et")]
		Et,
		
		[EnumMember(Value="fi")]
		Fi,
		
		[EnumMember(Value="fr")]
		Fr,
		
		[EnumMember(Value="he")]
		He,
		
		[EnumMember(Value="hi")]
		Hi,
		
		[EnumMember(Value="hr")]
		Hr,
		
		[EnumMember(Value="hu")]
		Hu,
		
		[EnumMember(Value="id")]
		Id,
		
		[EnumMember(Value="in")]
		In,
		
		[EnumMember(Value="it")]
		It,
		
		[EnumMember(Value="ja")]
		Ja,
		
		[EnumMember(Value="ko")]
		Ko,
		
		[EnumMember(Value="kz")]
		Kz,
		
		[EnumMember(Value="lt")]
		Lt,
		
		[EnumMember(Value="lv")]
		Lv,
		
		[EnumMember(Value="ms")]
		Ms,
		
		[EnumMember(Value="nb")]
		Nb,
		
		[EnumMember(Value="nl")]
		Nl,
		
		[EnumMember(Value="pl")]
		Pl,
		
		[EnumMember(Value="pt")]
		Pt,
		
		[EnumMember(Value="pt-BR")]
		Pt_BR,
		
		[EnumMember(Value="ro")]
		Ro,
		
		[EnumMember(Value="rs")]
		Rs,
		
		[EnumMember(Value="ru")]
		Ru,
		
		[EnumMember(Value="sk")]
		Sk,
		
		[EnumMember(Value="sl")]
		Sl,
		
		[EnumMember(Value="sv")]
		Sv,
		
		[EnumMember(Value="th")]
		Th,
		
		[EnumMember(Value="tr")]
		Tr,
		
		[EnumMember(Value="uk")]
		Uk,
		
		[EnumMember(Value="vi")]
		Vi,
		
		[EnumMember(Value="zh-CN")]
		Zh_CN,
	}
	
	/// <summary>
	/// Mailing filter options availlable
	/// </summary>
	public enum EmailexchangeMailingFilterEnum {
		
		[EnumMember(Value="vaderetro")]
		Vaderetro,
	}
	
	/// <summary>
	/// Depart distribution group restriction status
	/// </summary>
	public enum EmailexchangeMailingListDepartRestrictionEnum {
		
		[EnumMember(Value="closed")]
		Closed,
		
		[EnumMember(Value="open")]
		Open,
	}
	
	/// <summary>
	/// Join distribution group restriction status
	/// </summary>
	public enum EmailexchangeMailingListJoinRestrictionEnum {
		
		[EnumMember(Value="approvalRequired")]
		ApprovalRequired,
		
		[EnumMember(Value="closed")]
		Closed,
		
		[EnumMember(Value="open")]
		Open,
	}
	
	/// <summary>
	/// Current object state
	/// </summary>
	public enum EmailexchangeObjectStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="internalMigration")]
		InternalMigration,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="reopening")]
		Reopening,
		
		[EnumMember(Value="suspended")]
		Suspended,
		
		[EnumMember(Value="suspending")]
		Suspending,
	}
	
	/// <summary>
	/// Outlook version
	/// </summary>
	public enum EmailexchangeOutlookVersionEnum {
		
		[EnumMember(Value="mac_x86_2011")]
		Mac_x86_2011,
		
		[EnumMember(Value="mac_x86_2016")]
		Mac_x86_2016,
		
		[EnumMember(Value="windows_x64_2013")]
		Windows_x64_2013,
		
		[EnumMember(Value="windows_x64_2016")]
		Windows_x64_2016,
		
		[EnumMember(Value="windows_x86_2013")]
		Windows_x86_2013,
		
		[EnumMember(Value="windows_x86_2016")]
		Windows_x86_2016,
	}
	
	/// <summary>
	/// OVH licence account
	/// </summary>
	public enum EmailexchangeOvhLicenceEnum {
		
		[EnumMember(Value="basic")]
		Basic,
		
		[EnumMember(Value="enterprise")]
		Enterprise,
		
		[EnumMember(Value="standard")]
		Standard,
	}
	
	/// <summary>
	/// Public folder right type
	/// </summary>
	public enum EmailexchangePublicFolderRightTypeEnum {
		
		[EnumMember(Value="editor")]
		Editor,
		
		[EnumMember(Value="none")]
		None,
		
		[EnumMember(Value="reviewer")]
		Reviewer,
	}
	
	/// <summary>
	/// Public folder type
	/// </summary>
	public enum EmailexchangePublicFolderTypeEnum {
		
		[EnumMember(Value="calendar")]
		Calendar,
		
		[EnumMember(Value="contacts")]
		Contacts,
		
		[EnumMember(Value="plain")]
		Plain,
		
		[EnumMember(Value="tasks")]
		Tasks,
	}
	
	/// <summary>
	/// Resource Type
	/// </summary>
	public enum EmailexchangeResourceTypeEnum {
		
		[EnumMember(Value="equipment")]
		Equipment,
		
		[EnumMember(Value="room")]
		Room,
	}
	
	/// <summary>
	/// Server State
	/// </summary>
	public enum EmailexchangeServerStateEnum {
		
		[EnumMember(Value="configurationError")]
		ConfigurationError,
		
		[EnumMember(Value="configurationPending")]
		ConfigurationPending,
		
		[EnumMember(Value="notConfigured")]
		NotConfigured,
		
		[EnumMember(Value="ok")]
		Ok,
	}
	
	/// <summary>
	/// Service Offer name
	/// </summary>
	public enum EmailexchangeServiceOfferEnum {
		
		[EnumMember(Value="dedicated")]
		Dedicated,
		
		[EnumMember(Value="dedicatedCluster")]
		DedicatedCluster,
		
		[EnumMember(Value="hosted")]
		Hosted,
		
		[EnumMember(Value="provider")]
		Provider,
	}
	
	/// <summary>
	/// Exchange Service State
	/// </summary>
	public enum EmailexchangeServiceStateEnum {
		
		[EnumMember(Value="inMaintenance")]
		InMaintenance,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="suspended")]
		Suspended,
	}
	
	/// <summary>
	/// Level of access to calendar of Resource Mailbox
	/// </summary>
	public enum EmailexchangeShowMeetingDetailsEnum {
		
		[EnumMember(Value="availabilityOnly")]
		AvailabilityOnly,
		
		[EnumMember(Value="limitedDetails")]
		LimitedDetails,
		
		[EnumMember(Value="reviewer")]
		Reviewer,
	}
	
	/// <summary>
	/// function enumeration for exchange task
	/// </summary>
	public enum EmailexchangeTaskFunctionEnum {
		
		[EnumMember(Value="activateSharepoint")]
		ActivateSharepoint,
		
		[EnumMember(Value="addAccount")]
		AddAccount,
		
		[EnumMember(Value="addAccountArchive")]
		AddAccountArchive,
		
		[EnumMember(Value="addActiveSyncMailNotification")]
		AddActiveSyncMailNotification,
		
		[EnumMember(Value="addAlias")]
		AddAlias,
		
		[EnumMember(Value="addDistributionGroup")]
		AddDistributionGroup,
		
		[EnumMember(Value="addDistributionGroupManager")]
		AddDistributionGroupManager,
		
		[EnumMember(Value="addDistributionGroupMember")]
		AddDistributionGroupMember,
		
		[EnumMember(Value="addDistributionGroupSendAs")]
		AddDistributionGroupSendAs,
		
		[EnumMember(Value="addDistributionGroupSendOnBehalfTo")]
		AddDistributionGroupSendOnBehalfTo,
		
		[EnumMember(Value="addDomain")]
		AddDomain,
		
		[EnumMember(Value="addDomainDisclaimer")]
		AddDomainDisclaimer,
		
		[EnumMember(Value="addExchangeServiceAuthorizedIp")]
		AddExchangeServiceAuthorizedIp,
		
		[EnumMember(Value="addExportPstRequest")]
		AddExportPstRequest,
		
		[EnumMember(Value="addExternalContact")]
		AddExternalContact,
		
		[EnumMember(Value="addFullAccess")]
		AddFullAccess,
		
		[EnumMember(Value="addOutlookLicense")]
		AddOutlookLicense,
		
		[EnumMember(Value="addPublicFolder")]
		AddPublicFolder,
		
		[EnumMember(Value="addPublicFolderPermission")]
		AddPublicFolderPermission,
		
		[EnumMember(Value="addResourceAccount")]
		AddResourceAccount,
		
		[EnumMember(Value="addResourceDelegate")]
		AddResourceDelegate,
		
		[EnumMember(Value="addSendAs")]
		AddSendAs,
		
		[EnumMember(Value="addSendOnBehalfTo")]
		AddSendOnBehalfTo,
		
		[EnumMember(Value="addSharedAccount")]
		AddSharedAccount,
		
		[EnumMember(Value="addSharedAccountFullAccess")]
		AddSharedAccountFullAccess,
		
		[EnumMember(Value="addSharedAccountSendAs")]
		AddSharedAccountSendAs,
		
		[EnumMember(Value="addSharedAccountSendOnBehalfTo")]
		AddSharedAccountSendOnBehalfTo,
		
		[EnumMember(Value="changeHostname")]
		ChangeHostname,
		
		[EnumMember(Value="changePassword")]
		ChangePassword,
		
		[EnumMember(Value="clearDataOnDevice")]
		ClearDataOnDevice,
		
		[EnumMember(Value="cloneTemplateExchangePrivate")]
		CloneTemplateExchangePrivate,
		
		[EnumMember(Value="configureExchangeCustomer")]
		ConfigureExchangeCustomer,
		
		[EnumMember(Value="configureExchangeOwaMfa")]
		ConfigureExchangeOwaMfa,
		
		[EnumMember(Value="deleteAccount")]
		DeleteAccount,
		
		[EnumMember(Value="deleteAccountArchive")]
		DeleteAccountArchive,
		
		[EnumMember(Value="deleteActiveSyncMailNotification")]
		DeleteActiveSyncMailNotification,
		
		[EnumMember(Value="deleteAlias")]
		DeleteAlias,
		
		[EnumMember(Value="deleteDistributionGroup")]
		DeleteDistributionGroup,
		
		[EnumMember(Value="deleteDistributionGroupManager")]
		DeleteDistributionGroupManager,
		
		[EnumMember(Value="deleteDistributionGroupMember")]
		DeleteDistributionGroupMember,
		
		[EnumMember(Value="deleteDistributionGroupSendAs")]
		DeleteDistributionGroupSendAs,
		
		[EnumMember(Value="deleteDistributionGroupSendOnBehalfTo")]
		DeleteDistributionGroupSendOnBehalfTo,
		
		[EnumMember(Value="deleteDomain")]
		DeleteDomain,
		
		[EnumMember(Value="deleteDomainDisclaimer")]
		DeleteDomainDisclaimer,
		
		[EnumMember(Value="deleteExchangeService")]
		DeleteExchangeService,
		
		[EnumMember(Value="deleteExchangeServiceAuthorizedIp")]
		DeleteExchangeServiceAuthorizedIp,
		
		[EnumMember(Value="deleteExportPstRequest")]
		DeleteExportPstRequest,
		
		[EnumMember(Value="deleteExternalContact")]
		DeleteExternalContact,
		
		[EnumMember(Value="deleteFullAccess")]
		DeleteFullAccess,
		
		[EnumMember(Value="deleteOutlookLicense")]
		DeleteOutlookLicense,
		
		[EnumMember(Value="deletePublicFolder")]
		DeletePublicFolder,
		
		[EnumMember(Value="deletePublicFolderPermission")]
		DeletePublicFolderPermission,
		
		[EnumMember(Value="deleteResourceAccount")]
		DeleteResourceAccount,
		
		[EnumMember(Value="deleteResourceDelegate")]
		DeleteResourceDelegate,
		
		[EnumMember(Value="deleteSendAs")]
		DeleteSendAs,
		
		[EnumMember(Value="deleteSendOnBehalfTo")]
		DeleteSendOnBehalfTo,
		
		[EnumMember(Value="deleteSharedAccount")]
		DeleteSharedAccount,
		
		[EnumMember(Value="deleteSharedAccountFullAccess")]
		DeleteSharedAccountFullAccess,
		
		[EnumMember(Value="deleteSharedAccountSendAs")]
		DeleteSharedAccountSendAs,
		
		[EnumMember(Value="deleteSharedAccountSendOnBehalfTo")]
		DeleteSharedAccountSendOnBehalfTo,
		
		[EnumMember(Value="destroyPrivateVm")]
		DestroyPrivateVm,
		
		[EnumMember(Value="diagnoseAccount")]
		DiagnoseAccount,
		
		[EnumMember(Value="expandDrive")]
		ExpandDrive,
		
		[EnumMember(Value="generateOutlookUrl")]
		GenerateOutlookUrl,
		
		[EnumMember(Value="generatePstUrl")]
		GeneratePstUrl,
		
		[EnumMember(Value="installExchange")]
		InstallExchange,
		
		[EnumMember(Value="installSSL")]
		InstallSSL,
		
		[EnumMember(Value="maintenance")]
		Maintenance,
		
		[EnumMember(Value="migrationAccount")]
		MigrationAccount,
		
		[EnumMember(Value="migrationDisclaimer")]
		MigrationDisclaimer,
		
		[EnumMember(Value="migrationExternalContact")]
		MigrationExternalContact,
		
		[EnumMember(Value="migrationHistory")]
		MigrationHistory,
		
		[EnumMember(Value="migrationMailingList")]
		MigrationMailingList,
		
		[EnumMember(Value="migrationResourceAccount")]
		MigrationResourceAccount,
		
		[EnumMember(Value="migrationService")]
		MigrationService,
		
		[EnumMember(Value="reOpenHostedAccount")]
		ReOpenHostedAccount,
		
		[EnumMember(Value="reOpenOutlookLicense")]
		ReOpenOutlookLicense,
		
		[EnumMember(Value="reOpenPrivateAccount")]
		ReOpenPrivateAccount,
		
		[EnumMember(Value="reOpenPrivateVm")]
		ReOpenPrivateVm,
		
		[EnumMember(Value="setAccount")]
		SetAccount,
		
		[EnumMember(Value="setAccountArchive")]
		SetAccountArchive,
		
		[EnumMember(Value="setAlias")]
		SetAlias,
		
		[EnumMember(Value="setDistributionGroup")]
		SetDistributionGroup,
		
		[EnumMember(Value="setDns")]
		SetDns,
		
		[EnumMember(Value="setDomain")]
		SetDomain,
		
		[EnumMember(Value="setDomainDisclaimer")]
		SetDomainDisclaimer,
		
		[EnumMember(Value="setExchangeAccountProtocol")]
		SetExchangeAccountProtocol,
		
		[EnumMember(Value="setExchangeServiceDevice")]
		SetExchangeServiceDevice,
		
		[EnumMember(Value="setExternalContact")]
		SetExternalContact,
		
		[EnumMember(Value="setPublicFolder")]
		SetPublicFolder,
		
		[EnumMember(Value="setPublicFolderPermission")]
		SetPublicFolderPermission,
		
		[EnumMember(Value="setResourceAccount")]
		SetResourceAccount,
		
		[EnumMember(Value="setService")]
		SetService,
		
		[EnumMember(Value="setSharedAccount")]
		SetSharedAccount,
		
		[EnumMember(Value="suspendAccount")]
		SuspendAccount,
		
		[EnumMember(Value="suspendExchangeService")]
		SuspendExchangeService,
		
		[EnumMember(Value="suspendHostedAccount")]
		SuspendHostedAccount,
		
		[EnumMember(Value="suspendOutlookLicense")]
		SuspendOutlookLicense,
		
		[EnumMember(Value="suspendPrivateAccount")]
		SuspendPrivateAccount,
		
		[EnumMember(Value="suspendPrivateVm")]
		SuspendPrivateVm,
		
		[EnumMember(Value="unsuspendAccount")]
		UnsuspendAccount,
		
		[EnumMember(Value="unsuspendExchangeService")]
		UnsuspendExchangeService,
		
		[EnumMember(Value="unsuspendHostedAccount")]
		UnsuspendHostedAccount,
		
		[EnumMember(Value="updateExchangeServiceDevice")]
		UpdateExchangeServiceDevice,
		
		[EnumMember(Value="upgrade2016")]
		Upgrade2016,
	}
	
	/// <summary>
	/// Exchange task status
	/// </summary>
	public enum EmailexchangeTaskStatusEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Subscription state
	/// </summary>
	public enum EmailexchangeactiveSyncNotificationStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="ok")]
		Ok,
	}
	
	/// <summary>
	/// Authorized IP State
	/// </summary>
	public enum EmailexchangeauthorizedIpStatusEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="ok")]
		Ok,
	}
	
	/// <summary>
	/// Exchange commercial version
	/// </summary>
	public enum EmailexchangeexchangeCommercialVersionEnum {
		
		[EnumMember(Value="2010")]
		_2010,
		
		[EnumMember(Value="2013")]
		_2013,
		
		[EnumMember(Value="2016")]
		_2016,
		
		[EnumMember(Value="2019")]
		_2019,
	}
	
	/// <summary>
	/// Renew period
	/// </summary>
	public enum EmailexchangerenewPeriodEnum {
		
		[EnumMember(Value="monthly")]
		Monthly,
		
		[EnumMember(Value="yearly")]
		Yearly,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// Exchange mailbox
	/// </summary>
	public class EmailexchangeAccount {
		
		private string SAMAccountName_bfield;
		
		private string AccountLicense_bfield;
		
		private string Company_bfield;
		
		private bool Configured_bfield;
		
		private System.Nullable<System.DateTime> CreationDate_bfield;
		
		private System.Nullable<long> CurrentUsage_bfield;
		
		private System.Nullable<bool> DeleteAtExpiration_bfield;
		
		private System.Nullable<bool> DeleteOutlookAtExpiration_bfield;
		
		private string DisplayName_bfield;
		
		private string Domain_bfield;
		
		private string ExchangeGuid_bfield;
		
		private System.Nullable<System.DateTime> ExpirationDate_bfield;
		
		private System.Nullable<System.DateTime> ExpirationOutlookDate_bfield;
		
		private string FirstName_bfield;
		
		private string Guid_bfield;
		
		private bool HiddenFromGAL_bfield;
		
		private long Id_bfield;
		
		private string Initial_bfield;
		
		private System.Nullable<System.DateTime> LastLogoffDate_bfield;
		
		private System.Nullable<System.DateTime> LastLogonDate_bfield;
		
		private string LastName_bfield;
		
		private System.Nullable<System.DateTime> LastUpdateDate_bfield;
		
		private bool Litigation_bfield;
		
		private System.Nullable<long> LitigationPeriod_bfield;
		
		private string Login_bfield;
		
		private string[] MailingFilter_bfield;
		
		private long NumberOfAliases_bfield;
		
		private bool OutlookLicense_bfield;
		
		private bool OwaLimited_bfield;
		
		private System.Nullable<System.DateTime> PasswordLastUpdate_bfield;
		
		private string PrimaryEmailAddress_bfield;
		
		private long Quota_bfield;
		
		private string RenewOutlookPeriod_bfield;
		
		private string RenewPeriod_bfield;
		
		private EmailexchangespamAndVirusConfiguration SpamAndVirusConfiguration_bfield;
		
		private bool SpamDetected_bfield;
		
		private System.Nullable<long> SpamTicketNumber_bfield;
		
		private string State_bfield;
		
		private System.Nullable<long> TaskPendingId_bfield;
		
		/// <summary>
		/// SAM account name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;SAM account name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("SAMAccountName")]
		public string SAMAccountName {
			get {
				return this.SAMAccountName_bfield;
			}
			set {
				this.SAMAccountName_bfield = value;
			}
		}
		
		/// <summary>
		/// Exchange account type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.OvhLicenceEnum&quot;,&quot;Description&quot;:&quot;Exchange account type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accountLicense")]
		public string AccountLicense {
			get {
				return this.AccountLicense_bfield;
			}
			set {
				this.AccountLicense_bfield = value;
			}
		}
		
		/// <summary>
		/// Company name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Company name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("company")]
		public string Company {
			get {
				return this.Company_bfield;
			}
			set {
				this.Company_bfield = value;
			}
		}
		
		/// <summary>
		/// Indicates if the account is configured
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates if the account is configured&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("configured")]
		public bool Configured {
			get {
				return this.Configured_bfield;
			}
			set {
				this.Configured_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.Nullable<System.DateTime> CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Mailbox usage
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Mailbox usage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentUsage")]
		public System.Nullable<long> CurrentUsage {
			get {
				return this.CurrentUsage_bfield;
			}
			set {
				this.CurrentUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// delete at expiration
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;delete at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public System.Nullable<bool> DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// delete outlook at expiration
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;delete outlook at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteOutlookAtExpiration")]
		public System.Nullable<bool> DeleteOutlookAtExpiration {
			get {
				return this.DeleteOutlookAtExpiration_bfield;
			}
			set {
				this.DeleteOutlookAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// Account display name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account display name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Email domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Email domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// exchangeGuid for manual configuration
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;exchangeGuid for manual configuration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("exchangeGuid")]
		public string ExchangeGuid {
			get {
				return this.ExchangeGuid_bfield;
			}
			set {
				this.ExchangeGuid_bfield = value;
			}
		}
		
		/// <summary>
		/// expiration date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationDate")]
		public System.Nullable<System.DateTime> ExpirationDate {
			get {
				return this.ExpirationDate_bfield;
			}
			set {
				this.ExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// expiration date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationOutlookDate")]
		public System.Nullable<System.DateTime> ExpirationOutlookDate {
			get {
				return this.ExpirationOutlookDate_bfield;
			}
			set {
				this.ExpirationOutlookDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Account first name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account first name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// GUID for user in active directory
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;GUID for user in active directory&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("guid")]
		public string Guid {
			get {
				return this.Guid_bfield;
			}
			set {
				this.Guid_bfield = value;
			}
		}
		
		/// <summary>
		/// Hide account in Global Address List
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Hide account in Global Address List&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hiddenFromGAL")]
		public bool HiddenFromGAL {
			get {
				return this.HiddenFromGAL_bfield;
			}
			set {
				this.HiddenFromGAL_bfield = value;
			}
		}
		
		/// <summary>
		/// Account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Account initials
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account initials&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("initial")]
		public string Initial {
			get {
				return this.Initial_bfield;
			}
			set {
				this.Initial_bfield = value;
			}
		}
		
		/// <summary>
		/// Last logoff
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last logoff&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastLogoffDate")]
		public System.Nullable<System.DateTime> LastLogoffDate {
			get {
				return this.LastLogoffDate_bfield;
			}
			set {
				this.LastLogoffDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Last logon
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last logon&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastLogonDate")]
		public System.Nullable<System.DateTime> LastLogonDate {
			get {
				return this.LastLogonDate_bfield;
			}
			set {
				this.LastLogonDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Account last name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account last name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.Nullable<System.DateTime> LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Litigation hold feature enabled on this mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Litigation hold feature enabled on this mailbox&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("litigation")]
		public bool Litigation {
			get {
				return this.Litigation_bfield;
			}
			set {
				this.Litigation_bfield = value;
			}
		}
		
		/// <summary>
		/// Litigation hold period in days (0 means unlimited). This setting covers all items in the mailbox.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Litigation hold period in days (0 means unlimited). This setting covers all items in the mailbox.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("litigationPeriod")]
		public System.Nullable<long> LitigationPeriod {
			get {
				return this.LitigationPeriod_bfield;
			}
			set {
				this.LitigationPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Account login
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account login&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("login")]
		public string Login {
			get {
				return this.Login_bfield;
			}
			set {
				this.Login_bfield = value;
			}
		}
		
		/// <summary>
		/// Enable or disable anti-virus and anti-spam
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;email.exchange.MailingFilterEnum[]&quot;,&quot;Description&quot;:&quot;Enable or disable anti-virus and anti-spam&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("mailingFilter")]
		public string[] MailingFilter {
			get {
				return this.MailingFilter_bfield;
			}
			set {
				this.MailingFilter_bfield = value;
			}
		}
		
		/// <summary>
		/// Count the number of related aliases attached to this account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Count the number of related aliases attached to this account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("numberOfAliases")]
		public long NumberOfAliases {
			get {
				return this.NumberOfAliases_bfield;
			}
			set {
				this.NumberOfAliases_bfield = value;
			}
		}
		
		/// <summary>
		/// Outlook licence
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Outlook licence&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("outlookLicense")]
		public bool OutlookLicense {
			get {
				return this.OutlookLicense_bfield;
			}
			set {
				this.OutlookLicense_bfield = value;
			}
		}
		
		/// <summary>
		/// OWA policy restriction is applied
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;OWA policy restriction is applied&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("owaLimited")]
		public bool OwaLimited {
			get {
				return this.OwaLimited_bfield;
			}
			set {
				this.OwaLimited_bfield = value;
			}
		}
		
		/// <summary>
		/// Time of account's password last update
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Time of account's password last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("passwordLastUpdate")]
		public System.Nullable<System.DateTime> PasswordLastUpdate {
			get {
				return this.PasswordLastUpdate_bfield;
			}
			set {
				this.PasswordLastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Default email for this mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Default email for this mailbox&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("primaryEmailAddress")]
		public string PrimaryEmailAddress {
			get {
				return this.PrimaryEmailAddress_bfield;
			}
			set {
				this.PrimaryEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Account maximum size
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account maximum size&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quota")]
		public long Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// change the renew period for outlook
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;email.exchange.renewPeriodEnum&quot;,&quot;Description&quot;:&quot;change the renew period for outlook&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renewOutlookPeriod")]
		public string RenewOutlookPeriod {
			get {
				return this.RenewOutlookPeriod_bfield;
			}
			set {
				this.RenewOutlookPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// change the renew period
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;email.exchange.renewPeriodEnum&quot;,&quot;Description&quot;:&quot;change the renew period&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renewPeriod")]
		public string RenewPeriod {
			get {
				return this.RenewPeriod_bfield;
			}
			set {
				this.RenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Spam and Antivirus configuration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.spamAndVirusConfiguration&quot;,&quot;Description&quot;:&quot;Spam and Antivirus configuration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("spamAndVirusConfiguration")]
		public EmailexchangespamAndVirusConfiguration SpamAndVirusConfiguration {
			get {
				return this.SpamAndVirusConfiguration_bfield;
			}
			set {
				this.SpamAndVirusConfiguration_bfield = value;
			}
		}
		
		/// <summary>
		/// Account was sending spam
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Account was sending spam&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamDetected")]
		public bool SpamDetected {
			get {
				return this.SpamDetected_bfield;
			}
			set {
				this.SpamDetected_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket number of spam detection
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket number of spam detection&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamTicketNumber")]
		public System.Nullable<long> SpamTicketNumber {
			get {
				return this.SpamTicketNumber_bfield;
			}
			set {
				this.SpamTicketNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Account state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Account state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task for this account
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task for this account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public System.Nullable<long> TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange account license
	/// </summary>
	public class EmailexchangeAccountLicense {
		
		private string License_bfield;
		
		private long LicenseQuantity_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.OvhLicenceEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("license")]
		public string License {
			get {
				return this.License_bfield;
			}
			set {
				this.License_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("licenseQuantity")]
		public long LicenseQuantity {
			get {
				return this.LicenseQuantity_bfield;
			}
			set {
				this.LicenseQuantity_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange account license per day
	/// </summary>
	public class EmailexchangeDailyLicense {
		
		private string[] AccountLicense_bfield;
		
		private string Date_bfield;
		
		private long OutlookQuantity_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.AccountLicense[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accountLicense")]
		public string[] AccountLicense {
			get {
				return this.AccountLicense_bfield;
			}
			set {
				this.AccountLicense_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("date")]
		public string Date {
			get {
				return this.Date_bfield;
			}
			set {
				this.Date_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("outlookQuantity")]
		public long OutlookQuantity {
			get {
				return this.OutlookQuantity_bfield;
			}
			set {
				this.OutlookQuantity_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange domain
	/// </summary>
	public class EmailexchangeDomain {
		
		private string CnameToCheck_bfield;
		
		private string[] DomainAliases_bfield;
		
		private bool DomainValidated_bfield;
		
		private bool IsAliasDomain_bfield;
		
		private System.Nullable<bool> Main_bfield;
		
		private bool MxIsValid_bfield;
		
		private string[] MxRecord_bfield;
		
		private string MxRelay_bfield;
		
		private string Name_bfield;
		
		private string Organization2010_bfield;
		
		private bool SrvIsValid_bfield;
		
		private string[] SrvRecord_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Cname that will be checked to prove the domain ownership
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Cname that will be checked to prove the domain ownership&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cnameToCheck")]
		public string CnameToCheck {
			get {
				return this.CnameToCheck_bfield;
			}
			set {
				this.CnameToCheck_bfield = value;
			}
		}
		
		/// <summary>
		/// List of aliases for this domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;List of aliases for this domain&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domainAliases")]
		public string[] DomainAliases {
			get {
				return this.DomainAliases_bfield;
			}
			set {
				this.DomainAliases_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain validation status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Domain validation status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domainValidated")]
		public bool DomainValidated {
			get {
				return this.DomainValidated_bfield;
			}
			set {
				this.DomainValidated_bfield = value;
			}
		}
		
		/// <summary>
		/// Indicate if this domain is an alias for another domain
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicate if this domain is an alias for another domain&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isAliasDomain")]
		public bool IsAliasDomain {
			get {
				return this.IsAliasDomain_bfield;
			}
			set {
				this.IsAliasDomain_bfield = value;
			}
		}
		
		/// <summary>
		/// If true this is an organization (Exchange 2010 only)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true this is an organization (Exchange 2010 only)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("main")]
		public System.Nullable<bool> Main {
			get {
				return this.Main_bfield;
			}
			set {
				this.Main_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns mx configuration is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns mx configuration is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mxIsValid")]
		public bool MxIsValid {
			get {
				return this.MxIsValid_bfield;
			}
			set {
				this.MxIsValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain MX record configured in DNS
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Domain MX record configured in DNS&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("mxRecord")]
		public string[] MxRecord {
			get {
				return this.MxRecord_bfield;
			}
			set {
				this.MxRecord_bfield = value;
			}
		}
		
		/// <summary>
		/// If specified, emails to not existing address will be redirected to that domain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;If specified, emails to not existing address will be redirected to that domain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("mxRelay")]
		public string MxRelay {
			get {
				return this.MxRelay_bfield;
			}
			set {
				this.MxRelay_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Domain name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// If specified, indicates to which organization this domain belongs (Exchange 2010 only)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;If specified, indicates to which organization this domain belongs (Exchange 2010 only)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("organization2010")]
		public string Organization2010 {
			get {
				return this.Organization2010_bfield;
			}
			set {
				this.Organization2010_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns srv record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns srv record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("srvIsValid")]
		public bool SrvIsValid {
			get {
				return this.SrvIsValid_bfield;
			}
			set {
				this.SrvIsValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain SRV record configured in DNS
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;Domain SRV record configured in DNS&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("srvRecord")]
		public string[] SrvRecord {
			get {
				return this.SrvRecord_bfield;
			}
			set {
				this.SrvRecord_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Domain state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending taks id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending taks id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// Domain type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.DomainTypeEnum&quot;,&quot;Description&quot;:&quot;Domain type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange service
	/// </summary>
	public class EmailexchangeExchangeService {
		
		private bool ComplexityEnabled_bfield;
		
		private string DisplayName_bfield;
		
		private string Domain_bfield;
		
		private string Hostname_bfield;
		
		private System.Nullable<System.DateTime> LastUpdateDate_bfield;
		
		private long LockoutDuration_bfield;
		
		private long LockoutObservationWindow_bfield;
		
		private System.Nullable<long> LockoutThreshold_bfield;
		
		private System.Nullable<long> MaxPasswordAge_bfield;
		
		private long MaxReceiveSize_bfield;
		
		private long MaxSendSize_bfield;
		
		private System.Nullable<long> MinPasswordAge_bfield;
		
		private System.Nullable<long> MinPasswordLength_bfield;
		
		private string Offer_bfield;
		
		private System.Nullable<long> PasswordHistoryCount_bfield;
		
		private EmailexchangespamAndVirusConfiguration SpamAndVirusConfiguration_bfield;
		
		private string SslExpirationDate_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private string WebUrl_bfield;
		
		/// <summary>
		/// enable policy for strong and secure passwords
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;enable policy for strong and secure passwords&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("complexityEnabled")]
		public bool ComplexityEnabled {
			get {
				return this.ComplexityEnabled_bfield;
			}
			set {
				this.ComplexityEnabled_bfield = value;
			}
		}
		
		/// <summary>
		/// service displayName
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;service displayName&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("hostname")]
		public string Hostname {
			get {
				return this.Hostname_bfield;
			}
			set {
				this.Hostname_bfield = value;
			}
		}
		
		/// <summary>
		/// Update date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.Nullable<System.DateTime> LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// number of minutes account will remain locked if it occurs
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of minutes account will remain locked if it occurs&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutDuration")]
		public long LockoutDuration {
			get {
				return this.LockoutDuration_bfield;
			}
			set {
				this.LockoutDuration_bfield = value;
			}
		}
		
		/// <summary>
		/// number of minutes that must elapse after a failed logon to reset lockout trigger
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of minutes that must elapse after a failed logon to reset lockout trigger&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutObservationWindow")]
		public long LockoutObservationWindow {
			get {
				return this.LockoutObservationWindow_bfield;
			}
			set {
				this.LockoutObservationWindow_bfield = value;
			}
		}
		
		/// <summary>
		/// number of attempts before account to be locked
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of attempts before account to be locked&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutThreshold")]
		public System.Nullable<long> LockoutThreshold {
			get {
				return this.LockoutThreshold_bfield;
			}
			set {
				this.LockoutThreshold_bfield = value;
			}
		}
		
		/// <summary>
		/// maximum number of days that account's password is valid before expiration
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;maximum number of days that account's password is valid before expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxPasswordAge")]
		public System.Nullable<long> MaxPasswordAge {
			get {
				return this.MaxPasswordAge_bfield;
			}
			set {
				this.MaxPasswordAge_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum message size that You can receive in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum message size that You can receive in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxReceiveSize")]
		public long MaxReceiveSize {
			get {
				return this.MaxReceiveSize_bfield;
			}
			set {
				this.MaxReceiveSize_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum message size that You can send in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum message size that You can send in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxSendSize")]
		public long MaxSendSize {
			get {
				return this.MaxSendSize_bfield;
			}
			set {
				this.MaxSendSize_bfield = value;
			}
		}
		
		/// <summary>
		/// minimum number of days before able to change account's password
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;minimum number of days before able to change account's password&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("minPasswordAge")]
		public System.Nullable<long> MinPasswordAge {
			get {
				return this.MinPasswordAge_bfield;
			}
			set {
				this.MinPasswordAge_bfield = value;
			}
		}
		
		/// <summary>
		/// minimum number of characters password must contain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;minimum number of characters password must contain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("minPasswordLength")]
		public System.Nullable<long> MinPasswordLength {
			get {
				return this.MinPasswordLength_bfield;
			}
			set {
				this.MinPasswordLength_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ServiceOfferEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// number of historical password that cannot be reused
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of historical password that cannot be reused&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("passwordHistoryCount")]
		public System.Nullable<long> PasswordHistoryCount {
			get {
				return this.PasswordHistoryCount_bfield;
			}
			set {
				this.PasswordHistoryCount_bfield = value;
			}
		}
		
		/// <summary>
		/// Spam and Antivirus configuration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.spamAndVirusConfiguration&quot;,&quot;Description&quot;:&quot;Spam and Antivirus configuration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("spamAndVirusConfiguration")]
		public EmailexchangespamAndVirusConfiguration SpamAndVirusConfiguration {
			get {
				return this.SpamAndVirusConfiguration_bfield;
			}
			set {
				this.SpamAndVirusConfiguration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("sslExpirationDate")]
		public string SslExpirationDate {
			get {
				return this.SslExpirationDate_bfield;
			}
			set {
				this.SslExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ServiceStateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// URL for web interface
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;URL for web interface&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("webUrl")]
		public string WebUrl {
			get {
				return this.WebUrl_bfield;
			}
			set {
				this.WebUrl_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Export PST file request
	/// </summary>
	public class EmailexchangeExport {
		
		private System.DateTime CreationDate_bfield;
		
		private long PercentComplete_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Percentage of export PST request completion
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Percentage of export PST request completion&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("percentComplete")]
		public long PercentComplete {
			get {
				return this.PercentComplete_bfield;
			}
			set {
				this.PercentComplete_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Export PST file url
	/// </summary>
	public class EmailexchangeExportUrl {
		
		private System.DateTime Expiration_bfield;
		
		private string Url_bfield;
		
		/// <summary>
		/// Url expiration date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Url expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public System.DateTime Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// Export url
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Export url&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("url")]
		public string Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Outlook url
	/// </summary>
	public class EmailexchangeOutlookUrl {
		
		private System.DateTime Expiration_bfield;
		
		private string Serial_bfield;
		
		private string Url_bfield;
		
		/// <summary>
		/// Url expiration date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Url expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public System.DateTime Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// Serial number
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Serial number&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serial")]
		public string Serial {
			get {
				return this.Serial_bfield;
			}
			set {
				this.Serial_bfield = value;
			}
		}
		
		/// <summary>
		/// Outlook url
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Outlook url&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("url")]
		public string Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Availability of outlook version
	/// </summary>
	public class EmailexchangeOutlookVersions {
		
		private string OutlookLanguage_bfield;
		
		private string OutlookVersion_bfield;
		
		private bool Status_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.LanguageEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("outlookLanguage")]
		public string OutlookLanguage {
			get {
				return this.OutlookLanguage_bfield;
			}
			set {
				this.OutlookLanguage_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.OutlookVersionEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("outlookVersion")]
		public string OutlookVersion {
			get {
				return this.OutlookVersion_bfield;
			}
			set {
				this.OutlookVersion_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("status")]
		public bool Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get public folder quota usage in total available space
	/// </summary>
	public class EmailexchangePublicFolderQuota {
		
		private long QuotaLimit_bfield;
		
		private long QuotaReserved_bfield;
		
		private long QuotaUsed_bfield;
		
		/// <summary>
		/// total amount of space in MB for public folders within organization
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;total amount of space in MB for public folders within organization&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quotaLimit")]
		public long QuotaLimit {
			get {
				return this.QuotaLimit_bfield;
			}
			set {
				this.QuotaLimit_bfield = value;
			}
		}
		
		/// <summary>
		/// space in MB already reserved from the quota limit
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;space in MB already reserved from the quota limit&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quotaReserved")]
		public long QuotaReserved {
			get {
				return this.QuotaReserved_bfield;
			}
			set {
				this.QuotaReserved_bfield = value;
			}
		}
		
		/// <summary>
		/// currently used space in MB within all public folders
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;currently used space in MB within all public folders&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quotaUsed")]
		public long QuotaUsed {
			get {
				return this.QuotaUsed_bfield;
			}
			set {
				this.QuotaUsed_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange server
	/// </summary>
	public class EmailexchangeServer {
		
		private string CommercialVersion_bfield;
		
		private System.Nullable<long> CurrentDiskUsage_bfield;
		
		private System.Nullable<long> DiskSize_bfield;
		
		private bool Individual2010_bfield;
		
		private string Ip_bfield;
		
		private string IpV6_bfield;
		
		private bool IsAValid_bfield;
		
		private bool IsAaaaValid_bfield;
		
		private bool IsPtrV6Valid_bfield;
		
		private bool IsPtrValid_bfield;
		
		private bool OwaMfa_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private System.Nullable<long> Version_bfield;
		
		/// <summary>
		/// Exchange commercial version
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.exchangeCommercialVersionEnum&quot;,&quot;Description&quot;:&quot;Exchange commercial version&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("commercialVersion")]
		public string CommercialVersion {
			get {
				return this.CommercialVersion_bfield;
			}
			set {
				this.CommercialVersion_bfield = value;
			}
		}
		
		/// <summary>
		/// Current disk usage in MB
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Current disk usage in MB&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentDiskUsage")]
		public System.Nullable<long> CurrentDiskUsage {
			get {
				return this.CurrentDiskUsage_bfield;
			}
			set {
				this.CurrentDiskUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// Total disk size in MB
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Total disk size in MB&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("diskSize")]
		public System.Nullable<long> DiskSize {
			get {
				return this.DiskSize_bfield;
			}
			set {
				this.DiskSize_bfield = value;
			}
		}
		
		/// <summary>
		/// If true server is 2010 individual offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true server is 2010 individual offer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("individual2010")]
		public bool Individual2010 {
			get {
				return this.Individual2010_bfield;
			}
			set {
				this.Individual2010_bfield = value;
			}
		}
		
		/// <summary>
		/// ipV4
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;ipV4&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// ipV6
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;ipV6&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ipV6")]
		public string IpV6 {
			get {
				return this.IpV6_bfield;
			}
			set {
				this.IpV6_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns A record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns A record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isAValid")]
		public bool IsAValid {
			get {
				return this.IsAValid_bfield;
			}
			set {
				this.IsAValid_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns AAAA record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns AAAA record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isAaaaValid")]
		public bool IsAaaaValid {
			get {
				return this.IsAaaaValid_bfield;
			}
			set {
				this.IsAaaaValid_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns ptrV6 record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns ptrV6 record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isPtrV6Valid")]
		public bool IsPtrV6Valid {
			get {
				return this.IsPtrV6Valid_bfield;
			}
			set {
				this.IsPtrV6Valid_bfield = value;
			}
		}
		
		/// <summary>
		/// If true your dns ptr record is valid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true your dns ptr record is valid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isPtrValid")]
		public bool IsPtrValid {
			get {
				return this.IsPtrValid_bfield;
			}
			set {
				this.IsPtrValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Indicates if Multi Factor Authentication is activated on Outlook Web Access interface
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates if Multi Factor Authentication is activated on Outlook Web Access interface&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("owaMfa")]
		public bool OwaMfa {
			get {
				return this.OwaMfa_bfield;
			}
			set {
				this.OwaMfa_bfield = value;
			}
		}
		
		/// <summary>
		/// Server state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ServerStateEnum&quot;,&quot;Description&quot;:&quot;Server state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// ExchangeServer version
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;ExchangeServer version&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("version")]
		public System.Nullable<long> Version {
			get {
				return this.Version_bfield;
			}
			set {
				this.Version_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get shared account quota usage in total available space
	/// </summary>
	public class EmailexchangeSharedAccountQuota {
		
		private long QuotaLimit_bfield;
		
		private long QuotaReserved_bfield;
		
		private long QuotaUsed_bfield;
		
		/// <summary>
		/// total amount of space in MB for shared accounts within organization
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;total amount of space in MB for shared accounts within organization&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quotaLimit")]
		public long QuotaLimit {
			get {
				return this.QuotaLimit_bfield;
			}
			set {
				this.QuotaLimit_bfield = value;
			}
		}
		
		/// <summary>
		/// space in MB already reserved from the quota limit
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;space in MB already reserved from the quota limit&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quotaReserved")]
		public long QuotaReserved {
			get {
				return this.QuotaReserved_bfield;
			}
			set {
				this.QuotaReserved_bfield = value;
			}
		}
		
		/// <summary>
		/// currently used space in KB within all shared accounts
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;currently used space in KB within all shared accounts&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quotaUsed")]
		public long QuotaUsed {
			get {
				return this.QuotaUsed_bfield;
			}
			set {
				this.QuotaUsed_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange task details
	/// </summary>
	public class EmailexchangeTask {
		
		private System.Nullable<System.DateTime> FinishDate_bfield;
		
		private string Function_bfield;
		
		private long Id_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// Completion date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Completion date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("finishDate")]
		public System.Nullable<System.DateTime> FinishDate {
			get {
				return this.FinishDate_bfield;
			}
			set {
				this.FinishDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Function name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.TaskFunctionEnum&quot;,&quot;Description&quot;:&quot;Function name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Task status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;Task status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange organization disclaimer
	/// </summary>
	public class Emailexchangedisclaimer {
		
		private string Content_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private string Name_bfield;
		
		private bool OutsideOnly_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Signature, added at the bottom of your organization emails
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;Signature, added at the bottom of your organization emails&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("content")]
		public string Content {
			get {
				return this.Content_bfield;
			}
			set {
				this.Content_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Disclaimer name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Disclaimer name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Activate the disclaimer only for external emails
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Activate the disclaimer only for external emails&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("outsideOnly")]
		public bool OutsideOnly {
			get {
				return this.OutsideOnly_bfield;
			}
			set {
				this.OutsideOnly_bfield = value;
			}
		}
		
		/// <summary>
		/// task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Aliases on this mailbox
	/// </summary>
	public class EmailexchangeexchangeAccountAlias {
		
		private string Alias_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Alias
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Alias&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("alias")]
		public string Alias {
			get {
				return this.Alias_bfield;
			}
			set {
				this.Alias_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange Account Archive
	/// </summary>
	public class EmailexchangeexchangeAccountArchive {
		
		private System.DateTime CreationDate_bfield;
		
		private System.Nullable<long> CurrentUsage_bfield;
		
		private string Guid_bfield;
		
		private long Quota_bfield;
		
		private string State_bfield;
		
		private System.Nullable<long> TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Archive mailbox usage
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Archive mailbox usage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentUsage")]
		public System.Nullable<long> CurrentUsage {
			get {
				return this.CurrentUsage_bfield;
			}
			set {
				this.CurrentUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// GUID of archive mailbox
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;GUID of archive mailbox&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("guid")]
		public string Guid {
			get {
				return this.Guid_bfield;
			}
			set {
				this.Guid_bfield = value;
			}
		}
		
		/// <summary>
		/// Archive mailbox maximum size in GB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Archive mailbox maximum size in GB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quota")]
		public long Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// Archive mailbox state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Archive mailbox state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task for this archive mailbox
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task for this archive mailbox&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public System.Nullable<long> TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange Account Diagnosis
	/// </summary>
	public class EmailexchangeexchangeAccountDiagnosis {
		
		private bool CanReceiveEmail_bfield;
		
		private bool CanSendEmail_bfield;
		
		private bool ConnectiveOWA_bfield;
		
		private bool IsLocked_bfield;
		
		private bool IsMxValid_bfield;
		
		private bool IsSpammer_bfield;
		
		private bool IsSrvValid_bfield;
		
		private bool IsSuspended_bfield;
		
		private System.DateTime LastCheck_bfield;
		
		/// <summary>
		/// Determines if ingoing message has been received
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if ingoing message has been received&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canReceiveEmail")]
		public bool CanReceiveEmail {
			get {
				return this.CanReceiveEmail_bfield;
			}
			set {
				this.CanReceiveEmail_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if outgoing message has been delivered
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if outgoing message has been delivered&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canSendEmail")]
		public bool CanSendEmail {
			get {
				return this.CanSendEmail_bfield;
			}
			set {
				this.CanSendEmail_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if possible to authenticate with credentials
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if possible to authenticate with credentials&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("connectiveOWA")]
		public bool ConnectiveOWA {
			get {
				return this.ConnectiveOWA_bfield;
			}
			set {
				this.ConnectiveOWA_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if account is locked
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if account is locked&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isLocked")]
		public bool IsLocked {
			get {
				return this.IsLocked_bfield;
			}
			set {
				this.IsLocked_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if MX record for account's domain is properly set
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if MX record for account's domain is properly set&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isMxValid")]
		public bool IsMxValid {
			get {
				return this.IsMxValid_bfield;
			}
			set {
				this.IsMxValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if account is flagged as spammer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if account is flagged as spammer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isSpammer")]
		public bool IsSpammer {
			get {
				return this.IsSpammer_bfield;
			}
			set {
				this.IsSpammer_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if SRV (autodiscovery) record for account's domain is properly set
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if SRV (autodiscovery) record for account's domain is properly set&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isSrvValid")]
		public bool IsSrvValid {
			get {
				return this.IsSrvValid_bfield;
			}
			set {
				this.IsSrvValid_bfield = value;
			}
		}
		
		/// <summary>
		/// Determines if account is suspended
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Determines if account is suspended&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("isSuspended")]
		public bool IsSuspended {
			get {
				return this.IsSuspended_bfield;
			}
			set {
				this.IsSuspended_bfield = value;
			}
		}
		
		/// <summary>
		/// Last performed diagnostics date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last performed diagnostics date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastCheck")]
		public System.DateTime LastCheck {
			get {
				return this.LastCheck_bfield;
			}
			set {
				this.LastCheck_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Users having full access on this mailbox
	/// </summary>
	public class EmailexchangeexchangeAccountFullAccess {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give full access
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give full access&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get protocol status on that mailbox
	/// </summary>
	public class EmailexchangeexchangeAccountProtocol {
		
		private bool IMAP_bfield;
		
		private bool POP_bfield;
		
		private bool ActiveSync_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private System.Nullable<System.DateTime> LastUpdate_bfield;
		
		private long TaskPendingId_bfield;
		
		private bool WebMail_bfield;
		
		/// <summary>
		/// IMAP protocol enabled on that mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;IMAP protocol enabled on that mailbox&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("IMAP")]
		public bool IMAP {
			get {
				return this.IMAP_bfield;
			}
			set {
				this.IMAP_bfield = value;
			}
		}
		
		/// <summary>
		/// POP protocol enabled on that mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;POP protocol enabled on that mailbox&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("POP")]
		public bool POP {
			get {
				return this.POP_bfield;
			}
			set {
				this.POP_bfield = value;
			}
		}
		
		/// <summary>
		/// Mobile access enabled on that mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Mobile access enabled on that mailbox&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("activeSync")]
		public bool ActiveSync {
			get {
				return this.ActiveSync_bfield;
			}
			set {
				this.ActiveSync_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.Nullable<System.DateTime> LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// Web mail enabled on that mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Web mail enabled on that mailbox&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("webMail")]
		public bool WebMail {
			get {
				return this.WebMail_bfield;
			}
			set {
				this.WebMail_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Users authorized to send mails from this mailbox
	/// </summary>
	public class EmailexchangeexchangeAccountSendAs {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give send as
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give send as&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get users authorized to Send On Behalf To mails from this mailbox
	/// </summary>
	public class EmailexchangeexchangeAccountSendOnBehalfTo {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give send on behalf to
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give send on behalf to&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Mailing list managers
	/// </summary>
	public class EmailexchangeexchangeDistributionGroupManager {
		
		private System.DateTime CreationDate_bfield;
		
		private long ManagerAccountId_bfield;
		
		private string ManagerEmailAddress_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Manager account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Manager account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("managerAccountId")]
		public long ManagerAccountId {
			get {
				return this.ManagerAccountId_bfield;
			}
			set {
				this.ManagerAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Member account primaryEmailAddress
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Member account primaryEmailAddress&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("managerEmailAddress")]
		public string ManagerEmailAddress {
			get {
				return this.ManagerEmailAddress_bfield;
			}
			set {
				this.ManagerEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Mailing list members
	/// </summary>
	public class EmailexchangeexchangeDistributionGroupMember {
		
		private System.DateTime CreationDate_bfield;
		
		private System.Nullable<long> MemberAccountId_bfield;
		
		private System.Nullable<long> MemberContactId_bfield;
		
		private string MemberEmailAddress_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Member account id
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Member account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("memberAccountId")]
		public System.Nullable<long> MemberAccountId {
			get {
				return this.MemberAccountId_bfield;
			}
			set {
				this.MemberAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Member account id
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Member account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("memberContactId")]
		public System.Nullable<long> MemberContactId {
			get {
				return this.MemberContactId_bfield;
			}
			set {
				this.MemberContactId_bfield = value;
			}
		}
		
		/// <summary>
		/// Member account primaryEmailAddress
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Member account primaryEmailAddress&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("memberEmailAddress")]
		public string MemberEmailAddress {
			get {
				return this.MemberEmailAddress_bfield;
			}
			set {
				this.MemberEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get users authorized to Send On Behalf To mails from this mailbox
	/// </summary>
	public class EmailexchangeexchangeDistributionGroupSendAs {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give send on behalf to
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give send on behalf to&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get users authorized to Send On Behalf To mails from this mailing list
	/// </summary>
	public class EmailexchangeexchangeDistributionGroupSendOnBehalfTo {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give send on behalf to
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give send on behalf to&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// External contact for this exchange service
	/// </summary>
	public class EmailexchangeexchangeExternalContact {
		
		private System.DateTime CreationDate_bfield;
		
		private string DisplayName_bfield;
		
		private string ExternalEmailAddress_bfield;
		
		private string FirstName_bfield;
		
		private bool HiddenFromGAL_bfield;
		
		private long Id_bfield;
		
		private string Initials_bfield;
		
		private string LastName_bfield;
		
		private string Organization2010_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact display name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact display name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact email
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact email&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("externalEmailAddress")]
		public string ExternalEmailAddress {
			get {
				return this.ExternalEmailAddress_bfield;
			}
			set {
				this.ExternalEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact first name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact first name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// Hide the contact in Global Address List
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Hide the contact in Global Address List&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hiddenFromGAL")]
		public bool HiddenFromGAL {
			get {
				return this.HiddenFromGAL_bfield;
			}
			set {
				this.HiddenFromGAL_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Contact id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact initals
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact initals&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("initials")]
		public string Initials {
			get {
				return this.Initials_bfield;
			}
			set {
				this.Initials_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact last name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact last name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// If specified, indicates to which organization this external contact belongs (Exchange 2010 only)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;If specified, indicates to which organization this external contact belongs (Exchange 2010 only)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("organization2010")]
		public string Organization2010 {
			get {
				return this.Organization2010_bfield;
			}
			set {
				this.Organization2010_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Contact state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get aliases on this mailingList
	/// </summary>
	public class EmailexchangeexchangeMailingListAlias {
		
		private string Alias_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Alias
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Alias&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("alias")]
		public string Alias {
			get {
				return this.Alias_bfield;
			}
			set {
				this.Alias_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange organization public folder permission
	/// </summary>
	public class EmailexchangeexchangePublicFolderPermission {
		
		private string AccessRights_bfield;
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Access right set for the account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.PublicFolderRightTypeEnum&quot;,&quot;Description&quot;:&quot;Access right set for the account&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accessRights")]
		public string AccessRights {
			get {
				return this.AccessRights_bfield;
			}
			set {
				this.AccessRights_bfield = value;
			}
		}
		
		/// <summary>
		/// Account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Resource accounts delegates
	/// </summary>
	public class EmailexchangeexchangeResourceAccountDelegate {
		
		private long AllowedAccountId_bfield;
		
		private System.Nullable<System.DateTime> CreationDate_bfield;
		
		private string DelegateEmailAddress_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// delegate's account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;delegate's account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.Nullable<System.DateTime> CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Delegate account primaryEmailAddress
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Delegate account primaryEmailAddress&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("delegateEmailAddress")]
		public string DelegateEmailAddress {
			get {
				return this.DelegateEmailAddress_bfield;
			}
			set {
				this.DelegateEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get email addresses subscribed to ActiveSync quarantine notifications
	/// </summary>
	public class EmailexchangeexchangeServiceActiveSyncNotification {
		
		private System.DateTime CreationDate_bfield;
		
		private long NotifiedAccountId_bfield;
		
		private string PrimaryEmailAddress_bfield;
		
		private string State_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Notified Account Id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Notified Account Id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("notifiedAccountId")]
		public long NotifiedAccountId {
			get {
				return this.NotifiedAccountId_bfield;
			}
			set {
				this.NotifiedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Primary email address for notified account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Primary email address for notified account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("primaryEmailAddress")]
		public string PrimaryEmailAddress {
			get {
				return this.PrimaryEmailAddress_bfield;
			}
			set {
				this.PrimaryEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Email state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.activeSyncNotificationStateEnum&quot;,&quot;Description&quot;:&quot;Email state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get authorized IPs for POP, IMAP and webmail
	/// </summary>
	public class EmailexchangeexchangeServiceAuthorizedIp {
		
		private System.DateTime CreationDate_bfield;
		
		private string Ip_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Authorized IP
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ipv4&quot;,&quot;Description&quot;:&quot;Authorized IP&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ip")]
		public string Ip {
			get {
				return this.Ip_bfield;
			}
			set {
				this.Ip_bfield = value;
			}
		}
		
		/// <summary>
		/// Authorized IP status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.authorizedIpStatusEnum&quot;,&quot;Description&quot;:&quot;Authorized IP status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get the list of your ActiveSync devices registered on this Exchange service
	/// </summary>
	public class EmailexchangeexchangeServiceDevice {
		
		private string IMEI_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private string DeviceId_bfield;
		
		private string DeviceModel_bfield;
		
		private string DeviceState_bfield;
		
		private string Guid_bfield;
		
		private string Identity_bfield;
		
		private System.Nullable<System.DateTime> LastUpdate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// International Mobile Equipment Identity
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;International Mobile Equipment Identity&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("IMEI")]
		public string IMEI {
			get {
				return this.IMEI_bfield;
			}
			set {
				this.IMEI_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Device Id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Device Id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("deviceId")]
		public string DeviceId {
			get {
				return this.DeviceId_bfield;
			}
			set {
				this.DeviceId_bfield = value;
			}
		}
		
		/// <summary>
		/// Model device
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Model device&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("deviceModel")]
		public string DeviceModel {
			get {
				return this.DeviceModel_bfield;
			}
			set {
				this.DeviceModel_bfield = value;
			}
		}
		
		/// <summary>
		/// Device State
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.DeviceActiveSyncStateEnum&quot;,&quot;Description&quot;:&quot;Device State&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deviceState")]
		public string DeviceState {
			get {
				return this.DeviceState_bfield;
			}
			set {
				this.DeviceState_bfield = value;
			}
		}
		
		/// <summary>
		/// user guid
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;user guid&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("guid")]
		public string Guid {
			get {
				return this.Guid_bfield;
			}
			set {
				this.Guid_bfield = value;
			}
		}
		
		/// <summary>
		/// Exchange identity
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Exchange identity&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("identity")]
		public string Identity {
			get {
				return this.Identity_bfield;
			}
			set {
				this.Identity_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.Nullable<System.DateTime> LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Protocol access policy for this Exchange service
	/// </summary>
	public class EmailexchangeexchangeServiceProtocol {
		
		private bool IMAP_bfield;
		
		private bool POP_bfield;
		
		private bool ActiveSync_bfield;
		
		private string ActiveSyncPolicy_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private System.Nullable<System.DateTime> LastUpdate_bfield;
		
		private long TaskPendingId_bfield;
		
		private bool WebMail_bfield;
		
		/// <summary>
		/// IMAP protocol enabled on this Exchange service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;IMAP protocol enabled on this Exchange service&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("IMAP")]
		public bool IMAP {
			get {
				return this.IMAP_bfield;
			}
			set {
				this.IMAP_bfield = value;
			}
		}
		
		/// <summary>
		/// POP protocol enabled on this Exchange service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;POP protocol enabled on this Exchange service&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("POP")]
		public bool POP {
			get {
				return this.POP_bfield;
			}
			set {
				this.POP_bfield = value;
			}
		}
		
		/// <summary>
		/// ActiveSync protocol enabled on this Exchange service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;ActiveSync protocol enabled on this Exchange service&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("activeSync")]
		public bool ActiveSync {
			get {
				return this.ActiveSync_bfield;
			}
			set {
				this.ActiveSync_bfield = value;
			}
		}
		
		/// <summary>
		/// ActiveSync policy to apply at device's first connection
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ActiveSyncPolicyEnum&quot;,&quot;Description&quot;:&quot;ActiveSync policy to apply at device's first connection&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("activeSyncPolicy")]
		public string ActiveSyncPolicy {
			get {
				return this.ActiveSyncPolicy_bfield;
			}
			set {
				this.ActiveSyncPolicy_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.Nullable<System.DateTime> LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// Web mail protocol enabled on this Exchange service
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Web mail protocol enabled on this Exchange service&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("webMail")]
		public bool WebMail {
			get {
				return this.WebMail_bfield;
			}
			set {
				this.WebMail_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Users having full access on this shared mailbox
	/// </summary>
	public class EmailexchangeexchangeSharedAccountFullAccess {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give full access
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give full access&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Users authorized to send mails from this shared mailbox
	/// </summary>
	public class EmailexchangeexchangeSharedAccountSendAs {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give send as
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give send as&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Get users authorized to Send On Behalf To mails from this shared mailbox
	/// </summary>
	public class EmailexchangeexchangeSharedAccountSendOnBehalfTo {
		
		private long AllowedAccountId_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Account id to give send on behalf to
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id to give send on behalf to&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("allowedAccountId")]
		public long AllowedAccountId {
			get {
				return this.AllowedAccountId_bfield;
			}
			set {
				this.AllowedAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Mailing list
	/// </summary>
	public class EmailexchangemailingList {
		
		private System.DateTime CreationDate_bfield;
		
		private string DepartRestriction_bfield;
		
		private string DisplayName_bfield;
		
		private bool HiddenFromGAL_bfield;
		
		private string JoinRestriction_bfield;
		
		private System.Nullable<System.DateTime> LastUpdateDate_bfield;
		
		private string MailingListAddress_bfield;
		
		private System.Nullable<long> MaxReceiveSize_bfield;
		
		private System.Nullable<long> MaxSendSize_bfield;
		
		private bool SenderAuthentification_bfield;
		
		private bool SpamDetected_bfield;
		
		private System.Nullable<long> SpamTicketNumber_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Depart restriction policy
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.MailingListDepartRestrictionEnum&quot;,&quot;Description&quot;:&quot;Depart restriction policy&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("departRestriction")]
		public string DepartRestriction {
			get {
				return this.DepartRestriction_bfield;
			}
			set {
				this.DepartRestriction_bfield = value;
			}
		}
		
		/// <summary>
		/// Name displayed in Global Access List
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name displayed in Global Access List&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// If true mailing list is hiddend in Global Address List
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true mailing list is hiddend in Global Address List&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hiddenFromGAL")]
		public bool HiddenFromGAL {
			get {
				return this.HiddenFromGAL_bfield;
			}
			set {
				this.HiddenFromGAL_bfield = value;
			}
		}
		
		/// <summary>
		/// Join restriction policy
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.MailingListJoinRestrictionEnum&quot;,&quot;Description&quot;:&quot;Join restriction policy&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("joinRestriction")]
		public string JoinRestriction {
			get {
				return this.JoinRestriction_bfield;
			}
			set {
				this.JoinRestriction_bfield = value;
			}
		}
		
		/// <summary>
		/// Update date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Update date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.Nullable<System.DateTime> LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// The mailing list address
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The mailing list address&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("mailingListAddress")]
		public string MailingListAddress {
			get {
				return this.MailingListAddress_bfield;
			}
			set {
				this.MailingListAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum receive email size in MB
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum receive email size in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxReceiveSize")]
		public System.Nullable<long> MaxReceiveSize {
			get {
				return this.MaxReceiveSize_bfield;
			}
			set {
				this.MaxReceiveSize_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum send email size in MB
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum send email size in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxSendSize")]
		public System.Nullable<long> MaxSendSize {
			get {
				return this.MaxSendSize_bfield;
			}
			set {
				this.MaxSendSize_bfield = value;
			}
		}
		
		/// <summary>
		/// If true sender has to authenticate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true sender has to authenticate&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("senderAuthentification")]
		public bool SenderAuthentification {
			get {
				return this.SenderAuthentification_bfield;
			}
			set {
				this.SenderAuthentification_bfield = value;
			}
		}
		
		/// <summary>
		/// Account was sending spam
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Account was sending spam&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamDetected")]
		public bool SpamDetected {
			get {
				return this.SpamDetected_bfield;
			}
			set {
				this.SpamDetected_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket number of spam detection
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket number of spam detection&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamTicketNumber")]
		public System.Nullable<long> SpamTicketNumber {
			get {
				return this.SpamTicketNumber_bfield;
			}
			set {
				this.SpamTicketNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Mailing list state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Mailing list state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange organization public folder
	/// </summary>
	public class EmailexchangepublicFolder {
		
		private string AnonymousPermission_bfield;
		
		private System.Nullable<System.DateTime> CreationDate_bfield;
		
		private string DefaultPermission_bfield;
		
		private System.Nullable<bool> HasSubFolders_bfield;
		
		private System.Nullable<long> ItemCount_bfield;
		
		private System.Nullable<System.DateTime> LastAccessTime_bfield;
		
		private System.Nullable<System.DateTime> LastModificationTime_bfield;
		
		private System.Nullable<System.DateTime> LastUserAccessTime_bfield;
		
		private System.Nullable<System.DateTime> LastUserModificationTime_bfield;
		
		private string Path_bfield;
		
		private long Quota_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private System.Nullable<long> TotalItemSize_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// Access right for the guest users
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.PublicFolderRightTypeEnum&quot;,&quot;Description&quot;:&quot;Access right for the guest users&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("anonymousPermission")]
		public string AnonymousPermission {
			get {
				return this.AnonymousPermission_bfield;
			}
			set {
				this.AnonymousPermission_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.Nullable<System.DateTime> CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Default access right
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.PublicFolderRightTypeEnum&quot;,&quot;Description&quot;:&quot;Default access right&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("defaultPermission")]
		public string DefaultPermission {
			get {
				return this.DefaultPermission_bfield;
			}
			set {
				this.DefaultPermission_bfield = value;
			}
		}
		
		/// <summary>
		/// If true, this public folder has subfolders
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If true, this public folder has subfolders&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("hasSubFolders")]
		public System.Nullable<bool> HasSubFolders {
			get {
				return this.HasSubFolders_bfield;
			}
			set {
				this.HasSubFolders_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of items in public folder
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Number of items in public folder&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("itemCount")]
		public System.Nullable<long> ItemCount {
			get {
				return this.ItemCount_bfield;
			}
			set {
				this.ItemCount_bfield = value;
			}
		}
		
		/// <summary>
		/// Time for which public folder was accessed for the last time
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Time for which public folder was accessed for the last time&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastAccessTime")]
		public System.Nullable<System.DateTime> LastAccessTime {
			get {
				return this.LastAccessTime_bfield;
			}
			set {
				this.LastAccessTime_bfield = value;
			}
		}
		
		/// <summary>
		/// Time for which public folder was modified for the last time 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Time for which public folder was modified for the last time &quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastModificationTime")]
		public System.Nullable<System.DateTime> LastModificationTime {
			get {
				return this.LastModificationTime_bfield;
			}
			set {
				this.LastModificationTime_bfield = value;
			}
		}
		
		/// <summary>
		/// Time for which public folder was accessed for the last time by the user
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Time for which public folder was accessed for the last time by the user&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUserAccessTime")]
		public System.Nullable<System.DateTime> LastUserAccessTime {
			get {
				return this.LastUserAccessTime_bfield;
			}
			set {
				this.LastUserAccessTime_bfield = value;
			}
		}
		
		/// <summary>
		/// Time for which public folder was modified for the last time by the user
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Time for which public folder was modified for the last time by the user&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUserModificationTime")]
		public System.Nullable<System.DateTime> LastUserModificationTime {
			get {
				return this.LastUserModificationTime_bfield;
			}
			set {
				this.LastUserModificationTime_bfield = value;
			}
		}
		
		/// <summary>
		/// Path for public folder
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Path for public folder&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("path")]
		public string Path {
			get {
				return this.Path_bfield;
			}
			set {
				this.Path_bfield = value;
			}
		}
		
		/// <summary>
		/// Quota for public folder in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Quota for public folder in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quota")]
		public long Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// Sum of all items in public folder in MB
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Sum of all items in public folder in MB&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("totalItemSize")]
		public System.Nullable<long> TotalItemSize {
			get {
				return this.TotalItemSize_bfield;
			}
			set {
				this.TotalItemSize_bfield = value;
			}
		}
		
		/// <summary>
		/// Type for public folder
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.PublicFolderTypeEnum&quot;,&quot;Description&quot;:&quot;Type for public folder&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange resource account
	/// </summary>
	public class EmailexchangeresourceAccount {
		
		private bool AddOrganizerToSubject_bfield;
		
		private bool AllowConflict_bfield;
		
		private long BookingWindow_bfield;
		
		private long Capacity_bfield;
		
		private System.Nullable<System.DateTime> CreationDate_bfield;
		
		private bool DeleteComments_bfield;
		
		private bool DeleteSubject_bfield;
		
		private string DisplayName_bfield;
		
		private string Location_bfield;
		
		private long MaximumDuration_bfield;
		
		private string ResourceEmailAddress_bfield;
		
		private string ShowMeetingDetails_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private string Type_bfield;
		
		/// <summary>
		/// meeting organizer's name is used as the subject of the meeting request
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;meeting organizer's name is used as the subject of the meeting request&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("addOrganizerToSubject")]
		public bool AddOrganizerToSubject {
			get {
				return this.AddOrganizerToSubject_bfield;
			}
			set {
				this.AddOrganizerToSubject_bfield = value;
			}
		}
		
		/// <summary>
		/// resource can be scheduled by more than one person during the same time period
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;resource can be scheduled by more than one person during the same time period&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("allowConflict")]
		public bool AllowConflict {
			get {
				return this.AllowConflict_bfield;
			}
			set {
				this.AllowConflict_bfield = value;
			}
		}
		
		/// <summary>
		/// maximum number of days in advance that the resource can be reserved
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;maximum number of days in advance that the resource can be reserved&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("bookingWindow")]
		public long BookingWindow {
			get {
				return this.BookingWindow_bfield;
			}
			set {
				this.BookingWindow_bfield = value;
			}
		}
		
		/// <summary>
		/// number of the same equipment or capacity of a room
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of the same equipment or capacity of a room&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("capacity")]
		public long Capacity {
			get {
				return this.Capacity_bfield;
			}
			set {
				this.Capacity_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.Nullable<System.DateTime> CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// remove any text in the message body of incoming meeting requests on resourceAccount
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;remove any text in the message body of incoming meeting requests on resourceAccount&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteComments")]
		public bool DeleteComments {
			get {
				return this.DeleteComments_bfield;
			}
			set {
				this.DeleteComments_bfield = value;
			}
		}
		
		/// <summary>
		/// remove email subject of incoming meeting requests on resourceAccount
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;remove email subject of incoming meeting requests on resourceAccount&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteSubject")]
		public bool DeleteSubject {
			get {
				return this.DeleteSubject_bfield;
			}
			set {
				this.DeleteSubject_bfield = value;
			}
		}
		
		/// <summary>
		/// name of resource
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;name of resource&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// resource location name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;resource location name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("location")]
		public string Location {
			get {
				return this.Location_bfield;
			}
			set {
				this.Location_bfield = value;
			}
		}
		
		/// <summary>
		/// maximum duration in minutes for meeting requests
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;maximum duration in minutes for meeting requests&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maximumDuration")]
		public long MaximumDuration {
			get {
				return this.MaximumDuration_bfield;
			}
			set {
				this.MaximumDuration_bfield = value;
			}
		}
		
		/// <summary>
		/// resource as email
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;resource as email&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("resourceEmailAddress")]
		public string ResourceEmailAddress {
			get {
				return this.ResourceEmailAddress_bfield;
			}
			set {
				this.ResourceEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// granted right on a calendar of that resourceAccount
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ShowMeetingDetailsEnum&quot;,&quot;Description&quot;:&quot;granted right on a calendar of that resourceAccount&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("showMeetingDetails")]
		public string ShowMeetingDetails {
			get {
				return this.ShowMeetingDetails_bfield;
			}
			set {
				this.ShowMeetingDetails_bfield = value;
			}
		}
		
		/// <summary>
		/// account state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;account state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// resource type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ResourceTypeEnum&quot;,&quot;Description&quot;:&quot;resource type&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange shared mailbox
	/// </summary>
	public class EmailexchangesharedAccount {
		
		private System.Nullable<System.DateTime> CreationDate_bfield;
		
		private System.Nullable<long> CurrentUsage_bfield;
		
		private string DisplayName_bfield;
		
		private string FirstName_bfield;
		
		private bool HiddenFromGAL_bfield;
		
		private long Id_bfield;
		
		private string Initials_bfield;
		
		private System.Nullable<System.DateTime> LastLogoffDate_bfield;
		
		private System.Nullable<System.DateTime> LastLogonDate_bfield;
		
		private string LastName_bfield;
		
		private string[] MailingFilter_bfield;
		
		private long Quota_bfield;
		
		private string SharedEmailAddress_bfield;
		
		private bool SpamDetected_bfield;
		
		private System.Nullable<long> SpamTicketNumber_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.Nullable<System.DateTime> CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared mailbox usage
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Shared mailbox usage&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentUsage")]
		public System.Nullable<long> CurrentUsage {
			get {
				return this.CurrentUsage_bfield;
			}
			set {
				this.CurrentUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared account display name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Shared account display name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared account first name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Shared account first name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// Hide shared account in Global Address List
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Hide shared account in Global Address List&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hiddenFromGAL")]
		public bool HiddenFromGAL {
			get {
				return this.HiddenFromGAL_bfield;
			}
			set {
				this.HiddenFromGAL_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Shared account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared account initials
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Shared account initials&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("initials")]
		public string Initials {
			get {
				return this.Initials_bfield;
			}
			set {
				this.Initials_bfield = value;
			}
		}
		
		/// <summary>
		/// Last logoff
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last logoff&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastLogoffDate")]
		public System.Nullable<System.DateTime> LastLogoffDate {
			get {
				return this.LastLogoffDate_bfield;
			}
			set {
				this.LastLogoffDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Last logon
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last logon&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastLogonDate")]
		public System.Nullable<System.DateTime> LastLogonDate {
			get {
				return this.LastLogonDate_bfield;
			}
			set {
				this.LastLogonDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared account last name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Shared account last name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// Enable or disable anti-virus and anti-spam
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;email.exchange.MailingFilterEnum[]&quot;,&quot;Description&quot;:&quot;Enable or disable anti-virus and anti-spam&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("mailingFilter")]
		public string[] MailingFilter {
			get {
				return this.MailingFilter_bfield;
			}
			set {
				this.MailingFilter_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared account maximum size
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Shared account maximum size&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quota")]
		public long Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// Default email for this shared mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Default email for this shared mailbox&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("sharedEmailAddress")]
		public string SharedEmailAddress {
			get {
				return this.SharedEmailAddress_bfield;
			}
			set {
				this.SharedEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Account was sending spam
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Account was sending spam&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamDetected")]
		public bool SpamDetected {
			get {
				return this.SpamDetected_bfield;
			}
			set {
				this.SpamDetected_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket number of spam detection
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket number of spam detection&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamTicketNumber")]
		public System.Nullable<long> SpamTicketNumber {
			get {
				return this.SpamTicketNumber_bfield;
			}
			set {
				this.SpamTicketNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared account state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;email.exchange.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Shared account state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task for this shared account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task for this shared account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Spam and Antyvirus configuration
	/// </summary>
	public class EmailexchangespamAndVirusConfiguration {
		
		private bool CheckDKIM_bfield;
		
		private bool CheckSPF_bfield;
		
		private bool DeleteSpam_bfield;
		
		private bool DeleteVirus_bfield;
		
		private bool PutInJunk_bfield;
		
		private bool TagSpam_bfield;
		
		private bool TagVirus_bfield;
		
		/// <summary>
		/// Check DKIM of message
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Check DKIM of message&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkDKIM")]
		public bool CheckDKIM {
			get {
				return this.CheckDKIM_bfield;
			}
			set {
				this.CheckDKIM_bfield = value;
			}
		}
		
		/// <summary>
		/// Check SPF of message
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Check SPF of message&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkSPF")]
		public bool CheckSPF {
			get {
				return this.CheckSPF_bfield;
			}
			set {
				this.CheckSPF_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam delete it
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam delete it&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteSpam")]
		public bool DeleteSpam {
			get {
				return this.DeleteSpam_bfield;
			}
			set {
				this.DeleteSpam_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a virus delete it
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a virus delete it&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteVirus")]
		public bool DeleteVirus {
			get {
				return this.DeleteVirus_bfield;
			}
			set {
				this.DeleteVirus_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("putInJunk")]
		public bool PutInJunk {
			get {
				return this.PutInJunk_bfield;
			}
			set {
				this.PutInJunk_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam change its subject
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam change its subject&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("tagSpam")]
		public bool TagSpam {
			get {
				return this.TagSpam_bfield;
			}
			set {
				this.TagSpam_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a virus change its subject
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a virus change its subject&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("tagVirus")]
		public bool TagVirus {
			get {
				return this.TagVirus_bfield;
			}
			set {
				this.TagVirus_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
