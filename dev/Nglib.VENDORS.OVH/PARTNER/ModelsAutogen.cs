//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/partner"  partner2.Partner--
//[POST] "/partner"  void--
namespace Nglib.VENDORS.OVH.PARTNER {
	
	
	/// <summary>
	/// Countries a nichandle can choose
	/// </summary>
	public enum NichandleCountryEnum {
		
		[EnumMember(Value="AC")]
		AC,
		
		[EnumMember(Value="AD")]
		AD,
		
		[EnumMember(Value="AE")]
		AE,
		
		[EnumMember(Value="AF")]
		AF,
		
		[EnumMember(Value="AG")]
		AG,
		
		[EnumMember(Value="AI")]
		AI,
		
		[EnumMember(Value="AL")]
		AL,
		
		[EnumMember(Value="AM")]
		AM,
		
		[EnumMember(Value="AO")]
		AO,
		
		[EnumMember(Value="AQ")]
		AQ,
		
		[EnumMember(Value="AR")]
		AR,
		
		[EnumMember(Value="AS")]
		AS,
		
		[EnumMember(Value="AT")]
		AT,
		
		[EnumMember(Value="AU")]
		AU,
		
		[EnumMember(Value="AW")]
		AW,
		
		[EnumMember(Value="AX")]
		AX,
		
		[EnumMember(Value="AZ")]
		AZ,
		
		[EnumMember(Value="BA")]
		BA,
		
		[EnumMember(Value="BB")]
		BB,
		
		[EnumMember(Value="BD")]
		BD,
		
		[EnumMember(Value="BE")]
		BE,
		
		[EnumMember(Value="BF")]
		BF,
		
		[EnumMember(Value="BG")]
		BG,
		
		[EnumMember(Value="BH")]
		BH,
		
		[EnumMember(Value="BI")]
		BI,
		
		[EnumMember(Value="BJ")]
		BJ,
		
		[EnumMember(Value="BL")]
		BL,
		
		[EnumMember(Value="BM")]
		BM,
		
		[EnumMember(Value="BN")]
		BN,
		
		[EnumMember(Value="BO")]
		BO,
		
		[EnumMember(Value="BQ")]
		BQ,
		
		[EnumMember(Value="BR")]
		BR,
		
		[EnumMember(Value="BS")]
		BS,
		
		[EnumMember(Value="BT")]
		BT,
		
		[EnumMember(Value="BW")]
		BW,
		
		[EnumMember(Value="BY")]
		BY,
		
		[EnumMember(Value="BZ")]
		BZ,
		
		[EnumMember(Value="CA")]
		CA,
		
		[EnumMember(Value="CC")]
		CC,
		
		[EnumMember(Value="CD")]
		CD,
		
		[EnumMember(Value="CF")]
		CF,
		
		[EnumMember(Value="CG")]
		CG,
		
		[EnumMember(Value="CH")]
		CH,
		
		[EnumMember(Value="CI")]
		CI,
		
		[EnumMember(Value="CK")]
		CK,
		
		[EnumMember(Value="CL")]
		CL,
		
		[EnumMember(Value="CM")]
		CM,
		
		[EnumMember(Value="CN")]
		CN,
		
		[EnumMember(Value="CO")]
		CO,
		
		[EnumMember(Value="CR")]
		CR,
		
		[EnumMember(Value="CU")]
		CU,
		
		[EnumMember(Value="CV")]
		CV,
		
		[EnumMember(Value="CW")]
		CW,
		
		[EnumMember(Value="CX")]
		CX,
		
		[EnumMember(Value="CY")]
		CY,
		
		[EnumMember(Value="CZ")]
		CZ,
		
		[EnumMember(Value="DE")]
		DE,
		
		[EnumMember(Value="DG")]
		DG,
		
		[EnumMember(Value="DJ")]
		DJ,
		
		[EnumMember(Value="DK")]
		DK,
		
		[EnumMember(Value="DM")]
		DM,
		
		[EnumMember(Value="DO")]
		DO,
		
		[EnumMember(Value="DZ")]
		DZ,
		
		[EnumMember(Value="EA")]
		EA,
		
		[EnumMember(Value="EC")]
		EC,
		
		[EnumMember(Value="EE")]
		EE,
		
		[EnumMember(Value="EG")]
		EG,
		
		[EnumMember(Value="EH")]
		EH,
		
		[EnumMember(Value="ER")]
		ER,
		
		[EnumMember(Value="ES")]
		ES,
		
		[EnumMember(Value="ET")]
		ET,
		
		[EnumMember(Value="FI")]
		FI,
		
		[EnumMember(Value="FJ")]
		FJ,
		
		[EnumMember(Value="FK")]
		FK,
		
		[EnumMember(Value="FM")]
		FM,
		
		[EnumMember(Value="FO")]
		FO,
		
		[EnumMember(Value="FR")]
		FR,
		
		[EnumMember(Value="GA")]
		GA,
		
		[EnumMember(Value="GB")]
		GB,
		
		[EnumMember(Value="GD")]
		GD,
		
		[EnumMember(Value="GE")]
		GE,
		
		[EnumMember(Value="GF")]
		GF,
		
		[EnumMember(Value="GG")]
		GG,
		
		[EnumMember(Value="GH")]
		GH,
		
		[EnumMember(Value="GI")]
		GI,
		
		[EnumMember(Value="GL")]
		GL,
		
		[EnumMember(Value="GM")]
		GM,
		
		[EnumMember(Value="GN")]
		GN,
		
		[EnumMember(Value="GP")]
		GP,
		
		[EnumMember(Value="GQ")]
		GQ,
		
		[EnumMember(Value="GR")]
		GR,
		
		[EnumMember(Value="GS")]
		GS,
		
		[EnumMember(Value="GT")]
		GT,
		
		[EnumMember(Value="GU")]
		GU,
		
		[EnumMember(Value="GW")]
		GW,
		
		[EnumMember(Value="GY")]
		GY,
		
		[EnumMember(Value="HK")]
		HK,
		
		[EnumMember(Value="HN")]
		HN,
		
		[EnumMember(Value="HR")]
		HR,
		
		[EnumMember(Value="HT")]
		HT,
		
		[EnumMember(Value="HU")]
		HU,
		
		[EnumMember(Value="IC")]
		IC,
		
		[EnumMember(Value="ID")]
		ID,
		
		[EnumMember(Value="IE")]
		IE,
		
		[EnumMember(Value="IL")]
		IL,
		
		[EnumMember(Value="IM")]
		IM,
		
		[EnumMember(Value="IN")]
		IN,
		
		[EnumMember(Value="IO")]
		IO,
		
		[EnumMember(Value="IQ")]
		IQ,
		
		[EnumMember(Value="IR")]
		IR,
		
		[EnumMember(Value="IS")]
		IS,
		
		[EnumMember(Value="IT")]
		IT,
		
		[EnumMember(Value="JE")]
		JE,
		
		[EnumMember(Value="JM")]
		JM,
		
		[EnumMember(Value="JO")]
		JO,
		
		[EnumMember(Value="JP")]
		JP,
		
		[EnumMember(Value="KE")]
		KE,
		
		[EnumMember(Value="KG")]
		KG,
		
		[EnumMember(Value="KH")]
		KH,
		
		[EnumMember(Value="KI")]
		KI,
		
		[EnumMember(Value="KM")]
		KM,
		
		[EnumMember(Value="KN")]
		KN,
		
		[EnumMember(Value="KP")]
		KP,
		
		[EnumMember(Value="KR")]
		KR,
		
		[EnumMember(Value="KW")]
		KW,
		
		[EnumMember(Value="KY")]
		KY,
		
		[EnumMember(Value="KZ")]
		KZ,
		
		[EnumMember(Value="LA")]
		LA,
		
		[EnumMember(Value="LB")]
		LB,
		
		[EnumMember(Value="LC")]
		LC,
		
		[EnumMember(Value="LI")]
		LI,
		
		[EnumMember(Value="LK")]
		LK,
		
		[EnumMember(Value="LR")]
		LR,
		
		[EnumMember(Value="LS")]
		LS,
		
		[EnumMember(Value="LT")]
		LT,
		
		[EnumMember(Value="LU")]
		LU,
		
		[EnumMember(Value="LV")]
		LV,
		
		[EnumMember(Value="LY")]
		LY,
		
		[EnumMember(Value="MA")]
		MA,
		
		[EnumMember(Value="MC")]
		MC,
		
		[EnumMember(Value="MD")]
		MD,
		
		[EnumMember(Value="ME")]
		ME,
		
		[EnumMember(Value="MF")]
		MF,
		
		[EnumMember(Value="MG")]
		MG,
		
		[EnumMember(Value="MH")]
		MH,
		
		[EnumMember(Value="MK")]
		MK,
		
		[EnumMember(Value="ML")]
		ML,
		
		[EnumMember(Value="MM")]
		MM,
		
		[EnumMember(Value="MN")]
		MN,
		
		[EnumMember(Value="MO")]
		MO,
		
		[EnumMember(Value="MP")]
		MP,
		
		[EnumMember(Value="MQ")]
		MQ,
		
		[EnumMember(Value="MR")]
		MR,
		
		[EnumMember(Value="MS")]
		MS,
		
		[EnumMember(Value="MT")]
		MT,
		
		[EnumMember(Value="MU")]
		MU,
		
		[EnumMember(Value="MV")]
		MV,
		
		[EnumMember(Value="MW")]
		MW,
		
		[EnumMember(Value="MX")]
		MX,
		
		[EnumMember(Value="MY")]
		MY,
		
		[EnumMember(Value="MZ")]
		MZ,
		
		[EnumMember(Value="NA")]
		NA,
		
		[EnumMember(Value="NC")]
		NC,
		
		[EnumMember(Value="NE")]
		NE,
		
		[EnumMember(Value="NF")]
		NF,
		
		[EnumMember(Value="NG")]
		NG,
		
		[EnumMember(Value="NI")]
		NI,
		
		[EnumMember(Value="NL")]
		NL,
		
		[EnumMember(Value="NO")]
		NO,
		
		[EnumMember(Value="NP")]
		NP,
		
		[EnumMember(Value="NR")]
		NR,
		
		[EnumMember(Value="NU")]
		NU,
		
		[EnumMember(Value="NZ")]
		NZ,
		
		[EnumMember(Value="OM")]
		OM,
		
		[EnumMember(Value="PA")]
		PA,
		
		[EnumMember(Value="PE")]
		PE,
		
		[EnumMember(Value="PF")]
		PF,
		
		[EnumMember(Value="PG")]
		PG,
		
		[EnumMember(Value="PH")]
		PH,
		
		[EnumMember(Value="PK")]
		PK,
		
		[EnumMember(Value="PL")]
		PL,
		
		[EnumMember(Value="PM")]
		PM,
		
		[EnumMember(Value="PN")]
		PN,
		
		[EnumMember(Value="PR")]
		PR,
		
		[EnumMember(Value="PS")]
		PS,
		
		[EnumMember(Value="PT")]
		PT,
		
		[EnumMember(Value="PW")]
		PW,
		
		[EnumMember(Value="PY")]
		PY,
		
		[EnumMember(Value="QA")]
		QA,
		
		[EnumMember(Value="RE")]
		RE,
		
		[EnumMember(Value="RO")]
		RO,
		
		[EnumMember(Value="RS")]
		RS,
		
		[EnumMember(Value="RU")]
		RU,
		
		[EnumMember(Value="RW")]
		RW,
		
		[EnumMember(Value="SA")]
		SA,
		
		[EnumMember(Value="SB")]
		SB,
		
		[EnumMember(Value="SC")]
		SC,
		
		[EnumMember(Value="SD")]
		SD,
		
		[EnumMember(Value="SE")]
		SE,
		
		[EnumMember(Value="SG")]
		SG,
		
		[EnumMember(Value="SH")]
		SH,
		
		[EnumMember(Value="SI")]
		SI,
		
		[EnumMember(Value="SJ")]
		SJ,
		
		[EnumMember(Value="SK")]
		SK,
		
		[EnumMember(Value="SL")]
		SL,
		
		[EnumMember(Value="SM")]
		SM,
		
		[EnumMember(Value="SN")]
		SN,
		
		[EnumMember(Value="SO")]
		SO,
		
		[EnumMember(Value="SR")]
		SR,
		
		[EnumMember(Value="SS")]
		SS,
		
		[EnumMember(Value="ST")]
		ST,
		
		[EnumMember(Value="SV")]
		SV,
		
		[EnumMember(Value="SX")]
		SX,
		
		[EnumMember(Value="SY")]
		SY,
		
		[EnumMember(Value="SZ")]
		SZ,
		
		[EnumMember(Value="TA")]
		TA,
		
		[EnumMember(Value="TC")]
		TC,
		
		[EnumMember(Value="TD")]
		TD,
		
		[EnumMember(Value="TF")]
		TF,
		
		[EnumMember(Value="TG")]
		TG,
		
		[EnumMember(Value="TH")]
		TH,
		
		[EnumMember(Value="TJ")]
		TJ,
		
		[EnumMember(Value="TK")]
		TK,
		
		[EnumMember(Value="TL")]
		TL,
		
		[EnumMember(Value="TM")]
		TM,
		
		[EnumMember(Value="TN")]
		TN,
		
		[EnumMember(Value="TO")]
		TO,
		
		[EnumMember(Value="TR")]
		TR,
		
		[EnumMember(Value="TT")]
		TT,
		
		[EnumMember(Value="TV")]
		TV,
		
		[EnumMember(Value="TW")]
		TW,
		
		[EnumMember(Value="TZ")]
		TZ,
		
		[EnumMember(Value="UA")]
		UA,
		
		[EnumMember(Value="UG")]
		UG,
		
		[EnumMember(Value="UM")]
		UM,
		
		[EnumMember(Value="UNKNOWN")]
		UNKNOWN,
		
		[EnumMember(Value="US")]
		US,
		
		[EnumMember(Value="UY")]
		UY,
		
		[EnumMember(Value="UZ")]
		UZ,
		
		[EnumMember(Value="VA")]
		VA,
		
		[EnumMember(Value="VC")]
		VC,
		
		[EnumMember(Value="VE")]
		VE,
		
		[EnumMember(Value="VG")]
		VG,
		
		[EnumMember(Value="VI")]
		VI,
		
		[EnumMember(Value="VN")]
		VN,
		
		[EnumMember(Value="VU")]
		VU,
		
		[EnumMember(Value="WF")]
		WF,
		
		[EnumMember(Value="WS")]
		WS,
		
		[EnumMember(Value="XK")]
		XK,
		
		[EnumMember(Value="YE")]
		YE,
		
		[EnumMember(Value="YT")]
		YT,
		
		[EnumMember(Value="ZA")]
		ZA,
		
		[EnumMember(Value="ZM")]
		ZM,
		
		[EnumMember(Value="ZW")]
		ZW,
	}
	
	/// <summary>
	/// Acceptance status
	/// </summary>
	public enum Partner2AcceptanceStatusEnum {
		
		[EnumMember(Value="Open")]
		Open,
		
		[EnumMember(Value="Rejected")]
		Rejected,
		
		[EnumMember(Value="RegisteredQualified")]
		RegisteredQualified,
		
		[EnumMember(Value="AdvancedQualified")]
		AdvancedQualified,
		
		[EnumMember(Value="Registered")]
		Registered,
		
		[EnumMember(Value="Advanced")]
		Advanced,
		
		[EnumMember(Value="AdvancedHandOperated")]
		AdvancedHandOperated,
	}
	
	/// <summary>
	/// Area of expertise
	/// </summary>
	public enum Partner2AreaOfExpertiseEnum {
		
		[EnumMember(Value="HPC")]
		HPC,
		
		[EnumMember(Value="DC")]
		DC,
		
		[EnumMember(Value="PC")]
		PC,
		
		[EnumMember(Value="Orchestration")]
		Orchestration,
		
		[EnumMember(Value="BigData")]
		BigData,
		
		[EnumMember(Value="VPS")]
		VPS,
		
		[EnumMember(Value="SecurityCertif")]
		SecurityCertif,
		
		[EnumMember(Value="DomainName")]
		DomainName,
		
		[EnumMember(Value="EmailMsSolution")]
		EmailMsSolution,
		
		[EnumMember(Value="WH")]
		WH,
		
		[EnumMember(Value="Connectivity")]
		Connectivity,
		
		[EnumMember(Value="VoIP")]
		VoIP,
	}
	
	/// <summary>
	/// Job positions
	/// </summary>
	public enum Partner2PositionEnum {
		
		[EnumMember(Value="ITSysAdmin")]
		ITSysAdmin,
		
		[EnumMember(Value="ITDevops")]
		ITDevops,
		
		[EnumMember(Value="ITOther")]
		ITOther,
		
		[EnumMember(Value="Marketing")]
		Marketing,
		
		[EnumMember(Value="Sales")]
		Sales,
		
		[EnumMember(Value="Purchasing")]
		Purchasing,
		
		[EnumMember(Value="RD")]
		RD,
		
		[EnumMember(Value="AF")]
		AF,
		
		[EnumMember(Value="HR")]
		HR,
		
		[EnumMember(Value="Production")]
		Production,
		
		[EnumMember(Value="LC")]
		LC,
		
		[EnumMember(Value="Other")]
		Other,
	}
	
	/// <summary>
	/// employeesNumber
	/// </summary>
	public enum Partner2employeesNumberEnum {
		
		[EnumMember(Value="1Or2")]
		_1Or2,
		
		[EnumMember(Value="3To5")]
		_3To5,
		
		[EnumMember(Value="6To9")]
		_6To9,
		
		[EnumMember(Value="10To19")]
		_10To19,
		
		[EnumMember(Value="20To49")]
		_20To49,
		
		[EnumMember(Value="50To99")]
		_50To99,
		
		[EnumMember(Value="100To199")]
		_100To199,
		
		[EnumMember(Value="200To249")]
		_200To249,
		
		[EnumMember(Value="250To499")]
		_250To499,
		
		[EnumMember(Value="500to999")]
		_500to999,
		
		[EnumMember(Value="1000to1999")]
		_1000to1999,
		
		[EnumMember(Value="2000to4999")]
		_2000to4999,
		
		[EnumMember(Value="5000to9999")]
		_5000to9999,
		
		[EnumMember(Value="over10000")]
		Over10000,
	}
	
	/// <summary>
	/// partner type
	/// </summary>
	public enum Partner2partnerTypeEnum {
		
		[EnumMember(Value="valueAddedReseller")]
		ValueAddedReseller,
		
		[EnumMember(Value="systemsIntegrator")]
		SystemsIntegrator,
		
		[EnumMember(Value="iaasProvider")]
		IaasProvider,
		
		[EnumMember(Value="managedServiceProvider")]
		ManagedServiceProvider,
		
		[EnumMember(Value="softwareEditor")]
		SoftwareEditor,
		
		[EnumMember(Value="consultingCompany")]
		ConsultingCompany,
		
		[EnumMember(Value="trainingCompany")]
		TrainingCompany,
		
		[EnumMember(Value="webAgency")]
		WebAgency,
		
		[EnumMember(Value="telecomOperators")]
		TelecomOperators,
		
		[EnumMember(Value="other")]
		Other,
	}
	
	/// <summary>
	/// Account Entity
	/// </summary>
	public class Partner2Account {
		
		private string City_bfield;
		
		private System.Nullable<double> CompanyTurnover_bfield;
		
		private string Country_bfield;
		
		private string Name_bfield;
		
		private string NumberOfEmployees_bfield;
		
		private string PartnerType_bfield;
		
		private string YearEstablished_bfield;
		
		/// <summary>
		/// DEPRECATED - Account City
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;DEPRECATED - Account City&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("city")]
		public string City {
			get {
				return this.City_bfield;
			}
			set {
				this.City_bfield = value;
			}
		}
		
		/// <summary>
		/// Company turnover (in euros)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;double&quot;,&quot;Description&quot;:&quot;Company turnover (in euros)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("companyTurnover")]
		public System.Nullable<double> CompanyTurnover {
			get {
				return this.CompanyTurnover_bfield;
			}
			set {
				this.CompanyTurnover_bfield = value;
			}
		}
		
		/// <summary>
		/// DEPRECATED - Account Country
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;nichandle.CountryEnum&quot;,&quot;Description&quot;:&quot;DEPRECATED - Account Country&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("country")]
		public string Country {
			get {
				return this.Country_bfield;
			}
			set {
				this.Country_bfield = value;
			}
		}
		
		/// <summary>
		/// Account Name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account Name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Number of employees
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;partner2.employeesNumberEnum&quot;,&quot;Description&quot;:&quot;Number of employees&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("numberOfEmployees")]
		public string NumberOfEmployees {
			get {
				return this.NumberOfEmployees_bfield;
			}
			set {
				this.NumberOfEmployees_bfield = value;
			}
		}
		
		/// <summary>
		/// Partner Type
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;partner2.partnerTypeEnum&quot;,&quot;Description&quot;:&quot;Partner Type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("partnerType")]
		public string PartnerType {
			get {
				return this.PartnerType_bfield;
			}
			set {
				this.PartnerType_bfield = value;
			}
		}
		
		/// <summary>
		/// In what year was your company established?
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:&quot;In what year was your company established?&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("yearEstablished")]
		public string YearEstablished {
			get {
				return this.YearEstablished_bfield;
			}
			set {
				this.YearEstablished_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Contact Entity
	/// </summary>
	public class Partner2Contact {
		
		private string Email_bfield;
		
		private string FirstName_bfield;
		
		private string JobTitle_bfield;
		
		private string LastName_bfield;
		
		private string Phone_bfield;
		
		private string Position_bfield;
		
		/// <summary>
		/// Contact Email
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact Email&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("email")]
		public string Email {
			get {
				return this.Email_bfield;
			}
			set {
				this.Email_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact First Name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact First Name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact Job Title
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact Job Title&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("jobTitle")]
		public string JobTitle {
			get {
				return this.JobTitle_bfield;
			}
			set {
				this.JobTitle_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact Last Name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact Last Name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact Phone
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Contact Phone&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("phone")]
		public string Phone {
			get {
				return this.Phone_bfield;
			}
			set {
				this.Phone_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact Position
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;partner2.PositionEnum&quot;,&quot;Description&quot;:&quot;Contact Position&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("position")]
		public string Position {
			get {
				return this.Position_bfield;
			}
			set {
				this.Position_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Partner Entity
	/// </summary>
	public class Partner2Partner {
		
		private string AcceptanceStatus_bfield;
		
		private Partner2Account Account_bfield;
		
		private string[] AreaOfExpertise_bfield;
		
		private Partner2Contact Contact_bfield;
		
		private string PartnersProgramReason_bfield;
		
		private Partner2PartnerShip Partnership_bfield;
		
		private System.Nullable<double> SalesProjection_bfield;
		
		/// <summary>
		/// Acceptance Status
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;partner2.AcceptanceStatusEnum&quot;,&quot;Description&quot;:&quot;Acceptance Status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("acceptanceStatus")]
		public string AcceptanceStatus {
			get {
				return this.AcceptanceStatus_bfield;
			}
			set {
				this.AcceptanceStatus_bfield = value;
			}
		}
		
		/// <summary>
		/// Account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;partner2.Account&quot;,&quot;Description&quot;:&quot;Account&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("account")]
		public Partner2Account Account {
			get {
				return this.Account_bfield;
			}
			set {
				this.Account_bfield = value;
			}
		}
		
		/// <summary>
		/// DEPRECATED - Area of Expertise
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;partner2.AreaOfExpertiseEnum[]&quot;,&quot;Description&quot;:&quot;DEPRECATED - Area of Expertise&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("areaOfExpertise")]
		public string[] AreaOfExpertise {
			get {
				return this.AreaOfExpertise_bfield;
			}
			set {
				this.AreaOfExpertise_bfield = value;
			}
		}
		
		/// <summary>
		/// Contact
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;partner2.Contact&quot;,&quot;Description&quot;:&quot;Contact&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("contact")]
		public Partner2Contact Contact {
			get {
				return this.Contact_bfield;
			}
			set {
				this.Contact_bfield = value;
			}
		}
		
		/// <summary>
		/// DEPRECATED - Why you want to take part in OVH's Partners Program
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;DEPRECATED - Why you want to take part in OVH's Partners Program&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("partnersProgramReason")]
		public string PartnersProgramReason {
			get {
				return this.PartnersProgramReason_bfield;
			}
			set {
				this.PartnersProgramReason_bfield = value;
			}
		}
		
		/// <summary>
		///  How the PartnerShip will Growth
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;partner2.PartnerShip&quot;,&quot;Description&quot;:&quot; How the PartnerShip will Growth&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("partnership")]
		public Partner2PartnerShip Partnership {
			get {
				return this.Partnership_bfield;
			}
			set {
				this.Partnership_bfield = value;
			}
		}
		
		/// <summary>
		/// DEPRECATED - Sales Projection (in euros) 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;double&quot;,&quot;Description&quot;:&quot;DEPRECATED - Sales Projection (in euros) &quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("salesProjection")]
		public System.Nullable<double> SalesProjection {
			get {
				return this.SalesProjection_bfield;
			}
			set {
				this.SalesProjection_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Partner ship evolution
	/// </summary>
	public class Partner2PartnerShip {
		
		private string[] AreaOfExpertise_bfield;
		
		private bool EmailCommunication_bfield;
		
		private string PartnersProgramReason_bfield;
		
		private string SalesGrowthOpportunities_bfield;
		
		private double SalesProjection_bfield;
		
		private bool SupportAgreementStatement_bfield;
		
		/// <summary>
		/// Area of Expertise
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;partner2.AreaOfExpertiseEnum[]&quot;,&quot;Description&quot;:&quot;Area of Expertise&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("areaOfExpertise")]
		public string[] AreaOfExpertise {
			get {
				return this.AreaOfExpertise_bfield;
			}
			set {
				this.AreaOfExpertise_bfield = value;
			}
		}
		
		/// <summary>
		/// GDPR - email/communication opt in
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;GDPR - email/communication opt in&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("emailCommunication")]
		public bool EmailCommunication {
			get {
				return this.EmailCommunication_bfield;
			}
			set {
				this.EmailCommunication_bfield = value;
			}
		}
		
		/// <summary>
		/// Why you want to take part in OVH's Partners Program
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;Why you want to take part in OVH's Partners Program&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("partnersProgramReason")]
		public string PartnersProgramReason {
			get {
				return this.PartnersProgramReason_bfield;
			}
			set {
				this.PartnersProgramReason_bfield = value;
			}
		}
		
		/// <summary>
		/// OVHcloud sales growth opportunities
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;OVHcloud sales growth opportunities&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("salesGrowthOpportunities")]
		public string SalesGrowthOpportunities {
			get {
				return this.SalesGrowthOpportunities_bfield;
			}
			set {
				this.SalesGrowthOpportunities_bfield = value;
			}
		}
		
		/// <summary>
		/// Sales projection (in euros)
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;double&quot;,&quot;Description&quot;:&quot;Sales projection (in euros)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("salesProjection")]
		public double SalesProjection {
			get {
				return this.SalesProjection_bfield;
			}
			set {
				this.SalesProjection_bfield = value;
			}
		}
		
		/// <summary>
		/// Support agreement statement
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Support agreement statement&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("supportAgreementStatement")]
		public bool SupportAgreementStatement {
			get {
				return this.SupportAgreementStatement_bfield;
			}
			set {
				this.SupportAgreementStatement_bfield = value;
			}
		}
	}
}
