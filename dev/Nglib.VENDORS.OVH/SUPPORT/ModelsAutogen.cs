//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/support/tickets"  long[]--archived,category,maxCreationDate,minCreationDate,product,serviceName,status,subject,ticketNumber
//[POST] "/support/tickets/create"  support.NewMessageInfo--body,category,product,serviceName,subcategory,subject,type
//[GET] "/support/tickets/{ticketId}"  support.Ticket--ticketId
//[GET] "/support/tickets/{ticketId}/canBeScored"  boolean--ticketId
//[POST] "/support/tickets/{ticketId}/close"  void--ticketId
//[GET] "/support/tickets/{ticketId}/messages"  support.Message[]--ticketId
//[POST] "/support/tickets/{ticketId}/reopen"  void--body,ticketId
//[POST] "/support/tickets/{ticketId}/reply"  void--body,ticketId
//[POST] "/support/tickets/{ticketId}/score"  void--score,scoreComment,ticketId
namespace Nglib.VENDORS.OVH.SUPPORT {
	
	
	/// <summary>
	/// Message sender type
	/// </summary>
	public enum SupportMessageSenderEnum {
		
		[EnumMember(Value="customer")]
		Customer,
		
		[EnumMember(Value="support")]
		Support,
	}
	
	/// <summary>
	/// Ticket request category
	/// </summary>
	public enum SupportTicketCategoryEnum {
		
		[EnumMember(Value="assistance")]
		Assistance,
		
		[EnumMember(Value="billing")]
		Billing,
		
		[EnumMember(Value="incident")]
		Incident,
	}
	
	/// <summary>
	/// Ticket product
	/// </summary>
	public enum SupportTicketProductEnum {
		
		[EnumMember(Value="adsl")]
		Adsl,
		
		[EnumMember(Value="cdn")]
		Cdn,
		
		[EnumMember(Value="dedicated")]
		Dedicated,
		
		[EnumMember(Value="dedicated-billing")]
		Dedicated_billing,
		
		[EnumMember(Value="dedicated-other")]
		Dedicated_other,
		
		[EnumMember(Value="dedicatedcloud")]
		Dedicatedcloud,
		
		[EnumMember(Value="domain")]
		Domain,
		
		[EnumMember(Value="exchange")]
		Exchange,
		
		[EnumMember(Value="fax")]
		Fax,
		
		[EnumMember(Value="hosting")]
		Hosting,
		
		[EnumMember(Value="housing")]
		Housing,
		
		[EnumMember(Value="iaas")]
		Iaas,
		
		[EnumMember(Value="mail")]
		Mail,
		
		[EnumMember(Value="network")]
		Network,
		
		[EnumMember(Value="publiccloud")]
		Publiccloud,
		
		[EnumMember(Value="sms")]
		Sms,
		
		[EnumMember(Value="ssl")]
		Ssl,
		
		[EnumMember(Value="storage")]
		Storage,
		
		[EnumMember(Value="telecom-billing")]
		Telecom_billing,
		
		[EnumMember(Value="telecom-other")]
		Telecom_other,
		
		[EnumMember(Value="vac")]
		Vac,
		
		[EnumMember(Value="voip")]
		Voip,
		
		[EnumMember(Value="vps")]
		Vps,
		
		[EnumMember(Value="web-billing")]
		Web_billing,
		
		[EnumMember(Value="web-other")]
		Web_other,
	}
	
	/// <summary>
	/// Support ticket statuses
	/// </summary>
	public enum SupportTicketStatusEnum {
		
		[EnumMember(Value="closed")]
		Closed,
		
		[EnumMember(Value="open")]
		Open,
		
		[EnumMember(Value="unknown")]
		Unknown,
	}
	
	/// <summary>
	/// Ticket request subcategory
	/// </summary>
	public enum SupportTicketSubCategoryEnum {
		
		[EnumMember(Value="alerts")]
		Alerts,
		
		[EnumMember(Value="autorenew")]
		Autorenew,
		
		[EnumMember(Value="bill")]
		Bill,
		
		[EnumMember(Value="down")]
		Down,
		
		[EnumMember(Value="inProgress")]
		InProgress,
		
		[EnumMember(Value="new")]
		New,
		
		[EnumMember(Value="other")]
		Other,
		
		[EnumMember(Value="perfs")]
		Perfs,
		
		[EnumMember(Value="start")]
		Start,
		
		[EnumMember(Value="usage")]
		Usage,
	}
	
	/// <summary>
	/// Ticket type (criticalIntervention requires VIP support level)
	/// </summary>
	public enum SupportTicketTypeEnum {
		
		[EnumMember(Value="criticalIntervention")]
		CriticalIntervention,
		
		[EnumMember(Value="genericRequest")]
		GenericRequest,
	}
	
	/// <summary>
	/// Support ticket message
	/// </summary>
	public class SupportMessage {
		
		private string Body_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private string From_bfield;
		
		private long MessageId_bfield;
		
		private long TicketId_bfield;
		
		private System.DateTime UpdateDate_bfield;
		
		/// <summary>
		/// Message body
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;Message body&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("body")]
		public string Body {
			get {
				return this.Body_bfield;
			}
			set {
				this.Body_bfield = value;
			}
		}
		
		/// <summary>
		/// Message creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Message creation date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Message sender type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;support.MessageSenderEnum&quot;,&quot;Description&quot;:&quot;Message sender type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("from")]
		public string From {
			get {
				return this.From_bfield;
			}
			set {
				this.From_bfield = value;
			}
		}
		
		/// <summary>
		/// Message identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Message identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("messageId")]
		public long MessageId {
			get {
				return this.MessageId_bfield;
			}
			set {
				this.MessageId_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ticketId")]
		public long TicketId {
			get {
				return this.TicketId_bfield;
			}
			set {
				this.TicketId_bfield = value;
			}
		}
		
		/// <summary>
		/// Message last update date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Message last update date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("updateDate")]
		public System.DateTime UpdateDate {
			get {
				return this.UpdateDate_bfield;
			}
			set {
				this.UpdateDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Newly created support identifiers
	/// </summary>
	public class SupportNewMessageInfo {
		
		private long MessageId_bfield;
		
		private long TicketId_bfield;
		
		private long TicketNumber_bfield;
		
		/// <summary>
		/// Message identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Message identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("messageId")]
		public long MessageId {
			get {
				return this.MessageId_bfield;
			}
			set {
				this.MessageId_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ticketId")]
		public long TicketId {
			get {
				return this.TicketId_bfield;
			}
			set {
				this.TicketId_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket external number
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket external number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ticketNumber")]
		public long TicketNumber {
			get {
				return this.TicketNumber_bfield;
			}
			set {
				this.TicketNumber_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Support Ticket
	/// </summary>
	public class SupportTicket {
		
		private string AccountId_bfield;
		
		private bool CanBeClosed_bfield;
		
		private string Category_bfield;
		
		private System.DateTime CreationDate_bfield;
		
		private string LastMessageFrom_bfield;
		
		private string Product_bfield;
		
		private string Score_bfield;
		
		private string ServiceName_bfield;
		
		private string State_bfield;
		
		private string Subject_bfield;
		
		private long TicketId_bfield;
		
		private long TicketNumber_bfield;
		
		private string Type_bfield;
		
		private System.DateTime UpdateDate_bfield;
		
		/// <summary>
		/// Customer account identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;coreTypes.AccountId:string&quot;,&quot;Description&quot;:&quot;Customer account identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accountId")]
		public string AccountId {
			get {
				return this.AccountId_bfield;
			}
			set {
				this.AccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Can this ticket be closed or not
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Can this ticket be closed or not&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("canBeClosed")]
		public bool CanBeClosed {
			get {
				return this.CanBeClosed_bfield;
			}
			set {
				this.CanBeClosed_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket request category
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;support.TicketCategoryEnum&quot;,&quot;Description&quot;:&quot;Ticket request category&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("category")]
		public string Category {
			get {
				return this.Category_bfield;
			}
			set {
				this.Category_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Ticket creation date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.DateTime CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Sender type of last message
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;support.MessageSenderEnum&quot;,&quot;Description&quot;:&quot;Sender type of last message&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastMessageFrom")]
		public string LastMessageFrom {
			get {
				return this.LastMessageFrom_bfield;
			}
			set {
				this.LastMessageFrom_bfield = value;
			}
		}
		
		/// <summary>
		/// Product service concerned by ticket
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;support.TicketProductEnum&quot;,&quot;Description&quot;:&quot;Product service concerned by ticket&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("product")]
		public string Product {
			get {
				return this.Product_bfield;
			}
			set {
				this.Product_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket score
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Ticket score&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("score")]
		public string Score {
			get {
				return this.Score_bfield;
			}
			set {
				this.Score_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of service concerned by ticket
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of service concerned by ticket&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("serviceName")]
		public string ServiceName {
			get {
				return this.ServiceName_bfield;
			}
			set {
				this.ServiceName_bfield = value;
			}
		}
		
		/// <summary>
		/// State of ticket
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;support.TicketStatusEnum&quot;,&quot;Description&quot;:&quot;State of ticket&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket subject
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Ticket subject&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("subject")]
		public string Subject {
			get {
				return this.Subject_bfield;
			}
			set {
				this.Subject_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket identifier
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket identifier&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ticketId")]
		public long TicketId {
			get {
				return this.TicketId_bfield;
			}
			set {
				this.TicketId_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket external number
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket external number&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("ticketNumber")]
		public long TicketNumber {
			get {
				return this.TicketNumber_bfield;
			}
			set {
				this.TicketNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket type
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;support.TicketTypeEnum&quot;,&quot;Description&quot;:&quot;Ticket type&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket last update date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Ticket last update date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("updateDate")]
		public System.DateTime UpdateDate {
			get {
				return this.UpdateDate_bfield;
			}
			set {
				this.UpdateDate_bfield = value;
			}
		}
	}
}
