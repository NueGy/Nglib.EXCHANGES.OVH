//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/ssl"  string[]--
//[GET] "/ssl/{serviceName}"  ssl.Certificate--serviceName
//[GET] "/ssl/{serviceName}/serviceInfos"  services.Service--serviceName
//[PUT] "/ssl/{serviceName}/serviceInfos"  void--,serviceName
//[GET] "/ssl/{serviceName}/tasks"  long[]--serviceName
//[GET] "/ssl/{serviceName}/tasks/{taskId}"  ssl.Operation--serviceName,taskId
namespace Nglib.VENDORS.OVH.SSL {
	
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// All authority a SSL certificate can be issued from
	/// </summary>
	public enum SslCertificateAuthorityEnum {
		
		[EnumMember(Value="comodo")]
		Comodo,
		
		[EnumMember(Value="sectigo")]
		Sectigo,
	}
	
	/// <summary>
	/// All status a SSL certificate can be in
	/// </summary>
	public enum SslCertificateStatusEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="validating")]
		Validating,
	}
	
	/// <summary>
	/// All type a SSL certificate can be
	/// </summary>
	public enum SslCertificateTypeEnum {
		
		[EnumMember(Value="DV")]
		DV,
		
		[EnumMember(Value="EV")]
		EV,
		
		[EnumMember(Value="OV")]
		OV,
	}
	
	/// <summary>
	/// All functions a SSL operation can handle
	/// </summary>
	public enum SslOperationFunctionEnum {
		
		[EnumMember(Value="createCertificate")]
		CreateCertificate,
	}
	
	/// <summary>
	/// All status a SSL operation can be in
	/// </summary>
	public enum SslOperationStatusEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Certificate of an SSL customer
	/// </summary>
	public class SslCertificate {
		
		private string Authority_bfield;
		
		private string Certificate_bfield;
		
		private string Chain_bfield;
		
		private string CommonName_bfield;
		
		private string Csr_bfield;
		
		private string ServiceName_bfield;
		
		private string Status_bfield;
		
		private string[] SubjectAltName_bfield;
		
		private string Type_bfield;
		
		private System.Nullable<System.DateTime> ValidityEnd_bfield;
		
		private System.Nullable<System.DateTime> ValidityStart_bfield;
		
		/// <summary>
		/// The authority your certificate is issued from
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ssl.CertificateAuthorityEnum&quot;,&quot;Description&quot;:&quot;The authority your certificate is issued from&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("authority")]
		public string Authority {
			get {
				return this.Authority_bfield;
			}
			set {
				this.Authority_bfield = value;
			}
		}
		
		/// <summary>
		/// Your certificate
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;Your certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("certificate")]
		public string Certificate {
			get {
				return this.Certificate_bfield;
			}
			set {
				this.Certificate_bfield = value;
			}
		}
		
		/// <summary>
		/// The issuer chain of your certificate
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;The issuer chain of your certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("chain")]
		public string Chain {
			get {
				return this.Chain_bfield;
			}
			set {
				this.Chain_bfield = value;
			}
		}
		
		/// <summary>
		/// The CN field in your certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The CN field in your certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("commonName")]
		public string CommonName {
			get {
				return this.CommonName_bfield;
			}
			set {
				this.CommonName_bfield = value;
			}
		}
		
		/// <summary>
		/// The CSR used to create your certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;text&quot;,&quot;Description&quot;:&quot;The CSR used to create your certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("csr")]
		public string Csr {
			get {
				return this.Csr_bfield;
			}
			set {
				this.Csr_bfield = value;
			}
		}
		
		/// <summary>
		/// The internal name of your certificate offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;The internal name of your certificate offer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceName")]
		public string ServiceName {
			get {
				return this.ServiceName_bfield;
			}
			set {
				this.ServiceName_bfield = value;
			}
		}
		
		/// <summary>
		/// Current status of your certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ssl.CertificateStatusEnum&quot;,&quot;Description&quot;:&quot;Current status of your certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// The SAN field for multidomain certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string[]&quot;,&quot;Description&quot;:&quot;The SAN field for multidomain certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("subjectAltName")]
		public string[] SubjectAltName {
			get {
				return this.SubjectAltName_bfield;
			}
			set {
				this.SubjectAltName_bfield = value;
			}
		}
		
		/// <summary>
		/// Type of your certificate
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ssl.CertificateTypeEnum&quot;,&quot;Description&quot;:&quot;Type of your certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("type")]
		public string Type {
			get {
				return this.Type_bfield;
			}
			set {
				this.Type_bfield = value;
			}
		}
		
		/// <summary>
		/// Your certificate is invalid from this date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Your certificate is invalid from this date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("validityEnd")]
		public System.Nullable<System.DateTime> ValidityEnd {
			get {
				return this.ValidityEnd_bfield;
			}
			set {
				this.ValidityEnd_bfield = value;
			}
		}
		
		/// <summary>
		/// Your certificate is valid from this date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Your certificate is valid from this date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("validityStart")]
		public System.Nullable<System.DateTime> ValidityStart {
			get {
				return this.ValidityStart_bfield;
			}
			set {
				this.ValidityStart_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Task on a SSL
	/// </summary>
	public class SslOperation {
		
		private System.Nullable<System.DateTime> DoneDate_bfield;
		
		private string Function_bfield;
		
		private System.DateTime LastUpdate_bfield;
		
		private System.DateTime StartDate_bfield;
		
		private string Status_bfield;
		
		private long TaskId_bfield;
		
		/// <summary>
		/// Completion date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Completion date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("doneDate")]
		public System.Nullable<System.DateTime> DoneDate {
			get {
				return this.DoneDate_bfield;
			}
			set {
				this.DoneDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Task function name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ssl.OperationFunctionEnum&quot;,&quot;Description&quot;:&quot;Task function name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Task last update
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Task last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdate")]
		public System.DateTime LastUpdate {
			get {
				return this.LastUpdate_bfield;
			}
			set {
				this.LastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Task Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Task Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("startDate")]
		public System.DateTime StartDate {
			get {
				return this.StartDate_bfield;
			}
			set {
				this.StartDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Task status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;ssl.OperationStatusEnum&quot;,&quot;Description&quot;:&quot;Task status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskId")]
		public long TaskId {
			get {
				return this.TaskId_bfield;
			}
			set {
				this.TaskId_bfield = value;
			}
		}
	}
}
