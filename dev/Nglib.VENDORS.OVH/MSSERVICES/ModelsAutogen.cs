//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Newtonsoft.Json;
using Nglib.VENDORS.OVH.SHARED;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Threading.Tasks;


// [GET] "/msServices"  string[]--
//[GET] "/msServices/sharepoint"  string[]--
//[GET] "/msServices/sharepoint/{domain}"  msServices.SharepointServiceInfo--domain
//[GET] "/msServices/sharepoint/{domain}/serviceInfos"  services.Service--domain
//[PUT] "/msServices/sharepoint/{domain}/serviceInfos"  void--,domain
//[GET] "/msServices/{serviceName}"  msServices.ActiveDirectoryOrganizationalUnit--serviceName
//[PUT] "/msServices/{serviceName}"  void--,serviceName
//[GET] "/msServices/{serviceName}/account"  string[]--id,serviceName,userPrincipalName
//[GET] "/msServices/{serviceName}/account/{userPrincipalName}"  msServices.Account--serviceName,userPrincipalName
//[PUT] "/msServices/{serviceName}/account/{userPrincipalName}"  void--,serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/changePassword"  msServices.Task--password,serviceName,userPrincipalName
//[GET] "/msServices/{serviceName}/account/{userPrincipalName}/exchange"  msServices.ExchangeInformation--serviceName,userPrincipalName
//[PUT] "/msServices/{serviceName}/account/{userPrincipalName}/exchange"  void--,serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/exchange/configure"  msServices.exchangeTask--serviceName,userPrincipalName
//[DELETE] "/msServices/{serviceName}/account/{userPrincipalName}/mfa"  msServices.Task--serviceName,userPrincipalName
//[GET] "/msServices/{serviceName}/account/{userPrincipalName}/mfa"  msServices.MfaInformation--serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/mfa"  msServices.Task--serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/mfa/disable"  msServices.Task--period,serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/mfa/enable"  msServices.Task--serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/mfa/reset"  msServices.Task--serviceName,userPrincipalName
//[GET] "/msServices/{serviceName}/account/{userPrincipalName}/sharepoint"  msServices.SharepointInformation--serviceName,userPrincipalName
//[PUT] "/msServices/{serviceName}/account/{userPrincipalName}/sharepoint"  void--,serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/sharepoint/clearSpace"  msServices.sharepointTask--serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/sharepoint/configure"  msServices.sharepointTask--serviceName,userPrincipalName
//[DELETE] "/msServices/{serviceName}/account/{userPrincipalName}/sync"  msServices.Task--serviceName,userPrincipalName
//[GET] "/msServices/{serviceName}/account/{userPrincipalName}/sync"  msServices.SyncInformation--serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/sync"  msServices.Task--license,serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/account/{userPrincipalName}/sync/configure"  msServices.Task--serviceName,userPrincipalName
//[POST] "/msServices/{serviceName}/createMfaOnAllUsers"  msServices.Task--serviceName
//[GET] "/msServices/{serviceName}/exchange"  msServices.ExchangeService--serviceName
//[PUT] "/msServices/{serviceName}/exchange"  void--,serviceName
//[GET] "/msServices/{serviceName}/exchange/billingMigrated"  boolean--serviceName
//[GET] "/msServices/{serviceName}/exchange/task"  long[]--serviceName
//[GET] "/msServices/{serviceName}/exchange/task/{id}"  msServices.exchangeTask--id,serviceName
//[POST] "/msServices/{serviceName}/removeMfaOnAllUsers"  msServices.Task--serviceName
//[GET] "/msServices/{serviceName}/sharepoint"  msServices.SharepointService--serviceName
//[PUT] "/msServices/{serviceName}/sharepoint"  void--,serviceName
//[GET] "/msServices/{serviceName}/sharepoint/billingMigrated"  boolean--serviceName
//[GET] "/msServices/{serviceName}/sharepoint/license"  msServices.SharepointDailyLicense[]--license,period,serviceName
//[POST] "/msServices/{serviceName}/sharepoint/restoreAdminRights"  msServices.sharepointTask--serviceName
//[GET] "/msServices/{serviceName}/sharepoint/task"  long[]--function,serviceName,status
//[GET] "/msServices/{serviceName}/sharepoint/task/{id}"  msServices.sharepointTask--id,serviceName
//[DELETE] "/msServices/{serviceName}/sync"  msServices.Task--serviceName
//[GET] "/msServices/{serviceName}/sync"  msServices.SyncService--serviceName
//[POST] "/msServices/{serviceName}/sync/changePassword"  msServices.Task--password,serviceName
//[GET] "/msServices/{serviceName}/sync/clientSoftwareURL"  msServices.ActiveDirectorySyncClientUrl--serviceName
//[POST] "/msServices/{serviceName}/sync/clientSoftwareURL"  msServices.Task--serviceName
//[GET] "/msServices/{serviceName}/sync/license"  msServices.SyncDailyLicense[]--license,period,serviceName
//[GET] "/msServices/{serviceName}/task"  long[]--function,serviceName,status
//[GET] "/msServices/{serviceName}/task/{id}"  msServices.Task--id,serviceName
//[GET] "/msServices/{serviceName}/upnSuffix"  string[]--serviceName
//[POST] "/msServices/{serviceName}/upnSuffix"  msServices.Task--serviceName,suffix
//[DELETE] "/msServices/{serviceName}/upnSuffix/{suffix}"  msServices.Task--serviceName,suffix
//[GET] "/msServices/{serviceName}/upnSuffix/{suffix}"  msServices.upnSuffix--serviceName,suffix
namespace Nglib.VENDORS.OVH.MSSERVICES {
	
	
	/// <summary>
	/// Exchange account licence
	/// </summary>
	public enum MsServicesExchangeLicenceEnum {
		
		[EnumMember(Value="basic")]
		Basic,
		
		[EnumMember(Value="enterprise")]
		Enterprise,
		
		[EnumMember(Value="standard")]
		Standard,
	}
	
	/// <summary>
	/// Period of time used to determine license statistics
	/// </summary>
	public enum MsServicesLicensePeriodEnum {
		
		[EnumMember(Value="lastMonth")]
		LastMonth,
		
		[EnumMember(Value="lastQuarter")]
		LastQuarter,
		
		[EnumMember(Value="lastWeek")]
		LastWeek,
		
		[EnumMember(Value="lastYear")]
		LastYear,
	}
	
	/// <summary>
	/// Mailing filter options availlable
	/// </summary>
	public enum MsServicesMailingFilterEnum {
		
		[EnumMember(Value="vaderetro")]
		Vaderetro,
	}
	
	/// <summary>
	/// Current object state
	/// </summary>
	public enum MsServicesObjectStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="modifying")]
		Modifying,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="reopening")]
		Reopening,
		
		[EnumMember(Value="suspended")]
		Suspended,
		
		[EnumMember(Value="suspending")]
		Suspending,
	}
	
	/// <summary>
	/// Renew period
	/// </summary>
	public enum MsServicesRenewPeriodEnum {
		
		[EnumMember(Value="monthly")]
		Monthly,
		
		[EnumMember(Value="yearly")]
		Yearly,
	}
	
	/// <summary>
	/// Service Offer name
	/// </summary>
	public enum MsServicesServiceOfferEnum {
		
		[EnumMember(Value="dedicated")]
		Dedicated,
		
		[EnumMember(Value="dedicatedCluster")]
		DedicatedCluster,
		
		[EnumMember(Value="hosted")]
		Hosted,
		
		[EnumMember(Value="provider")]
		Provider,
	}
	
	/// <summary>
	/// Service State
	/// </summary>
	public enum MsServicesServiceStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="inMaintenance")]
		InMaintenance,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="reopening")]
		Reopening,
		
		[EnumMember(Value="suspended")]
		Suspended,
		
		[EnumMember(Value="suspending")]
		Suspending,
	}
	
	/// <summary>
	/// Account access rights to the service
	/// </summary>
	public enum MsServicesSharepointAccountAccessRightsEnum {
		
		[EnumMember(Value="administrator")]
		Administrator,
		
		[EnumMember(Value="user")]
		User,
	}
	
	/// <summary>
	/// Sharepoint account license
	/// </summary>
	public enum MsServicesSharepointLicenseEnum {
		
		[EnumMember(Value="foundation")]
		Foundation,
		
		[EnumMember(Value="standard")]
		Standard,
	}
	
	/// <summary>
	/// Sharepoint service offer name
	/// </summary>
	public enum MsServicesSharepointServiceOfferEnum {
		
		[EnumMember(Value="hosted")]
		Hosted,
		
		[EnumMember(Value="provider")]
		Provider,
	}
	
	/// <summary>
	/// Sync account license
	/// </summary>
	public enum MsServicesSyncLicenseEnum {
		
		[EnumMember(Value="standard")]
		Standard,
		
		[EnumMember(Value="standardFree")]
		StandardFree,
	}
	
	/// <summary>
	/// function enumeration for Active Directory task
	/// </summary>
	public enum MsServicesTaskFunctionEnum {
		
		[EnumMember(Value="activateADSync")]
		ActivateADSync,
		
		[EnumMember(Value="activateSharepoint")]
		ActivateSharepoint,
		
		[EnumMember(Value="addADAccount")]
		AddADAccount,
		
		[EnumMember(Value="addADOU")]
		AddADOU,
		
		[EnumMember(Value="addADSyncAccount")]
		AddADSyncAccount,
		
		[EnumMember(Value="addADUPNSuffix")]
		AddADUPNSuffix,
		
		[EnumMember(Value="alterMfaOnAllUsers")]
		AlterMfaOnAllUsers,
		
		[EnumMember(Value="changeADPassword")]
		ChangeADPassword,
		
		[EnumMember(Value="changeADSyncPassword")]
		ChangeADSyncPassword,
		
		[EnumMember(Value="deactivateADSync")]
		DeactivateADSync,
		
		[EnumMember(Value="delADOU")]
		DelADOU,
		
		[EnumMember(Value="deleteADAccount")]
		DeleteADAccount,
		
		[EnumMember(Value="deleteADSyncAccount")]
		DeleteADSyncAccount,
		
		[EnumMember(Value="deleteADUPNSuffix")]
		DeleteADUPNSuffix,
		
		[EnumMember(Value="disableADAccountMfa")]
		DisableADAccountMfa,
		
		[EnumMember(Value="disableADAccountMfaTemporary")]
		DisableADAccountMfaTemporary,
		
		[EnumMember(Value="enableADAccountMfa")]
		EnableADAccountMfa,
		
		[EnumMember(Value="enableADSyncAccount")]
		EnableADSyncAccount,
		
		[EnumMember(Value="generateADSyncClientUrl")]
		GenerateADSyncClientUrl,
		
		[EnumMember(Value="resetADAccountMfa")]
		ResetADAccountMfa,
		
		[EnumMember(Value="setADAccount")]
		SetADAccount,
		
		[EnumMember(Value="setPasswordPolicy")]
		SetPasswordPolicy,
	}
	
	/// <summary>
	/// ActiveDirectory task status
	/// </summary>
	public enum MsServicesTaskStatusEnum {
		
		[EnumMember(Value="cancelled")]
		Cancelled,
		
		[EnumMember(Value="doing")]
		Doing,
		
		[EnumMember(Value="done")]
		Done,
		
		[EnumMember(Value="error")]
		Error,
		
		[EnumMember(Value="todo")]
		Todo,
	}
	
	/// <summary>
	/// Active Directory UPN Suffix State
	/// </summary>
	public enum MsServicesUPNStateEnum {
		
		[EnumMember(Value="creating")]
		Creating,
		
		[EnumMember(Value="deleting")]
		Deleting,
		
		[EnumMember(Value="ok")]
		Ok,
	}
	
	/// <summary>
	/// Detailed renewal type of a service
	/// </summary>
	public enum ServiceRenewalTypeEnum {
		
		[EnumMember(Value="automaticForcedProduct")]
		AutomaticForcedProduct,
		
		[EnumMember(Value="automaticV2012")]
		AutomaticV2012,
		
		[EnumMember(Value="automaticV2014")]
		AutomaticV2014,
		
		[EnumMember(Value="automaticV2016")]
		AutomaticV2016,
		
		[EnumMember(Value="manual")]
		Manual,
		
		[EnumMember(Value="oneShot")]
		OneShot,
		
		[EnumMember(Value="option")]
		Option,
	}
	
	public enum ServiceStateEnum {
		
		[EnumMember(Value="expired")]
		Expired,
		
		[EnumMember(Value="inCreation")]
		InCreation,
		
		[EnumMember(Value="ok")]
		Ok,
		
		[EnumMember(Value="pendingDebt")]
		PendingDebt,
		
		[EnumMember(Value="unPaid")]
		UnPaid,
	}
	
	/// <summary>
	/// Active Directory Account
	/// </summary>
	public class MsServicesAccount {
		
		private string SAMAccountName_bfield;
		
		private System.Nullable<System.DateTime> CreationDate_bfield;
		
		private string DisplayName_bfield;
		
		private string FirstName_bfield;
		
		private string Guid_bfield;
		
		private long Id_bfield;
		
		private string Initials_bfield;
		
		private System.Nullable<System.DateTime> LastLogoffDate_bfield;
		
		private System.Nullable<System.DateTime> LastLogonDate_bfield;
		
		private string LastName_bfield;
		
		private System.Nullable<System.DateTime> LastUpdateDate_bfield;
		
		private System.Nullable<System.DateTime> PasswordLastUpdate_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private string UserPrincipalName_bfield;
		
		/// <summary>
		/// SAM account name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;SAM account name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("SAMAccountName")]
		public string SAMAccountName {
			get {
				return this.SAMAccountName_bfield;
			}
			set {
				this.SAMAccountName_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.Nullable<System.DateTime> CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Account display name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account display name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Account first name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account first name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("firstName")]
		public string FirstName {
			get {
				return this.FirstName_bfield;
			}
			set {
				this.FirstName_bfield = value;
			}
		}
		
		/// <summary>
		/// GUID for user in active directory
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;GUID for user in active directory&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("guid")]
		public string Guid {
			get {
				return this.Guid_bfield;
			}
			set {
				this.Guid_bfield = value;
			}
		}
		
		/// <summary>
		/// Account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Account initials
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account initials&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("initials")]
		public string Initials {
			get {
				return this.Initials_bfield;
			}
			set {
				this.Initials_bfield = value;
			}
		}
		
		/// <summary>
		/// Last logoff
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last logoff&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastLogoffDate")]
		public System.Nullable<System.DateTime> LastLogoffDate {
			get {
				return this.LastLogoffDate_bfield;
			}
			set {
				this.LastLogoffDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Last logon
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last logon&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastLogonDate")]
		public System.Nullable<System.DateTime> LastLogonDate {
			get {
				return this.LastLogonDate_bfield;
			}
			set {
				this.LastLogonDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Account last name
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Account last name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lastName")]
		public string LastName {
			get {
				return this.LastName_bfield;
			}
			set {
				this.LastName_bfield = value;
			}
		}
		
		/// <summary>
		/// Last update
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("lastUpdateDate")]
		public System.Nullable<System.DateTime> LastUpdateDate {
			get {
				return this.LastUpdateDate_bfield;
			}
			set {
				this.LastUpdateDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Time of account's password last update
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Time of account's password last update&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("passwordLastUpdate")]
		public System.Nullable<System.DateTime> PasswordLastUpdate {
			get {
				return this.PasswordLastUpdate_bfield;
			}
			set {
				this.PasswordLastUpdate_bfield = value;
			}
		}
		
		/// <summary>
		/// Account state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Account state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task for this account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task for this account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// User Principal Name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;User Principal Name&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("userPrincipalName")]
		public string UserPrincipalName {
			get {
				return this.UserPrincipalName_bfield;
			}
			set {
				this.UserPrincipalName_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Active Directory organizational unit
	/// </summary>
	public class MsServicesActiveDirectoryOrganizationalUnit {
		
		private bool ComplexityEnabled_bfield;
		
		private long LockoutDuration_bfield;
		
		private long LockoutObservationWindow_bfield;
		
		private System.Nullable<long> LockoutThreshold_bfield;
		
		private System.Nullable<long> MaxPasswordAge_bfield;
		
		private System.Nullable<long> MinPasswordAge_bfield;
		
		private System.Nullable<long> MinPasswordLength_bfield;
		
		private string Name_bfield;
		
		private string OfficeTenantServiceName_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Flag indicating if passwords should be forced to follow Microsoft's password guidelines
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Flag indicating if passwords should be forced to follow Microsoft's password guidelines&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("complexityEnabled")]
		public bool ComplexityEnabled {
			get {
				return this.ComplexityEnabled_bfield;
			}
			set {
				this.ComplexityEnabled_bfield = value;
			}
		}
		
		/// <summary>
		/// Account lock time (in minutes) when too much passwords have been tried
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account lock time (in minutes) when too much passwords have been tried&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutDuration")]
		public long LockoutDuration {
			get {
				return this.LockoutDuration_bfield;
			}
			set {
				this.LockoutDuration_bfield = value;
			}
		}
		
		/// <summary>
		/// Time (in minutes) before the password attempts counter is reset
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Time (in minutes) before the password attempts counter is reset&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutObservationWindow")]
		public long LockoutObservationWindow {
			get {
				return this.LockoutObservationWindow_bfield;
			}
			set {
				this.LockoutObservationWindow_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum number of password tries before account locking
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum number of password tries before account locking&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("lockoutThreshold")]
		public System.Nullable<long> LockoutThreshold {
			get {
				return this.LockoutThreshold_bfield;
			}
			set {
				this.LockoutThreshold_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum lifespan of passwords, in days
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum lifespan of passwords, in days&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxPasswordAge")]
		public System.Nullable<long> MaxPasswordAge {
			get {
				return this.MaxPasswordAge_bfield;
			}
			set {
				this.MaxPasswordAge_bfield = value;
			}
		}
		
		/// <summary>
		/// Minimum lifespan of passwords, in days (0 = unlimited)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Minimum lifespan of passwords, in days (0 = unlimited)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("minPasswordAge")]
		public System.Nullable<long> MinPasswordAge {
			get {
				return this.MinPasswordAge_bfield;
			}
			set {
				this.MinPasswordAge_bfield = value;
			}
		}
		
		/// <summary>
		/// Minimum number of characters passwords must contain
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Minimum number of characters passwords must contain&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("minPasswordLength")]
		public System.Nullable<long> MinPasswordLength {
			get {
				return this.MinPasswordLength_bfield;
			}
			set {
				this.MinPasswordLength_bfield = value;
			}
		}
		
		/// <summary>
		/// Name of the Active Directory organizational unit
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Name of the Active Directory organizational unit&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("name")]
		public string Name {
			get {
				return this.Name_bfield;
			}
			set {
				this.Name_bfield = value;
			}
		}
		
		/// <summary>
		/// Service name of the office tenant (/licence/office/{serviceName}) linked to this AD service
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Service name of the office tenant (/licence/office/{serviceName}) linked to this AD service&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("officeTenantServiceName")]
		public string OfficeTenantServiceName {
			get {
				return this.OfficeTenantServiceName_bfield;
			}
			set {
				this.OfficeTenantServiceName_bfield = value;
			}
		}
		
		/// <summary>
		/// Current state of the Active Directory organizational unit
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ServiceStateEnum&quot;,&quot;Description&quot;:&quot;Current state of the Active Directory organizational unit&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Temporary link to ADSync software executable
	/// </summary>
	public class MsServicesActiveDirectorySyncClientUrl {
		
		private System.DateTime Expiration_bfield;
		
		private string Url_bfield;
		
		/// <summary>
		/// Link expiration date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Link expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public System.DateTime Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// ADSync software executable link
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;ADSync software executable link&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("url")]
		public string Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange mailbox information
	/// </summary>
	public class MsServicesExchangeInformation {
		
		private string AccountLicense_bfield;
		
		private bool Configured_bfield;
		
		private System.Nullable<System.DateTime> CreationDate_bfield;
		
		private System.Nullable<long> CurrentUsage_bfield;
		
		private System.Nullable<bool> DeleteAtExpiration_bfield;
		
		private System.Nullable<bool> DeleteOutlookAtExpiration_bfield;
		
		private string ExchangeGuid_bfield;
		
		private System.Nullable<System.DateTime> ExpirationDate_bfield;
		
		private System.Nullable<System.DateTime> ExpirationOutlookDate_bfield;
		
		private bool HiddenFromGAL_bfield;
		
		private long Id_bfield;
		
		private bool Litigation_bfield;
		
		private System.Nullable<long> LitigationPeriod_bfield;
		
		private string[] MailingFilter_bfield;
		
		private long NumberOfAliases_bfield;
		
		private bool OutlookLicense_bfield;
		
		private bool OwaLimited_bfield;
		
		private string PrimaryEmailAddress_bfield;
		
		private long Quota_bfield;
		
		private string RenewOutlookPeriod_bfield;
		
		private string RenewPeriod_bfield;
		
		private MsServicesSpamAndVirusConfiguration SpamAndVirusConfiguration_bfield;
		
		private bool SpamDetected_bfield;
		
		private System.Nullable<long> SpamTicketNumber_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Exchange account license
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ExchangeLicenceEnum&quot;,&quot;Description&quot;:&quot;Exchange account license&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accountLicense")]
		public string AccountLicense {
			get {
				return this.AccountLicense_bfield;
			}
			set {
				this.AccountLicense_bfield = value;
			}
		}
		
		/// <summary>
		/// Indicates if the account is configured
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates if the account is configured&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("configured")]
		public bool Configured {
			get {
				return this.Configured_bfield;
			}
			set {
				this.Configured_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creationDate")]
		public System.Nullable<System.DateTime> CreationDate {
			get {
				return this.CreationDate_bfield;
			}
			set {
				this.CreationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Mailbox usage in KB
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Mailbox usage in KB&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentUsage")]
		public System.Nullable<long> CurrentUsage {
			get {
				return this.CurrentUsage_bfield;
			}
			set {
				this.CurrentUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// Delete mailbox at expiration date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Delete mailbox at expiration date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public System.Nullable<bool> DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// Delete Outlook license at expiration date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Delete Outlook license at expiration date&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteOutlookAtExpiration")]
		public System.Nullable<bool> DeleteOutlookAtExpiration {
			get {
				return this.DeleteOutlookAtExpiration_bfield;
			}
			set {
				this.DeleteOutlookAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// Property needed for mailbox manual configuration (GUID)
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Property needed for mailbox manual configuration (GUID)&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("exchangeGuid")]
		public string ExchangeGuid {
			get {
				return this.ExchangeGuid_bfield;
			}
			set {
				this.ExchangeGuid_bfield = value;
			}
		}
		
		/// <summary>
		/// Expiration date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Expiration date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationDate")]
		public System.Nullable<System.DateTime> ExpirationDate {
			get {
				return this.ExpirationDate_bfield;
			}
			set {
				this.ExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Expiration date of Outlook license
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Expiration date of Outlook license&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expirationOutlookDate")]
		public System.Nullable<System.DateTime> ExpirationOutlookDate {
			get {
				return this.ExpirationOutlookDate_bfield;
			}
			set {
				this.ExpirationOutlookDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Visibility in Global Address List
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Visibility in Global Address List&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("hiddenFromGAL")]
		public bool HiddenFromGAL {
			get {
				return this.HiddenFromGAL_bfield;
			}
			set {
				this.HiddenFromGAL_bfield = value;
			}
		}
		
		/// <summary>
		/// Account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Litigation hold feature enabled on this mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Litigation hold feature enabled on this mailbox&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("litigation")]
		public bool Litigation {
			get {
				return this.Litigation_bfield;
			}
			set {
				this.Litigation_bfield = value;
			}
		}
		
		/// <summary>
		/// Litigation hold period in days (0 means unlimited). This setting covers all items in the mailbox.
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Litigation hold period in days (0 means unlimited). This setting covers all items in the mailbox.&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("litigationPeriod")]
		public System.Nullable<long> LitigationPeriod {
			get {
				return this.LitigationPeriod_bfield;
			}
			set {
				this.LitigationPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Enable or disable anti-virus and anti-spam
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;msServices.MailingFilterEnum[]&quot;,&quot;Description&quot;:&quot;Enable or disable anti-virus and anti-spam&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("mailingFilter")]
		public string[] MailingFilter {
			get {
				return this.MailingFilter_bfield;
			}
			set {
				this.MailingFilter_bfield = value;
			}
		}
		
		/// <summary>
		/// Count the number of related aliases attached to this account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Count the number of related aliases attached to this account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("numberOfAliases")]
		public long NumberOfAliases {
			get {
				return this.NumberOfAliases_bfield;
			}
			set {
				this.NumberOfAliases_bfield = value;
			}
		}
		
		/// <summary>
		/// Outlook licence attached
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Outlook licence attached&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("outlookLicense")]
		public bool OutlookLicense {
			get {
				return this.OutlookLicense_bfield;
			}
			set {
				this.OutlookLicense_bfield = value;
			}
		}
		
		/// <summary>
		/// OWA policy restriction is applied
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;OWA policy restriction is applied&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("owaLimited")]
		public bool OwaLimited {
			get {
				return this.OwaLimited_bfield;
			}
			set {
				this.OwaLimited_bfield = value;
			}
		}
		
		/// <summary>
		/// Primary address of the mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Primary address of the mailbox&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("primaryEmailAddress")]
		public string PrimaryEmailAddress {
			get {
				return this.PrimaryEmailAddress_bfield;
			}
			set {
				this.PrimaryEmailAddress_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum mailbox usage in GB (overall size)
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum mailbox usage in GB (overall size)&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("quota")]
		public long Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// Frequency of Outlook license renewals
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;msServices.RenewPeriodEnum&quot;,&quot;Description&quot;:&quot;Frequency of Outlook license renewals&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renewOutlookPeriod")]
		public string RenewOutlookPeriod {
			get {
				return this.RenewOutlookPeriod_bfield;
			}
			set {
				this.RenewOutlookPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Frequency of mailbox license renewals
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;msServices.RenewPeriodEnum&quot;,&quot;Description&quot;:&quot;Frequency of mailbox license renewals&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renewPeriod")]
		public string RenewPeriod {
			get {
				return this.RenewPeriod_bfield;
			}
			set {
				this.RenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Spam and Antivirus configuration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SpamAndVirusConfiguration&quot;,&quot;Description&quot;:&quot;Spam and Antivirus configuration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("spamAndVirusConfiguration")]
		public MsServicesSpamAndVirusConfiguration SpamAndVirusConfiguration {
			get {
				return this.SpamAndVirusConfiguration_bfield;
			}
			set {
				this.SpamAndVirusConfiguration_bfield = value;
			}
		}
		
		/// <summary>
		/// Spam activity detected on this mailbox
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Spam activity detected on this mailbox&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamDetected")]
		public bool SpamDetected {
			get {
				return this.SpamDetected_bfield;
			}
			set {
				this.SpamDetected_bfield = value;
			}
		}
		
		/// <summary>
		/// Ticket number of spam detection
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Ticket number of spam detection&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("spamTicketNumber")]
		public System.Nullable<long> SpamTicketNumber {
			get {
				return this.SpamTicketNumber_bfield;
			}
			set {
				this.SpamTicketNumber_bfield = value;
			}
		}
		
		/// <summary>
		/// Mailbox state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Mailbox state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task id for this account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task id for this account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange service
	/// </summary>
	public class MsServicesExchangeService {
		
		private string DisplayName_bfield;
		
		private string Domain_bfield;
		
		private string Hostname_bfield;
		
		private long MaxReceiveSize_bfield;
		
		private long MaxSendSize_bfield;
		
		private string Offer_bfield;
		
		private MsServicesSpamAndVirusConfiguration SpamAndVirusConfiguration_bfield;
		
		private string SslExpirationDate_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Service family name displayed
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Service family name displayed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Exchange service name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Exchange service name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// Exchange service URL
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Exchange service URL&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("hostname")]
		public string Hostname {
			get {
				return this.Hostname_bfield;
			}
			set {
				this.Hostname_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum allowable size for received messages in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum allowable size for received messages in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxReceiveSize")]
		public long MaxReceiveSize {
			get {
				return this.MaxReceiveSize_bfield;
			}
			set {
				this.MaxReceiveSize_bfield = value;
			}
		}
		
		/// <summary>
		/// Maximum allowable size of sent messages in MB
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Maximum allowable size of sent messages in MB&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("maxSendSize")]
		public long MaxSendSize {
			get {
				return this.MaxSendSize_bfield;
			}
			set {
				this.MaxSendSize_bfield = value;
			}
		}
		
		/// <summary>
		/// Exchange service offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ServiceOfferEnum&quot;,&quot;Description&quot;:&quot;Exchange service offer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// Spam and Antivirus configuration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SpamAndVirusConfiguration&quot;,&quot;Description&quot;:&quot;Spam and Antivirus configuration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("spamAndVirusConfiguration")]
		public MsServicesSpamAndVirusConfiguration SpamAndVirusConfiguration {
			get {
				return this.SpamAndVirusConfiguration_bfield;
			}
			set {
				this.SpamAndVirusConfiguration_bfield = value;
			}
		}
		
		/// <summary>
		/// Expiration date of SSL certificate
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:&quot;Expiration date of SSL certificate&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("sslExpirationDate")]
		public string SslExpirationDate {
			get {
				return this.SslExpirationDate_bfield;
			}
			set {
				this.SslExpirationDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Exchange service state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ServiceStateEnum&quot;,&quot;Description&quot;:&quot;Exchange service state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Multi Factor Authentication informations
	/// </summary>
	public class MsServicesMfaInformation {
		
		private bool Activated_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Indicates if Multi Factor Authentication is activated on this account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates if Multi Factor Authentication is activated on this account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("activated")]
		public bool Activated {
			get {
				return this.Activated_bfield;
			}
			set {
				this.Activated_bfield = value;
			}
		}
		
		/// <summary>
		/// Current status of Multi Factor Authentication feature
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Current status of Multi Factor Authentication feature&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task for Multi Factor Authentication
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task for Multi Factor Authentication&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sharepoint account license
	/// </summary>
	public class MsServicesSharepointAccountLicense {
		
		private string License_bfield;
		
		private long LicenseQuantity_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SharepointLicenseEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("license")]
		public string License {
			get {
				return this.License_bfield;
			}
			set {
				this.License_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("licenseQuantity")]
		public long LicenseQuantity {
			get {
				return this.LicenseQuantity_bfield;
			}
			set {
				this.LicenseQuantity_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sharepoint account license per day
	/// </summary>
	public class MsServicesSharepointDailyLicense {
		
		private string[] AccountLicense_bfield;
		
		private string Date_bfield;
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SharepointAccountLicense[]&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accountLicense")]
		public string[] AccountLicense {
			get {
				return this.AccountLicense_bfield;
			}
			set {
				this.AccountLicense_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("date")]
		public string Date {
			get {
				return this.Date_bfield;
			}
			set {
				this.Date_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sharepoint account information
	/// </summary>
	public class MsServicesSharepointInformation {
		
		private string AccessRights_bfield;
		
		private long ActiveDirectoryAccountId_bfield;
		
		private bool Configured_bfield;
		
		private System.Nullable<long> CurrentUsage_bfield;
		
		private System.Nullable<bool> DeleteAtExpiration_bfield;
		
		private long Id_bfield;
		
		private string License_bfield;
		
		private bool OfficeLicense_bfield;
		
		private long Quota_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// The rights assigned to the sharepoint account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SharepointAccountAccessRightsEnum&quot;,&quot;Description&quot;:&quot;The rights assigned to the sharepoint account&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accessRights")]
		public string AccessRights {
			get {
				return this.AccessRights_bfield;
			}
			set {
				this.AccessRights_bfield = value;
			}
		}
		
		/// <summary>
		/// Active Directory Account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Active Directory Account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("activeDirectoryAccountId")]
		public long ActiveDirectoryAccountId {
			get {
				return this.ActiveDirectoryAccountId_bfield;
			}
			set {
				this.ActiveDirectoryAccountId_bfield = value;
			}
		}
		
		/// <summary>
		/// Indicates if the account is configured
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates if the account is configured&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("configured")]
		public bool Configured {
			get {
				return this.Configured_bfield;
			}
			set {
				this.Configured_bfield = value;
			}
		}
		
		/// <summary>
		/// OneDrive usage in byte
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;OneDrive usage in byte&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentUsage")]
		public System.Nullable<long> CurrentUsage {
			get {
				return this.CurrentUsage_bfield;
			}
			set {
				this.CurrentUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// delete at expiration
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;delete at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public System.Nullable<bool> DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// Sharepoint account id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Sharepoint account id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Sharepoint account license
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SharepointLicenseEnum&quot;,&quot;Description&quot;:&quot;Sharepoint account license&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("license")]
		public string License {
			get {
				return this.License_bfield;
			}
			set {
				this.License_bfield = value;
			}
		}
		
		/// <summary>
		/// office license is available
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;office license is available&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("officeLicense")]
		public bool OfficeLicense {
			get {
				return this.OfficeLicense_bfield;
			}
			set {
				this.OfficeLicense_bfield = value;
			}
		}
		
		/// <summary>
		/// OneDrive maximum size in byte
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;OneDrive maximum size in byte&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("quota")]
		public long Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// Sharepoint account state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Sharepoint account state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task for this sharepoint account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task for this sharepoint account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sharepoint service
	/// </summary>
	public class MsServicesSharepointService {
		
		private System.Nullable<long> CurrentUsage_bfield;
		
		private string DisplayName_bfield;
		
		private string Domain_bfield;
		
		private string FarmUrl_bfield;
		
		private string Offer_bfield;
		
		private long Quota_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		private string Url_bfield;
		
		/// <summary>
		/// Shared space usage in byte
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Shared space usage in byte&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("currentUsage")]
		public System.Nullable<long> CurrentUsage {
			get {
				return this.CurrentUsage_bfield;
			}
			set {
				this.CurrentUsage_bfield = value;
			}
		}
		
		/// <summary>
		/// Service family name displayed
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Service family name displayed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("displayName")]
		public string DisplayName {
			get {
				return this.DisplayName_bfield;
			}
			set {
				this.DisplayName_bfield = value;
			}
		}
		
		/// <summary>
		/// Internal service name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Internal service name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// Sharepoint farm url
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Sharepoint farm url&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("farmUrl")]
		public string FarmUrl {
			get {
				return this.FarmUrl_bfield;
			}
			set {
				this.FarmUrl_bfield = value;
			}
		}
		
		/// <summary>
		/// Sharepoint offer
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SharepointServiceOfferEnum&quot;,&quot;Description&quot;:&quot;Sharepoint offer&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("offer")]
		public string Offer {
			get {
				return this.Offer_bfield;
			}
			set {
				this.Offer_bfield = value;
			}
		}
		
		/// <summary>
		/// Shared space maximum size in byte
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Shared space maximum size in byte&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("quota")]
		public long Quota {
			get {
				return this.Quota_bfield;
			}
			set {
				this.Quota_bfield = value;
			}
		}
		
		/// <summary>
		/// Sharepoint service state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ServiceStateEnum&quot;,&quot;Description&quot;:&quot;Sharepoint service state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
		
		/// <summary>
		/// Sharepoint url
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Sharepoint url&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("url")]
		public string Url {
			get {
				return this.Url_bfield;
			}
			set {
				this.Url_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sharepoint service
	/// </summary>
	public class MsServicesSharepointServiceInfo {
		
		private string Domain_bfield;
		
		/// <summary>
		/// Internal service name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Internal service name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Spam and Antivirus configuration
	/// </summary>
	public class MsServicesSpamAndVirusConfiguration {
		
		private bool CheckDKIM_bfield;
		
		private bool CheckSPF_bfield;
		
		private bool DeleteSpam_bfield;
		
		private bool DeleteVirus_bfield;
		
		private bool PutInJunk_bfield;
		
		private bool TagSpam_bfield;
		
		private bool TagVirus_bfield;
		
		/// <summary>
		/// Check DKIM of message
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Check DKIM of message&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkDKIM")]
		public bool CheckDKIM {
			get {
				return this.CheckDKIM_bfield;
			}
			set {
				this.CheckDKIM_bfield = value;
			}
		}
		
		/// <summary>
		/// Check SPF of message
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Check SPF of message&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("checkSPF")]
		public bool CheckSPF {
			get {
				return this.CheckSPF_bfield;
			}
			set {
				this.CheckSPF_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam delete it
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam delete it&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteSpam")]
		public bool DeleteSpam {
			get {
				return this.DeleteSpam_bfield;
			}
			set {
				this.DeleteSpam_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a virus delete it
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a virus delete it&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteVirus")]
		public bool DeleteVirus {
			get {
				return this.DeleteVirus_bfield;
			}
			set {
				this.DeleteVirus_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam or virus put in junk. Overridden by deleteSpam or deleteVirus&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("putInJunk")]
		public bool PutInJunk {
			get {
				return this.PutInJunk_bfield;
			}
			set {
				this.PutInJunk_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a spam change its subject
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a spam change its subject&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("tagSpam")]
		public bool TagSpam {
			get {
				return this.TagSpam_bfield;
			}
			set {
				this.TagSpam_bfield = value;
			}
		}
		
		/// <summary>
		/// If message is a virus change its subject
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;If message is a virus change its subject&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("tagVirus")]
		public bool TagVirus {
			get {
				return this.TagVirus_bfield;
			}
			set {
				this.TagVirus_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sync account license
	/// </summary>
	public class MsServicesSyncAccountLicense {
		
		private string License_bfield;
		
		private long LicenseQuantity_bfield;
		
		/// <summary>
		/// the kind of license under which sync account is contracted
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SyncLicenseEnum&quot;,&quot;Description&quot;:&quot;the kind of license under which sync account is contracted&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("license")]
		public string License {
			get {
				return this.License_bfield;
			}
			set {
				this.License_bfield = value;
			}
		}
		
		/// <summary>
		/// number of license instances
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;number of license instances&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("licenseQuantity")]
		public long LicenseQuantity {
			get {
				return this.LicenseQuantity_bfield;
			}
			set {
				this.LicenseQuantity_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sync account license per day
	/// </summary>
	public class MsServicesSyncDailyLicense {
		
		private string[] AccountLicense_bfield;
		
		private string Date_bfield;
		
		/// <summary>
		/// sync account license usage
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SyncAccountLicense[]&quot;,&quot;Description&quot;:&quot;sync account license usage&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("accountLicense")]
		public string[] AccountLicense {
			get {
				return this.AccountLicense_bfield;
			}
			set {
				this.AccountLicense_bfield = value;
			}
		}
		
		/// <summary>
		/// the date used to determine sync account license usage
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:&quot;the date used to determine sync account license usage&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("date")]
		public string Date {
			get {
				return this.Date_bfield;
			}
			set {
				this.Date_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sync account information
	/// </summary>
	public class MsServicesSyncInformation {
		
		private bool Configured_bfield;
		
		private string License_bfield;
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Indicates if the account is configured
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates if the account is configured&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("configured")]
		public bool Configured {
			get {
				return this.Configured_bfield;
			}
			set {
				this.Configured_bfield = value;
			}
		}
		
		/// <summary>
		/// Sync account license
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.SyncLicenseEnum&quot;,&quot;Description&quot;:&quot;Sync account license&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("license")]
		public string License {
			get {
				return this.License_bfield;
			}
			set {
				this.License_bfield = value;
			}
		}
		
		/// <summary>
		/// Sync account state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ObjectStateEnum&quot;,&quot;Description&quot;:&quot;Sync account state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task for this sync account
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task for this sync account&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sync service
	/// </summary>
	public class MsServicesSyncService {
		
		private string State_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Exchange service state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.ServiceStateEnum&quot;,&quot;Description&quot;:&quot;Exchange service state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// Task pending id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task pending id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Active Directory task details
	/// </summary>
	public class MsServicesTask {
		
		private System.Nullable<System.DateTime> FinishDate_bfield;
		
		private string Function_bfield;
		
		private long Id_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// Completion date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Completion date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("finishDate")]
		public System.Nullable<System.DateTime> FinishDate {
			get {
				return this.FinishDate_bfield;
			}
			set {
				this.FinishDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Function name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.TaskFunctionEnum&quot;,&quot;Description&quot;:&quot;Function name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Task status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;Task status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Exchange task details
	/// </summary>
	public class MsServicesexchangeTask {
		
		private System.Nullable<System.DateTime> FinishDate_bfield;
		
		private string Function_bfield;
		
		private long Id_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// Completion date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Completion date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("finishDate")]
		public System.Nullable<System.DateTime> FinishDate {
			get {
				return this.FinishDate_bfield;
			}
			set {
				this.FinishDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Function name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Function name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Task status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;Task status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Sharepoint task details
	/// </summary>
	public class MsServicessharepointTask {
		
		private System.Nullable<System.DateTime> FinishDate_bfield;
		
		private string Function_bfield;
		
		private long Id_bfield;
		
		private string Status_bfield;
		
		private System.DateTime TodoDate_bfield;
		
		/// <summary>
		/// Completion date
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Completion date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("finishDate")]
		public System.Nullable<System.DateTime> FinishDate {
			get {
				return this.FinishDate_bfield;
			}
			set {
				this.FinishDate_bfield = value;
			}
		}
		
		/// <summary>
		/// Function name
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Function name&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("function")]
		public string Function {
			get {
				return this.Function_bfield;
			}
			set {
				this.Function_bfield = value;
			}
		}
		
		/// <summary>
		/// Task id
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Task id&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("id")]
		public long Id {
			get {
				return this.Id_bfield;
			}
			set {
				this.Id_bfield = value;
			}
		}
		
		/// <summary>
		/// Task status
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.TaskStatusEnum&quot;,&quot;Description&quot;:&quot;Task status&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
		
		/// <summary>
		/// Creation date
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;datetime&quot;,&quot;Description&quot;:&quot;Creation date&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("todoDate")]
		public System.DateTime TodoDate {
			get {
				return this.TodoDate_bfield;
			}
			set {
				this.TodoDate_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Active Directory UPN Suffix
	/// </summary>
	public class MsServicesupnSuffix {
		
		private string CnameToCheck_bfield;
		
		private bool OwnershipValidated_bfield;
		
		private string State_bfield;
		
		private string Suffix_bfield;
		
		private long TaskPendingId_bfield;
		
		/// <summary>
		/// Cname record used for UPN suffix verification
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;Cname record used for UPN suffix verification&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("cnameToCheck")]
		public string CnameToCheck {
			get {
				return this.CnameToCheck_bfield;
			}
			set {
				this.CnameToCheck_bfield = value;
			}
		}
		
		/// <summary>
		/// Ownership for upn suffix confirmed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Ownership for upn suffix confirmed&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("ownershipValidated")]
		public bool OwnershipValidated {
			get {
				return this.OwnershipValidated_bfield;
			}
			set {
				this.OwnershipValidated_bfield = value;
			}
		}
		
		/// <summary>
		/// UPN suffix state
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;msServices.UPNStateEnum&quot;,&quot;Description&quot;:&quot;UPN suffix state&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("state")]
		public string State {
			get {
				return this.State_bfield;
			}
			set {
				this.State_bfield = value;
			}
		}
		
		/// <summary>
		/// UPN suffix
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:&quot;UPN suffix&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("suffix")]
		public string Suffix {
			get {
				return this.Suffix_bfield;
			}
			set {
				this.Suffix_bfield = value;
			}
		}
		
		/// <summary>
		/// Pending task for this upnSuffix
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;Pending task for this upnSuffix&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("taskPendingId")]
		public long TaskPendingId {
			get {
				return this.TaskPendingId_bfield;
			}
			set {
				this.TaskPendingId_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Map a possible renew for a specific service
	/// </summary>
	public class ServiceRenewType {
		
		private bool Automatic_bfield;
		
		private bool DeleteAtExpiration_bfield;
		
		private bool Forced_bfield;
		
		private System.Nullable<bool> ManualPayment_bfield;
		
		private System.Nullable<long> Period_bfield;
		
		/// <summary>
		/// The service is automatically renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service is automatically renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("automatic")]
		public bool Automatic {
			get {
				return this.Automatic_bfield;
			}
			set {
				this.Automatic_bfield = value;
			}
		}
		
		/// <summary>
		/// The service will be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service will be deleted at expiration&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("deleteAtExpiration")]
		public bool DeleteAtExpiration {
			get {
				return this.DeleteAtExpiration_bfield;
			}
			set {
				this.DeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// The service forced to be renewed
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service forced to be renewed&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("forced")]
		public bool Forced {
			get {
				return this.Forced_bfield;
			}
			set {
				this.Forced_bfield = value;
			}
		}
		
		/// <summary>
		/// The service needs to be manually renewed and paid
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;The service needs to be manually renewed and paid&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("manualPayment")]
		public System.Nullable<bool> ManualPayment {
			get {
				return this.ManualPayment_bfield;
			}
			set {
				this.ManualPayment_bfield = value;
			}
		}
		
		/// <summary>
		/// period of renew in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:&quot;period of renew in month&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("period")]
		public System.Nullable<long> Period {
			get {
				return this.Period_bfield;
			}
			set {
				this.Period_bfield = value;
			}
		}
	}
	
	/// <summary>
	/// Details about a Service
	/// </summary>
	public class ServicesService {
		
		private bool CanDeleteAtExpiration_bfield;
		
		private string ContactAdmin_bfield;
		
		private string ContactBilling_bfield;
		
		private string ContactTech_bfield;
		
		private string Creation_bfield;
		
		private string Domain_bfield;
		
		private string EngagedUpTo_bfield;
		
		private string Expiration_bfield;
		
		private long[] PossibleRenewPeriod_bfield;
		
		private ServiceRenewType Renew_bfield;
		
		private string RenewalType_bfield;
		
		private long ServiceId_bfield;
		
		private string Status_bfield;
		
		/// <summary>
		/// Indicates that the service can be set up to be deleted at expiration
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;boolean&quot;,&quot;Description&quot;:&quot;Indicates that the service can be set up to be deleted at expiration&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("canDeleteAtExpiration")]
		public bool CanDeleteAtExpiration {
			get {
				return this.CanDeleteAtExpiration_bfield;
			}
			set {
				this.CanDeleteAtExpiration_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactAdmin")]
		public string ContactAdmin {
			get {
				return this.ContactAdmin_bfield;
			}
			set {
				this.ContactAdmin_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactBilling")]
		public string ContactBilling {
			get {
				return this.ContactBilling_bfield;
			}
			set {
				this.ContactBilling_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("contactTech")]
		public string ContactTech {
			get {
				return this.ContactTech_bfield;
			}
			set {
				this.ContactTech_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("creation")]
		public string Creation {
			get {
				return this.Creation_bfield;
			}
			set {
				this.Creation_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;string&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("domain")]
		public string Domain {
			get {
				return this.Domain_bfield;
			}
			set {
				this.Domain_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("engagedUpTo")]
		public string EngagedUpTo {
			get {
				return this.EngagedUpTo_bfield;
			}
			set {
				this.EngagedUpTo_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;date&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("expiration")]
		public string Expiration {
			get {
				return this.Expiration_bfield;
			}
			set {
				this.Expiration_bfield = value;
			}
		}
		
		/// <summary>
		/// All the possible renew period of your service in month
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;long[]&quot;,&quot;Description&quot;:&quot;All the possible renew period of your service in month&quot;,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("possibleRenewPeriod")]
		public long[] PossibleRenewPeriod {
			get {
				return this.PossibleRenewPeriod_bfield;
			}
			set {
				this.PossibleRenewPeriod_bfield = value;
			}
		}
		
		/// <summary>
		/// Way of handling the renew
		/// {&quot;CanBeNull&quot;:true,&quot;Type&quot;:&quot;service.RenewType&quot;,&quot;Description&quot;:&quot;Way of handling the renew&quot;,&quot;Readonly&quot;:false}
		/// </summary>
		[JsonProperty("renew")]
		public ServiceRenewType Renew {
			get {
				return this.Renew_bfield;
			}
			set {
				this.Renew_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.RenewalTypeEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("renewalType")]
		public string RenewalType {
			get {
				return this.RenewalType_bfield;
			}
			set {
				this.RenewalType_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;long&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("serviceId")]
		public long ServiceId {
			get {
				return this.ServiceId_bfield;
			}
			set {
				this.ServiceId_bfield = value;
			}
		}
		
		/// <summary>
		/// 
		/// {&quot;CanBeNull&quot;:false,&quot;Type&quot;:&quot;service.StateEnum&quot;,&quot;Description&quot;:null,&quot;Readonly&quot;:true}
		/// </summary>
		[JsonProperty("status")]
		public string Status {
			get {
				return this.Status_bfield;
			}
			set {
				this.Status_bfield = value;
			}
		}
	}
}
